
USB_VirtualPortCom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b04  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006c9c  08006c9c  00007c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cf4  08006cf4  00008130  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006cf4  08006cf4  00007cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cfc  08006cfc  00008130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cfc  08006cfc  00007cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d00  08006d00  00007d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000130  20000000  08006d04  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c04  20000130  08006e34  00008130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d34  08006e34  00008d34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008130  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d340  00000000  00000000  00008160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029e9  00000000  00000000  000154a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  00017e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000853  00000000  00000000  000189e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c6c  00000000  00000000  00019233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb95  00000000  00000000  00030e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008711b  00000000  00000000  0003fa34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6b4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ccc  00000000  00000000  000c6b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000c9860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000130 	.word	0x20000130
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006c84 	.word	0x08006c84

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000134 	.word	0x20000134
 80001d4:	08006c84 	.word	0x08006c84

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001fc:	f000 b988 	b.w	8000510 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	468e      	mov	lr, r1
 8000220:	4604      	mov	r4, r0
 8000222:	4688      	mov	r8, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14a      	bne.n	80002be <__udivmoddi4+0xa6>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d962      	bls.n	80002f4 <__udivmoddi4+0xdc>
 800022e:	fab2 f682 	clz	r6, r2
 8000232:	b14e      	cbz	r6, 8000248 <__udivmoddi4+0x30>
 8000234:	f1c6 0320 	rsb	r3, r6, #32
 8000238:	fa01 f806 	lsl.w	r8, r1, r6
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	40b7      	lsls	r7, r6
 8000242:	ea43 0808 	orr.w	r8, r3, r8
 8000246:	40b4      	lsls	r4, r6
 8000248:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800024c:	fa1f fc87 	uxth.w	ip, r7
 8000250:	fbb8 f1fe 	udiv	r1, r8, lr
 8000254:	0c23      	lsrs	r3, r4, #16
 8000256:	fb0e 8811 	mls	r8, lr, r1, r8
 800025a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025e:	fb01 f20c 	mul.w	r2, r1, ip
 8000262:	429a      	cmp	r2, r3
 8000264:	d909      	bls.n	800027a <__udivmoddi4+0x62>
 8000266:	18fb      	adds	r3, r7, r3
 8000268:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800026c:	f080 80ea 	bcs.w	8000444 <__udivmoddi4+0x22c>
 8000270:	429a      	cmp	r2, r3
 8000272:	f240 80e7 	bls.w	8000444 <__udivmoddi4+0x22c>
 8000276:	3902      	subs	r1, #2
 8000278:	443b      	add	r3, r7
 800027a:	1a9a      	subs	r2, r3, r2
 800027c:	b2a3      	uxth	r3, r4
 800027e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000282:	fb0e 2210 	mls	r2, lr, r0, r2
 8000286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028a:	fb00 fc0c 	mul.w	ip, r0, ip
 800028e:	459c      	cmp	ip, r3
 8000290:	d909      	bls.n	80002a6 <__udivmoddi4+0x8e>
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000298:	f080 80d6 	bcs.w	8000448 <__udivmoddi4+0x230>
 800029c:	459c      	cmp	ip, r3
 800029e:	f240 80d3 	bls.w	8000448 <__udivmoddi4+0x230>
 80002a2:	443b      	add	r3, r7
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002aa:	eba3 030c 	sub.w	r3, r3, ip
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11d      	cbz	r5, 80002ba <__udivmoddi4+0xa2>
 80002b2:	40f3      	lsrs	r3, r6
 80002b4:	2200      	movs	r2, #0
 80002b6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d905      	bls.n	80002ce <__udivmoddi4+0xb6>
 80002c2:	b10d      	cbz	r5, 80002c8 <__udivmoddi4+0xb0>
 80002c4:	e9c5 0100 	strd	r0, r1, [r5]
 80002c8:	2100      	movs	r1, #0
 80002ca:	4608      	mov	r0, r1
 80002cc:	e7f5      	b.n	80002ba <__udivmoddi4+0xa2>
 80002ce:	fab3 f183 	clz	r1, r3
 80002d2:	2900      	cmp	r1, #0
 80002d4:	d146      	bne.n	8000364 <__udivmoddi4+0x14c>
 80002d6:	4573      	cmp	r3, lr
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xc8>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 8105 	bhi.w	80004ea <__udivmoddi4+0x2d2>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4690      	mov	r8, r2
 80002ea:	2d00      	cmp	r5, #0
 80002ec:	d0e5      	beq.n	80002ba <__udivmoddi4+0xa2>
 80002ee:	e9c5 4800 	strd	r4, r8, [r5]
 80002f2:	e7e2      	b.n	80002ba <__udivmoddi4+0xa2>
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f000 8090 	beq.w	800041a <__udivmoddi4+0x202>
 80002fa:	fab2 f682 	clz	r6, r2
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f040 80a4 	bne.w	800044c <__udivmoddi4+0x234>
 8000304:	1a8a      	subs	r2, r1, r2
 8000306:	0c03      	lsrs	r3, r0, #16
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	b280      	uxth	r0, r0
 800030e:	b2bc      	uxth	r4, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb2 fcfe 	udiv	ip, r2, lr
 8000316:	fb0e 221c 	mls	r2, lr, ip, r2
 800031a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800031e:	fb04 f20c 	mul.w	r2, r4, ip
 8000322:	429a      	cmp	r2, r3
 8000324:	d907      	bls.n	8000336 <__udivmoddi4+0x11e>
 8000326:	18fb      	adds	r3, r7, r3
 8000328:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x11c>
 800032e:	429a      	cmp	r2, r3
 8000330:	f200 80e0 	bhi.w	80004f4 <__udivmoddi4+0x2dc>
 8000334:	46c4      	mov	ip, r8
 8000336:	1a9b      	subs	r3, r3, r2
 8000338:	fbb3 f2fe 	udiv	r2, r3, lr
 800033c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000340:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000344:	fb02 f404 	mul.w	r4, r2, r4
 8000348:	429c      	cmp	r4, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x144>
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x142>
 8000354:	429c      	cmp	r4, r3
 8000356:	f200 80ca 	bhi.w	80004ee <__udivmoddi4+0x2d6>
 800035a:	4602      	mov	r2, r0
 800035c:	1b1b      	subs	r3, r3, r4
 800035e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0x98>
 8000364:	f1c1 0620 	rsb	r6, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 f706 	lsr.w	r7, r2, r6
 800036e:	431f      	orrs	r7, r3
 8000370:	fa0e f401 	lsl.w	r4, lr, r1
 8000374:	fa20 f306 	lsr.w	r3, r0, r6
 8000378:	fa2e fe06 	lsr.w	lr, lr, r6
 800037c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	fa1f fc87 	uxth.w	ip, r7
 800038a:	fbbe f0f9 	udiv	r0, lr, r9
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	fb09 ee10 	mls	lr, r9, r0, lr
 8000394:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000398:	fb00 fe0c 	mul.w	lr, r0, ip
 800039c:	45a6      	cmp	lr, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x1a0>
 80003a4:	193c      	adds	r4, r7, r4
 80003a6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003aa:	f080 809c 	bcs.w	80004e6 <__udivmoddi4+0x2ce>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f240 8099 	bls.w	80004e6 <__udivmoddi4+0x2ce>
 80003b4:	3802      	subs	r0, #2
 80003b6:	443c      	add	r4, r7
 80003b8:	eba4 040e 	sub.w	r4, r4, lr
 80003bc:	fa1f fe83 	uxth.w	lr, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003cc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d0:	45a4      	cmp	ip, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1ce>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003da:	f080 8082 	bcs.w	80004e2 <__udivmoddi4+0x2ca>
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d97f      	bls.n	80004e2 <__udivmoddi4+0x2ca>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f2:	4564      	cmp	r4, ip
 80003f4:	4673      	mov	r3, lr
 80003f6:	46e1      	mov	r9, ip
 80003f8:	d362      	bcc.n	80004c0 <__udivmoddi4+0x2a8>
 80003fa:	d05f      	beq.n	80004bc <__udivmoddi4+0x2a4>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x1fe>
 80003fe:	ebb8 0203 	subs.w	r2, r8, r3
 8000402:	eb64 0409 	sbc.w	r4, r4, r9
 8000406:	fa04 f606 	lsl.w	r6, r4, r6
 800040a:	fa22 f301 	lsr.w	r3, r2, r1
 800040e:	431e      	orrs	r6, r3
 8000410:	40cc      	lsrs	r4, r1
 8000412:	e9c5 6400 	strd	r6, r4, [r5]
 8000416:	2100      	movs	r1, #0
 8000418:	e74f      	b.n	80002ba <__udivmoddi4+0xa2>
 800041a:	fbb1 fcf2 	udiv	ip, r1, r2
 800041e:	0c01      	lsrs	r1, r0, #16
 8000420:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000424:	b280      	uxth	r0, r0
 8000426:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042a:	463b      	mov	r3, r7
 800042c:	4638      	mov	r0, r7
 800042e:	463c      	mov	r4, r7
 8000430:	46b8      	mov	r8, r7
 8000432:	46be      	mov	lr, r7
 8000434:	2620      	movs	r6, #32
 8000436:	fbb1 f1f7 	udiv	r1, r1, r7
 800043a:	eba2 0208 	sub.w	r2, r2, r8
 800043e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000442:	e766      	b.n	8000312 <__udivmoddi4+0xfa>
 8000444:	4601      	mov	r1, r0
 8000446:	e718      	b.n	800027a <__udivmoddi4+0x62>
 8000448:	4610      	mov	r0, r2
 800044a:	e72c      	b.n	80002a6 <__udivmoddi4+0x8e>
 800044c:	f1c6 0220 	rsb	r2, r6, #32
 8000450:	fa2e f302 	lsr.w	r3, lr, r2
 8000454:	40b7      	lsls	r7, r6
 8000456:	40b1      	lsls	r1, r6
 8000458:	fa20 f202 	lsr.w	r2, r0, r2
 800045c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000460:	430a      	orrs	r2, r1
 8000462:	fbb3 f8fe 	udiv	r8, r3, lr
 8000466:	b2bc      	uxth	r4, r7
 8000468:	fb0e 3318 	mls	r3, lr, r8, r3
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb08 f904 	mul.w	r9, r8, r4
 8000476:	40b0      	lsls	r0, r6
 8000478:	4589      	cmp	r9, r1
 800047a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800047e:	b280      	uxth	r0, r0
 8000480:	d93e      	bls.n	8000500 <__udivmoddi4+0x2e8>
 8000482:	1879      	adds	r1, r7, r1
 8000484:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000488:	d201      	bcs.n	800048e <__udivmoddi4+0x276>
 800048a:	4589      	cmp	r9, r1
 800048c:	d81f      	bhi.n	80004ce <__udivmoddi4+0x2b6>
 800048e:	eba1 0109 	sub.w	r1, r1, r9
 8000492:	fbb1 f9fe 	udiv	r9, r1, lr
 8000496:	fb09 f804 	mul.w	r8, r9, r4
 800049a:	fb0e 1119 	mls	r1, lr, r9, r1
 800049e:	b292      	uxth	r2, r2
 80004a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a4:	4542      	cmp	r2, r8
 80004a6:	d229      	bcs.n	80004fc <__udivmoddi4+0x2e4>
 80004a8:	18ba      	adds	r2, r7, r2
 80004aa:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004ae:	d2c4      	bcs.n	800043a <__udivmoddi4+0x222>
 80004b0:	4542      	cmp	r2, r8
 80004b2:	d2c2      	bcs.n	800043a <__udivmoddi4+0x222>
 80004b4:	f1a9 0102 	sub.w	r1, r9, #2
 80004b8:	443a      	add	r2, r7
 80004ba:	e7be      	b.n	800043a <__udivmoddi4+0x222>
 80004bc:	45f0      	cmp	r8, lr
 80004be:	d29d      	bcs.n	80003fc <__udivmoddi4+0x1e4>
 80004c0:	ebbe 0302 	subs.w	r3, lr, r2
 80004c4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c8:	3801      	subs	r0, #1
 80004ca:	46e1      	mov	r9, ip
 80004cc:	e796      	b.n	80003fc <__udivmoddi4+0x1e4>
 80004ce:	eba7 0909 	sub.w	r9, r7, r9
 80004d2:	4449      	add	r1, r9
 80004d4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004dc:	fb09 f804 	mul.w	r8, r9, r4
 80004e0:	e7db      	b.n	800049a <__udivmoddi4+0x282>
 80004e2:	4673      	mov	r3, lr
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1ce>
 80004e6:	4650      	mov	r0, sl
 80004e8:	e766      	b.n	80003b8 <__udivmoddi4+0x1a0>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e6fd      	b.n	80002ea <__udivmoddi4+0xd2>
 80004ee:	443b      	add	r3, r7
 80004f0:	3a02      	subs	r2, #2
 80004f2:	e733      	b.n	800035c <__udivmoddi4+0x144>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	443b      	add	r3, r7
 80004fa:	e71c      	b.n	8000336 <__udivmoddi4+0x11e>
 80004fc:	4649      	mov	r1, r9
 80004fe:	e79c      	b.n	800043a <__udivmoddi4+0x222>
 8000500:	eba1 0109 	sub.w	r1, r1, r9
 8000504:	46c4      	mov	ip, r8
 8000506:	fbb1 f9fe 	udiv	r9, r1, lr
 800050a:	fb09 f804 	mul.w	r8, r9, r4
 800050e:	e7c4      	b.n	800049a <__udivmoddi4+0x282>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:

void SystemClock_Config(void);
static void MX_GPIO_Init(void);

int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0


  HAL_Init();
 8000518:	f000 f94c 	bl	80007b4 <HAL_Init>


  SystemClock_Config();
 800051c:	f000 f816 	bl	800054c <SystemClock_Config>


  MX_GPIO_Init();
 8000520:	f000 f87c 	bl	800061c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000524:	f005 fe72 	bl	800620c <MX_USB_DEVICE_Init>

  while (1)
  {
	  CDC_Transmit_FS(message,strlen((char *)message));
 8000528:	4807      	ldr	r0, [pc, #28]	@ (8000548 <main+0x34>)
 800052a:	f7ff fe55 	bl	80001d8 <strlen>
 800052e:	4603      	mov	r3, r0
 8000530:	b29b      	uxth	r3, r3
 8000532:	4619      	mov	r1, r3
 8000534:	4804      	ldr	r0, [pc, #16]	@ (8000548 <main+0x34>)
 8000536:	f005 ff27 	bl	8006388 <CDC_Transmit_FS>
	  HAL_Delay(400);
 800053a:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800053e:	f000 f9ab 	bl	8000898 <HAL_Delay>
	  CDC_Transmit_FS(message,strlen((char *)message));
 8000542:	bf00      	nop
 8000544:	e7f0      	b.n	8000528 <main+0x14>
 8000546:	bf00      	nop
 8000548:	20000000 	.word	0x20000000

0800054c <SystemClock_Config>:
  }
}


void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	@ 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0320 	add.w	r3, r7, #32
 8000556:	2230      	movs	r2, #48	@ 0x30
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f006 fb66 	bl	8006c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 030c 	add.w	r3, r7, #12
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	4b27      	ldr	r3, [pc, #156]	@ (8000614 <SystemClock_Config+0xc8>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000578:	4a26      	ldr	r2, [pc, #152]	@ (8000614 <SystemClock_Config+0xc8>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000580:	4b24      	ldr	r3, [pc, #144]	@ (8000614 <SystemClock_Config+0xc8>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	4b21      	ldr	r3, [pc, #132]	@ (8000618 <SystemClock_Config+0xcc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a20      	ldr	r2, [pc, #128]	@ (8000618 <SystemClock_Config+0xcc>)
 8000596:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b1e      	ldr	r3, [pc, #120]	@ (8000618 <SystemClock_Config+0xcc>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a8:	2301      	movs	r3, #1
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005bc:	2304      	movs	r3, #4
 80005be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005c0:	2360      	movs	r3, #96	@ 0x60
 80005c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005c8:	2304      	movs	r3, #4
 80005ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 0320 	add.w	r3, r7, #32
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 fe6d 	bl	80022b0 <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005dc:	f000 f846 	bl	800066c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	230f      	movs	r3, #15
 80005e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e4:	2302      	movs	r3, #2
 80005e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	2103      	movs	r1, #3
 80005fc:	4618      	mov	r0, r3
 80005fe:	f002 f8cf 	bl	80027a0 <HAL_RCC_ClockConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000608:	f000 f830 	bl	800066c <Error_Handler>
  }
}
 800060c:	bf00      	nop
 800060e:	3750      	adds	r7, #80	@ 0x50
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	4b10      	ldr	r3, [pc, #64]	@ (8000668 <MX_GPIO_Init+0x4c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a0f      	ldr	r2, [pc, #60]	@ (8000668 <MX_GPIO_Init+0x4c>)
 800062c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b0d      	ldr	r3, [pc, #52]	@ (8000668 <MX_GPIO_Init+0x4c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <MX_GPIO_Init+0x4c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	4a08      	ldr	r2, [pc, #32]	@ (8000668 <MX_GPIO_Init+0x4c>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6313      	str	r3, [r2, #48]	@ 0x30
 800064e:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <MX_GPIO_Init+0x4c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800

0800066c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000670:	b672      	cpsid	i
}
 8000672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <Error_Handler+0x8>

08000678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <HAL_MspInit+0x4c>)
 8000684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000686:	4a0f      	ldr	r2, [pc, #60]	@ (80006c4 <HAL_MspInit+0x4c>)
 8000688:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800068c:	6453      	str	r3, [r2, #68]	@ 0x44
 800068e:	4b0d      	ldr	r3, [pc, #52]	@ (80006c4 <HAL_MspInit+0x4c>)
 8000690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <HAL_MspInit+0x4c>)
 80006a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a2:	4a08      	ldr	r2, [pc, #32]	@ (80006c4 <HAL_MspInit+0x4c>)
 80006a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80006aa:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <HAL_MspInit+0x4c>)
 80006ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006b6:	2007      	movs	r0, #7
 80006b8:	f000 f9e2 	bl	8000a80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40023800 	.word	0x40023800

080006c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <NMI_Handler+0x4>

080006d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d4:	bf00      	nop
 80006d6:	e7fd      	b.n	80006d4 <HardFault_Handler+0x4>

080006d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <MemManage_Handler+0x4>

080006e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <BusFault_Handler+0x4>

080006e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <UsageFault_Handler+0x4>

080006f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr

0800071a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800071e:	f000 f89b 	bl	8000858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800072c:	4802      	ldr	r0, [pc, #8]	@ (8000738 <OTG_FS_IRQHandler+0x10>)
 800072e:	f000 fcb1 	bl	8001094 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20001630 	.word	0x20001630

0800073c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <SystemInit+0x20>)
 8000742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000746:	4a05      	ldr	r2, [pc, #20]	@ (800075c <SystemInit+0x20>)
 8000748:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800074c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000760:	480d      	ldr	r0, [pc, #52]	@ (8000798 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000762:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000764:	f7ff ffea 	bl	800073c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000768:	480c      	ldr	r0, [pc, #48]	@ (800079c <LoopForever+0x6>)
  ldr r1, =_edata
 800076a:	490d      	ldr	r1, [pc, #52]	@ (80007a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800076c:	4a0d      	ldr	r2, [pc, #52]	@ (80007a4 <LoopForever+0xe>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000770:	e002      	b.n	8000778 <LoopCopyDataInit>

08000772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000776:	3304      	adds	r3, #4

08000778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800077a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800077c:	d3f9      	bcc.n	8000772 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077e:	4a0a      	ldr	r2, [pc, #40]	@ (80007a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000780:	4c0a      	ldr	r4, [pc, #40]	@ (80007ac <LoopForever+0x16>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000784:	e001      	b.n	800078a <LoopFillZerobss>

08000786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000788:	3204      	adds	r2, #4

0800078a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800078a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800078c:	d3fb      	bcc.n	8000786 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800078e:	f006 fa55 	bl	8006c3c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000792:	f7ff febf 	bl	8000514 <main>

08000796 <LoopForever>:

LoopForever:
  b LoopForever
 8000796:	e7fe      	b.n	8000796 <LoopForever>
  ldr   r0, =_estack
 8000798:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800079c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a0:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 80007a4:	08006d04 	.word	0x08006d04
  ldr r2, =_sbss
 80007a8:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 80007ac:	20001d34 	.word	0x20001d34

080007b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b0:	e7fe      	b.n	80007b0 <ADC_IRQHandler>
	...

080007b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007b8:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <HAL_Init+0x40>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a0d      	ldr	r2, [pc, #52]	@ (80007f4 <HAL_Init+0x40>)
 80007be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007c4:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <HAL_Init+0x40>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0a      	ldr	r2, [pc, #40]	@ (80007f4 <HAL_Init+0x40>)
 80007ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d0:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <HAL_Init+0x40>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a07      	ldr	r2, [pc, #28]	@ (80007f4 <HAL_Init+0x40>)
 80007d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007dc:	2003      	movs	r0, #3
 80007de:	f000 f94f 	bl	8000a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007e2:	2000      	movs	r0, #0
 80007e4:	f000 f808 	bl	80007f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e8:	f7ff ff46 	bl	8000678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023c00 	.word	0x40023c00

080007f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000800:	4b12      	ldr	r3, [pc, #72]	@ (800084c <HAL_InitTick+0x54>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <HAL_InitTick+0x58>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800080e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000812:	fbb2 f3f3 	udiv	r3, r2, r3
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f967 	bl	8000aea <HAL_SYSTICK_Config>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	e00e      	b.n	8000844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b0f      	cmp	r3, #15
 800082a:	d80a      	bhi.n	8000842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800082c:	2200      	movs	r2, #0
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000834:	f000 f92f 	bl	8000a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000838:	4a06      	ldr	r2, [pc, #24]	@ (8000854 <HAL_InitTick+0x5c>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800083e:	2300      	movs	r3, #0
 8000840:	e000      	b.n	8000844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
}
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000034 	.word	0x20000034
 8000850:	2000003c 	.word	0x2000003c
 8000854:	20000038 	.word	0x20000038

08000858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <HAL_IncTick+0x20>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	4b06      	ldr	r3, [pc, #24]	@ (800087c <HAL_IncTick+0x24>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4413      	add	r3, r2
 8000868:	4a04      	ldr	r2, [pc, #16]	@ (800087c <HAL_IncTick+0x24>)
 800086a:	6013      	str	r3, [r2, #0]
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	2000003c 	.word	0x2000003c
 800087c:	2000014c 	.word	0x2000014c

08000880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return uwTick;
 8000884:	4b03      	ldr	r3, [pc, #12]	@ (8000894 <HAL_GetTick+0x14>)
 8000886:	681b      	ldr	r3, [r3, #0]
}
 8000888:	4618      	mov	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	2000014c 	.word	0x2000014c

08000898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a0:	f7ff ffee 	bl	8000880 <HAL_GetTick>
 80008a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80008b0:	d005      	beq.n	80008be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008b2:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <HAL_Delay+0x44>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	4413      	add	r3, r2
 80008bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008be:	bf00      	nop
 80008c0:	f7ff ffde 	bl	8000880 <HAL_GetTick>
 80008c4:	4602      	mov	r2, r0
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d8f7      	bhi.n	80008c0 <HAL_Delay+0x28>
  {
  }
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000003c 	.word	0x2000003c

080008e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f003 0307 	and.w	r3, r3, #7
 80008ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <__NVIC_SetPriorityGrouping+0x44>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008fc:	4013      	ands	r3, r2
 80008fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000908:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800090c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000912:	4a04      	ldr	r2, [pc, #16]	@ (8000924 <__NVIC_SetPriorityGrouping+0x44>)
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	60d3      	str	r3, [r2, #12]
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800092c:	4b04      	ldr	r3, [pc, #16]	@ (8000940 <__NVIC_GetPriorityGrouping+0x18>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	0a1b      	lsrs	r3, r3, #8
 8000932:	f003 0307 	and.w	r3, r3, #7
}
 8000936:	4618      	mov	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	2b00      	cmp	r3, #0
 8000954:	db0b      	blt.n	800096e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	f003 021f 	and.w	r2, r3, #31
 800095c:	4907      	ldr	r1, [pc, #28]	@ (800097c <__NVIC_EnableIRQ+0x38>)
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	095b      	lsrs	r3, r3, #5
 8000964:	2001      	movs	r0, #1
 8000966:	fa00 f202 	lsl.w	r2, r0, r2
 800096a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000e100 	.word	0xe000e100

08000980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	6039      	str	r1, [r7, #0]
 800098a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800098c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000990:	2b00      	cmp	r3, #0
 8000992:	db0a      	blt.n	80009aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	b2da      	uxtb	r2, r3
 8000998:	490c      	ldr	r1, [pc, #48]	@ (80009cc <__NVIC_SetPriority+0x4c>)
 800099a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099e:	0112      	lsls	r2, r2, #4
 80009a0:	b2d2      	uxtb	r2, r2
 80009a2:	440b      	add	r3, r1
 80009a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009a8:	e00a      	b.n	80009c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4908      	ldr	r1, [pc, #32]	@ (80009d0 <__NVIC_SetPriority+0x50>)
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	f003 030f 	and.w	r3, r3, #15
 80009b6:	3b04      	subs	r3, #4
 80009b8:	0112      	lsls	r2, r2, #4
 80009ba:	b2d2      	uxtb	r2, r2
 80009bc:	440b      	add	r3, r1
 80009be:	761a      	strb	r2, [r3, #24]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000e100 	.word	0xe000e100
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b089      	sub	sp, #36	@ 0x24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	f1c3 0307 	rsb	r3, r3, #7
 80009ee:	2b04      	cmp	r3, #4
 80009f0:	bf28      	it	cs
 80009f2:	2304      	movcs	r3, #4
 80009f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	3304      	adds	r3, #4
 80009fa:	2b06      	cmp	r3, #6
 80009fc:	d902      	bls.n	8000a04 <NVIC_EncodePriority+0x30>
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	3b03      	subs	r3, #3
 8000a02:	e000      	b.n	8000a06 <NVIC_EncodePriority+0x32>
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	43da      	mvns	r2, r3
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	401a      	ands	r2, r3
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a1c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	fa01 f303 	lsl.w	r3, r1, r3
 8000a26:	43d9      	mvns	r1, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a2c:	4313      	orrs	r3, r2
         );
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3724      	adds	r7, #36	@ 0x24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
	...

08000a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a4c:	d301      	bcc.n	8000a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e00f      	b.n	8000a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a52:	4a0a      	ldr	r2, [pc, #40]	@ (8000a7c <SysTick_Config+0x40>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a5a:	210f      	movs	r1, #15
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a60:	f7ff ff8e 	bl	8000980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a64:	4b05      	ldr	r3, [pc, #20]	@ (8000a7c <SysTick_Config+0x40>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a6a:	4b04      	ldr	r3, [pc, #16]	@ (8000a7c <SysTick_Config+0x40>)
 8000a6c:	2207      	movs	r2, #7
 8000a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	e000e010 	.word	0xe000e010

08000a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff ff29 	bl	80008e0 <__NVIC_SetPriorityGrouping>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b086      	sub	sp, #24
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
 8000aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa8:	f7ff ff3e 	bl	8000928 <__NVIC_GetPriorityGrouping>
 8000aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	68b9      	ldr	r1, [r7, #8]
 8000ab2:	6978      	ldr	r0, [r7, #20]
 8000ab4:	f7ff ff8e 	bl	80009d4 <NVIC_EncodePriority>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000abe:	4611      	mov	r1, r2
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff5d 	bl	8000980 <__NVIC_SetPriority>
}
 8000ac6:	bf00      	nop
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff31 	bl	8000944 <__NVIC_EnableIRQ>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff ffa2 	bl	8000a3c <SysTick_Config>
 8000af8:	4603      	mov	r3, r0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b089      	sub	sp, #36	@ 0x24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
 8000b1e:	e159      	b.n	8000dd4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b20:	2201      	movs	r2, #1
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	697a      	ldr	r2, [r7, #20]
 8000b30:	4013      	ands	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	f040 8148 	bne.w	8000dce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f003 0303 	and.w	r3, r3, #3
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d005      	beq.n	8000b56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d130      	bne.n	8000bb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	2203      	movs	r2, #3
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43db      	mvns	r3, r3
 8000b68:	69ba      	ldr	r2, [r7, #24]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	68da      	ldr	r2, [r3, #12]
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	69ba      	ldr	r2, [r7, #24]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	69ba      	ldr	r2, [r7, #24]
 8000b84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	091b      	lsrs	r3, r3, #4
 8000ba2:	f003 0201 	and.w	r2, r3, #1
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f003 0303 	and.w	r3, r3, #3
 8000bc0:	2b03      	cmp	r3, #3
 8000bc2:	d017      	beq.n	8000bf4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	2203      	movs	r2, #3
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	69ba      	ldr	r2, [r7, #24]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	689a      	ldr	r2, [r3, #8]
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f003 0303 	and.w	r3, r3, #3
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d123      	bne.n	8000c48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	08da      	lsrs	r2, r3, #3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3208      	adds	r2, #8
 8000c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	f003 0307 	and.w	r3, r3, #7
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	220f      	movs	r2, #15
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	4013      	ands	r3, r2
 8000c22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	691a      	ldr	r2, [r3, #16]
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	08da      	lsrs	r2, r3, #3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3208      	adds	r2, #8
 8000c42:	69b9      	ldr	r1, [r7, #24]
 8000c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	2203      	movs	r2, #3
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f003 0203 	and.w	r2, r3, #3
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	f000 80a2 	beq.w	8000dce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b57      	ldr	r3, [pc, #348]	@ (8000dec <HAL_GPIO_Init+0x2e8>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c92:	4a56      	ldr	r2, [pc, #344]	@ (8000dec <HAL_GPIO_Init+0x2e8>)
 8000c94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c9a:	4b54      	ldr	r3, [pc, #336]	@ (8000dec <HAL_GPIO_Init+0x2e8>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ca6:	4a52      	ldr	r2, [pc, #328]	@ (8000df0 <HAL_GPIO_Init+0x2ec>)
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	089b      	lsrs	r3, r3, #2
 8000cac:	3302      	adds	r3, #2
 8000cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f003 0303 	and.w	r3, r3, #3
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	220f      	movs	r2, #15
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a49      	ldr	r2, [pc, #292]	@ (8000df4 <HAL_GPIO_Init+0x2f0>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d019      	beq.n	8000d06 <HAL_GPIO_Init+0x202>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a48      	ldr	r2, [pc, #288]	@ (8000df8 <HAL_GPIO_Init+0x2f4>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d013      	beq.n	8000d02 <HAL_GPIO_Init+0x1fe>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a47      	ldr	r2, [pc, #284]	@ (8000dfc <HAL_GPIO_Init+0x2f8>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d00d      	beq.n	8000cfe <HAL_GPIO_Init+0x1fa>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a46      	ldr	r2, [pc, #280]	@ (8000e00 <HAL_GPIO_Init+0x2fc>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d007      	beq.n	8000cfa <HAL_GPIO_Init+0x1f6>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a45      	ldr	r2, [pc, #276]	@ (8000e04 <HAL_GPIO_Init+0x300>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d101      	bne.n	8000cf6 <HAL_GPIO_Init+0x1f2>
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	e008      	b.n	8000d08 <HAL_GPIO_Init+0x204>
 8000cf6:	2307      	movs	r3, #7
 8000cf8:	e006      	b.n	8000d08 <HAL_GPIO_Init+0x204>
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	e004      	b.n	8000d08 <HAL_GPIO_Init+0x204>
 8000cfe:	2302      	movs	r3, #2
 8000d00:	e002      	b.n	8000d08 <HAL_GPIO_Init+0x204>
 8000d02:	2301      	movs	r3, #1
 8000d04:	e000      	b.n	8000d08 <HAL_GPIO_Init+0x204>
 8000d06:	2300      	movs	r3, #0
 8000d08:	69fa      	ldr	r2, [r7, #28]
 8000d0a:	f002 0203 	and.w	r2, r2, #3
 8000d0e:	0092      	lsls	r2, r2, #2
 8000d10:	4093      	lsls	r3, r2
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d18:	4935      	ldr	r1, [pc, #212]	@ (8000df0 <HAL_GPIO_Init+0x2ec>)
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	089b      	lsrs	r3, r3, #2
 8000d1e:	3302      	adds	r3, #2
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d26:	4b38      	ldr	r3, [pc, #224]	@ (8000e08 <HAL_GPIO_Init+0x304>)
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4013      	ands	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d4a:	4a2f      	ldr	r2, [pc, #188]	@ (8000e08 <HAL_GPIO_Init+0x304>)
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d50:	4b2d      	ldr	r3, [pc, #180]	@ (8000e08 <HAL_GPIO_Init+0x304>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d003      	beq.n	8000d74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d74:	4a24      	ldr	r2, [pc, #144]	@ (8000e08 <HAL_GPIO_Init+0x304>)
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d7a:	4b23      	ldr	r3, [pc, #140]	@ (8000e08 <HAL_GPIO_Init+0x304>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	43db      	mvns	r3, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4013      	ands	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d9e:	4a1a      	ldr	r2, [pc, #104]	@ (8000e08 <HAL_GPIO_Init+0x304>)
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000da4:	4b18      	ldr	r3, [pc, #96]	@ (8000e08 <HAL_GPIO_Init+0x304>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8000e08 <HAL_GPIO_Init+0x304>)
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	61fb      	str	r3, [r7, #28]
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	2b0f      	cmp	r3, #15
 8000dd8:	f67f aea2 	bls.w	8000b20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	3724      	adds	r7, #36	@ 0x24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40013800 	.word	0x40013800
 8000df4:	40020000 	.word	0x40020000
 8000df8:	40020400 	.word	0x40020400
 8000dfc:	40020800 	.word	0x40020800
 8000e00:	40020c00 	.word	0x40020c00
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40013c00 	.word	0x40013c00

08000e0c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af02      	add	r7, sp, #8
 8000e12:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e101      	b.n	8001022 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d106      	bne.n	8000e3e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f005 fbed 	bl	8006618 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2203      	movs	r2, #3
 8000e42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e4c:	d102      	bne.n	8000e54 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f001 ffb0 	bl	8002dbe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6818      	ldr	r0, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	7c1a      	ldrb	r2, [r3, #16]
 8000e66:	f88d 2000 	strb.w	r2, [sp]
 8000e6a:	3304      	adds	r3, #4
 8000e6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e6e:	f001 fe8f 	bl	8002b90 <USB_CoreInit>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d005      	beq.n	8000e84 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e0ce      	b.n	8001022 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f001 ffa8 	bl	8002de0 <USB_SetCurrentMode>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d005      	beq.n	8000ea2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2202      	movs	r2, #2
 8000e9a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e0bf      	b.n	8001022 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	73fb      	strb	r3, [r7, #15]
 8000ea6:	e04a      	b.n	8000f3e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ea8:	7bfa      	ldrb	r2, [r7, #15]
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	4613      	mov	r3, r2
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	4413      	add	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	3315      	adds	r3, #21
 8000eb8:	2201      	movs	r2, #1
 8000eba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ebc:	7bfa      	ldrb	r2, [r7, #15]
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	4413      	add	r3, r2
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	440b      	add	r3, r1
 8000eca:	3314      	adds	r3, #20
 8000ecc:	7bfa      	ldrb	r2, [r7, #15]
 8000ece:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ed0:	7bfa      	ldrb	r2, [r7, #15]
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	b298      	uxth	r0, r3
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	4413      	add	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	332e      	adds	r3, #46	@ 0x2e
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ee8:	7bfa      	ldrb	r2, [r7, #15]
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	4613      	mov	r3, r2
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	4413      	add	r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	3318      	adds	r3, #24
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000efc:	7bfa      	ldrb	r2, [r7, #15]
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	4613      	mov	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	4413      	add	r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	440b      	add	r3, r1
 8000f0a:	331c      	adds	r3, #28
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f10:	7bfa      	ldrb	r2, [r7, #15]
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	4613      	mov	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	4413      	add	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	3320      	adds	r3, #32
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f24:	7bfa      	ldrb	r2, [r7, #15]
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	4413      	add	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	440b      	add	r3, r1
 8000f32:	3324      	adds	r3, #36	@ 0x24
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	73fb      	strb	r3, [r7, #15]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	791b      	ldrb	r3, [r3, #4]
 8000f42:	7bfa      	ldrb	r2, [r7, #15]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d3af      	bcc.n	8000ea8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f48:	2300      	movs	r3, #0
 8000f4a:	73fb      	strb	r3, [r7, #15]
 8000f4c:	e044      	b.n	8000fd8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f4e:	7bfa      	ldrb	r2, [r7, #15]
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	4413      	add	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f64:	7bfa      	ldrb	r2, [r7, #15]
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	4413      	add	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8000f76:	7bfa      	ldrb	r2, [r7, #15]
 8000f78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f7a:	7bfa      	ldrb	r2, [r7, #15]
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	4413      	add	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	440b      	add	r3, r1
 8000f88:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f90:	7bfa      	ldrb	r2, [r7, #15]
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	4613      	mov	r3, r2
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	4413      	add	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fa6:	7bfa      	ldrb	r2, [r7, #15]
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	4413      	add	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fbc:	7bfa      	ldrb	r2, [r7, #15]
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	4413      	add	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	440b      	add	r3, r1
 8000fca:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	73fb      	strb	r3, [r7, #15]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	791b      	ldrb	r3, [r3, #4]
 8000fdc:	7bfa      	ldrb	r2, [r7, #15]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d3b5      	bcc.n	8000f4e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6818      	ldr	r0, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7c1a      	ldrb	r2, [r3, #16]
 8000fea:	f88d 2000 	strb.w	r2, [sp]
 8000fee:	3304      	adds	r3, #4
 8000ff0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ff2:	f001 ff41 	bl	8002e78 <USB_DevInit>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d005      	beq.n	8001008 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2202      	movs	r2, #2
 8001000:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e00c      	b.n	8001022 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f002 ff8b 	bl	8003f36 <USB_DevDisconnect>

  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b084      	sub	sp, #16
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800103e:	2b01      	cmp	r3, #1
 8001040:	d101      	bne.n	8001046 <HAL_PCD_Start+0x1c>
 8001042:	2302      	movs	r3, #2
 8001044:	e022      	b.n	800108c <HAL_PCD_Start+0x62>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2201      	movs	r2, #1
 800104a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001056:	2b00      	cmp	r3, #0
 8001058:	d009      	beq.n	800106e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800105e:	2b01      	cmp	r3, #1
 8001060:	d105      	bne.n	800106e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001066:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f001 fe92 	bl	8002d9c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f002 ff39 	bl	8003ef4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001094:	b590      	push	{r4, r7, lr}
 8001096:	b08d      	sub	sp, #52	@ 0x34
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80010a2:	6a3b      	ldr	r3, [r7, #32]
 80010a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 fff7 	bl	800409e <USB_GetMode>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f040 848c 	bne.w	80019d0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4618      	mov	r0, r3
 80010be:	f002 ff5b 	bl	8003f78 <USB_ReadInterrupts>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 8482 	beq.w	80019ce <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	0a1b      	lsrs	r3, r3, #8
 80010d4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f002 ff48 	bl	8003f78 <USB_ReadInterrupts>
 80010e8:	4603      	mov	r3, r0
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d107      	bne.n	8001102 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	695a      	ldr	r2, [r3, #20]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f002 0202 	and.w	r2, r2, #2
 8001100:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f002 ff36 	bl	8003f78 <USB_ReadInterrupts>
 800110c:	4603      	mov	r3, r0
 800110e:	f003 0310 	and.w	r3, r3, #16
 8001112:	2b10      	cmp	r3, #16
 8001114:	d161      	bne.n	80011da <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	699a      	ldr	r2, [r3, #24]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 0210 	bic.w	r2, r2, #16
 8001124:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001126:	6a3b      	ldr	r3, [r7, #32]
 8001128:	6a1b      	ldr	r3, [r3, #32]
 800112a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	f003 020f 	and.w	r2, r3, #15
 8001132:	4613      	mov	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	4413      	add	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	3304      	adds	r3, #4
 8001144:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800114c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001150:	d124      	bne.n	800119c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001158:	4013      	ands	r3, r2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d035      	beq.n	80011ca <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	091b      	lsrs	r3, r3, #4
 8001166:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001168:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800116c:	b29b      	uxth	r3, r3
 800116e:	461a      	mov	r2, r3
 8001170:	6a38      	ldr	r0, [r7, #32]
 8001172:	f002 fd6d 	bl	8003c50 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	68da      	ldr	r2, [r3, #12]
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	091b      	lsrs	r3, r3, #4
 800117e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001182:	441a      	add	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	695a      	ldr	r2, [r3, #20]
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	091b      	lsrs	r3, r3, #4
 8001190:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001194:	441a      	add	r2, r3
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	615a      	str	r2, [r3, #20]
 800119a:	e016      	b.n	80011ca <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80011a2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80011a6:	d110      	bne.n	80011ca <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80011ae:	2208      	movs	r2, #8
 80011b0:	4619      	mov	r1, r3
 80011b2:	6a38      	ldr	r0, [r7, #32]
 80011b4:	f002 fd4c 	bl	8003c50 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	695a      	ldr	r2, [r3, #20]
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	091b      	lsrs	r3, r3, #4
 80011c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011c4:	441a      	add	r2, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	699a      	ldr	r2, [r3, #24]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f042 0210 	orr.w	r2, r2, #16
 80011d8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f002 feca 	bl	8003f78 <USB_ReadInterrupts>
 80011e4:	4603      	mov	r3, r0
 80011e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011ea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80011ee:	f040 80a7 	bne.w	8001340 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f002 fecf 	bl	8003f9e <USB_ReadDevAllOutEpInterrupt>
 8001200:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001202:	e099      	b.n	8001338 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 808e 	beq.w	800132c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f002 fef3 	bl	8004006 <USB_ReadDevOutEPInterrupt>
 8001220:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00c      	beq.n	8001246 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800122c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122e:	015a      	lsls	r2, r3, #5
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	4413      	add	r3, r2
 8001234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001238:	461a      	mov	r2, r3
 800123a:	2301      	movs	r3, #1
 800123c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800123e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 fea3 	bl	8001f8c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	f003 0308 	and.w	r3, r3, #8
 800124c:	2b00      	cmp	r3, #0
 800124e:	d00c      	beq.n	800126a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001252:	015a      	lsls	r2, r3, #5
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	4413      	add	r3, r2
 8001258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800125c:	461a      	mov	r2, r3
 800125e:	2308      	movs	r3, #8
 8001260:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001262:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 ff79 	bl	800215c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	2b00      	cmp	r3, #0
 8001272:	d008      	beq.n	8001286 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001276:	015a      	lsls	r2, r3, #5
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	4413      	add	r3, r2
 800127c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001280:	461a      	mov	r2, r3
 8001282:	2310      	movs	r3, #16
 8001284:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d030      	beq.n	80012f2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001290:	6a3b      	ldr	r3, [r7, #32]
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001298:	2b80      	cmp	r3, #128	@ 0x80
 800129a:	d109      	bne.n	80012b0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	69fa      	ldr	r2, [r7, #28]
 80012a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80012aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012ae:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80012b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012b2:	4613      	mov	r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	4413      	add	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	3304      	adds	r3, #4
 80012c4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	78db      	ldrb	r3, [r3, #3]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d108      	bne.n	80012e0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	2200      	movs	r2, #0
 80012d2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80012d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	4619      	mov	r1, r3
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f005 fa98 	bl	8006810 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80012e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e2:	015a      	lsls	r2, r3, #5
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	4413      	add	r3, r2
 80012e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80012ec:	461a      	mov	r2, r3
 80012ee:	2302      	movs	r3, #2
 80012f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	f003 0320 	and.w	r3, r3, #32
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d008      	beq.n	800130e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80012fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fe:	015a      	lsls	r2, r3, #5
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	4413      	add	r3, r2
 8001304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001308:	461a      	mov	r2, r3
 800130a:	2320      	movs	r3, #32
 800130c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d009      	beq.n	800132c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131a:	015a      	lsls	r2, r3, #5
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	4413      	add	r3, r2
 8001320:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001324:	461a      	mov	r2, r3
 8001326:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800132a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800132c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132e:	3301      	adds	r3, #1
 8001330:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001334:	085b      	lsrs	r3, r3, #1
 8001336:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800133a:	2b00      	cmp	r3, #0
 800133c:	f47f af62 	bne.w	8001204 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f002 fe17 	bl	8003f78 <USB_ReadInterrupts>
 800134a:	4603      	mov	r3, r0
 800134c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001350:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001354:	f040 80db 	bne.w	800150e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f002 fe38 	bl	8003fd2 <USB_ReadDevAllInEpInterrupt>
 8001362:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001368:	e0cd      	b.n	8001506 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800136a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 80c2 	beq.w	80014fa <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f002 fe5e 	bl	8004042 <USB_ReadDevInEPInterrupt>
 8001386:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	2b00      	cmp	r3, #0
 8001390:	d057      	beq.n	8001442 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001394:	f003 030f 	and.w	r3, r3, #15
 8001398:	2201      	movs	r2, #1
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80013a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69f9      	ldr	r1, [r7, #28]
 80013ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80013b2:	4013      	ands	r3, r2
 80013b4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80013b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b8:	015a      	lsls	r2, r3, #5
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	4413      	add	r3, r2
 80013be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80013c2:	461a      	mov	r2, r3
 80013c4:	2301      	movs	r3, #1
 80013c6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	799b      	ldrb	r3, [r3, #6]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d132      	bne.n	8001436 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013d4:	4613      	mov	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	4413      	add	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	440b      	add	r3, r1
 80013de:	3320      	adds	r3, #32
 80013e0:	6819      	ldr	r1, [r3, #0]
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013e6:	4613      	mov	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	4413      	add	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4403      	add	r3, r0
 80013f0:	331c      	adds	r3, #28
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4419      	add	r1, r3
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013fa:	4613      	mov	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	4413      	add	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4403      	add	r3, r0
 8001404:	3320      	adds	r3, #32
 8001406:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140a:	2b00      	cmp	r3, #0
 800140c:	d113      	bne.n	8001436 <HAL_PCD_IRQHandler+0x3a2>
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001412:	4613      	mov	r3, r2
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	4413      	add	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	440b      	add	r3, r1
 800141c:	3324      	adds	r3, #36	@ 0x24
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d108      	bne.n	8001436 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6818      	ldr	r0, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800142e:	461a      	mov	r2, r3
 8001430:	2101      	movs	r1, #1
 8001432:	f002 fe65 	bl	8004100 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001438:	b2db      	uxtb	r3, r3
 800143a:	4619      	mov	r1, r3
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f005 f96c 	bl	800671a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	f003 0308 	and.w	r3, r3, #8
 8001448:	2b00      	cmp	r3, #0
 800144a:	d008      	beq.n	800145e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800144c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144e:	015a      	lsls	r2, r3, #5
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	4413      	add	r3, r2
 8001454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001458:	461a      	mov	r2, r3
 800145a:	2308      	movs	r3, #8
 800145c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	2b00      	cmp	r3, #0
 8001466:	d008      	beq.n	800147a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146a:	015a      	lsls	r2, r3, #5
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	4413      	add	r3, r2
 8001470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001474:	461a      	mov	r2, r3
 8001476:	2310      	movs	r3, #16
 8001478:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001480:	2b00      	cmp	r3, #0
 8001482:	d008      	beq.n	8001496 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001486:	015a      	lsls	r2, r3, #5
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	4413      	add	r3, r2
 800148c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001490:	461a      	mov	r2, r3
 8001492:	2340      	movs	r3, #64	@ 0x40
 8001494:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d023      	beq.n	80014e8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80014a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014a2:	6a38      	ldr	r0, [r7, #32]
 80014a4:	f001 fe4c 	bl	8003140 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80014a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014aa:	4613      	mov	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	4413      	add	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	3310      	adds	r3, #16
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	4413      	add	r3, r2
 80014b8:	3304      	adds	r3, #4
 80014ba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	78db      	ldrb	r3, [r3, #3]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d108      	bne.n	80014d6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	2200      	movs	r2, #0
 80014c8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80014ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	4619      	mov	r1, r3
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f005 f9af 	bl	8006834 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80014d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d8:	015a      	lsls	r2, r3, #5
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	4413      	add	r3, r2
 80014de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014e2:	461a      	mov	r2, r3
 80014e4:	2302      	movs	r3, #2
 80014e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80014f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 fcbd 	bl	8001e74 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80014fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fc:	3301      	adds	r3, #1
 80014fe:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001502:	085b      	lsrs	r3, r3, #1
 8001504:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001508:	2b00      	cmp	r3, #0
 800150a:	f47f af2e 	bne.w	800136a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f002 fd30 	bl	8003f78 <USB_ReadInterrupts>
 8001518:	4603      	mov	r3, r0
 800151a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800151e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001522:	d122      	bne.n	800156a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	69fa      	ldr	r2, [r7, #28]
 800152e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001532:	f023 0301 	bic.w	r3, r3, #1
 8001536:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800153e:	2b01      	cmp	r3, #1
 8001540:	d108      	bne.n	8001554 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800154a:	2100      	movs	r1, #0
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 fea3 	bl	8002298 <HAL_PCDEx_LPM_Callback>
 8001552:	e002      	b.n	800155a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f005 f94d 	bl	80067f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	695a      	ldr	r2, [r3, #20]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001568:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f002 fd02 	bl	8003f78 <USB_ReadInterrupts>
 8001574:	4603      	mov	r3, r0
 8001576:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800157a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800157e:	d112      	bne.n	80015a6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b01      	cmp	r3, #1
 800158e:	d102      	bne.n	8001596 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f005 f909 	bl	80067a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	695a      	ldr	r2, [r3, #20]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80015a4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f002 fce4 	bl	8003f78 <USB_ReadInterrupts>
 80015b0:	4603      	mov	r3, r0
 80015b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015ba:	f040 80b7 	bne.w	800172c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80015cc:	f023 0301 	bic.w	r3, r3, #1
 80015d0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2110      	movs	r1, #16
 80015d8:	4618      	mov	r0, r3
 80015da:	f001 fdb1 	bl	8003140 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015de:	2300      	movs	r3, #0
 80015e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015e2:	e046      	b.n	8001672 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80015e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015e6:	015a      	lsls	r2, r3, #5
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	4413      	add	r3, r2
 80015ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015f0:	461a      	mov	r2, r3
 80015f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80015f6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80015f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015fa:	015a      	lsls	r2, r3, #5
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	4413      	add	r3, r2
 8001600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001608:	0151      	lsls	r1, r2, #5
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	440a      	add	r2, r1
 800160e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001612:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001616:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800161a:	015a      	lsls	r2, r3, #5
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	4413      	add	r3, r2
 8001620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001624:	461a      	mov	r2, r3
 8001626:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800162a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800162c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800162e:	015a      	lsls	r2, r3, #5
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	4413      	add	r3, r2
 8001634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800163c:	0151      	lsls	r1, r2, #5
 800163e:	69fa      	ldr	r2, [r7, #28]
 8001640:	440a      	add	r2, r1
 8001642:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001646:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800164a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800164c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800164e:	015a      	lsls	r2, r3, #5
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	4413      	add	r3, r2
 8001654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800165c:	0151      	lsls	r1, r2, #5
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	440a      	add	r2, r1
 8001662:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001666:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800166a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800166c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800166e:	3301      	adds	r3, #1
 8001670:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	791b      	ldrb	r3, [r3, #4]
 8001676:	461a      	mov	r2, r3
 8001678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800167a:	4293      	cmp	r3, r2
 800167c:	d3b2      	bcc.n	80015e4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	69fa      	ldr	r2, [r7, #28]
 8001688:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800168c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001690:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	7bdb      	ldrb	r3, [r3, #15]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d016      	beq.n	80016c8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80016a4:	69fa      	ldr	r2, [r7, #28]
 80016a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016aa:	f043 030b 	orr.w	r3, r3, #11
 80016ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ba:	69fa      	ldr	r2, [r7, #28]
 80016bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016c0:	f043 030b 	orr.w	r3, r3, #11
 80016c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016c6:	e015      	b.n	80016f4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	69fa      	ldr	r2, [r7, #28]
 80016d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016da:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80016de:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	69fa      	ldr	r2, [r7, #28]
 80016ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016ee:	f043 030b 	orr.w	r3, r3, #11
 80016f2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001702:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001706:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001716:	461a      	mov	r2, r3
 8001718:	f002 fcf2 	bl	8004100 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	695a      	ldr	r2, [r3, #20]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800172a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f002 fc21 	bl	8003f78 <USB_ReadInterrupts>
 8001736:	4603      	mov	r3, r0
 8001738:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800173c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001740:	d123      	bne.n	800178a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f002 fcb7 	bl	80040ba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f001 fd6e 	bl	8003232 <USB_GetDevSpeed>
 8001756:	4603      	mov	r3, r0
 8001758:	461a      	mov	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681c      	ldr	r4, [r3, #0]
 8001762:	f001 fa09 	bl	8002b78 <HAL_RCC_GetHCLKFreq>
 8001766:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800176c:	461a      	mov	r2, r3
 800176e:	4620      	mov	r0, r4
 8001770:	f001 fa72 	bl	8002c58 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f004 fff8 	bl	800676a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	695a      	ldr	r2, [r3, #20]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001788:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f002 fbf2 	bl	8003f78 <USB_ReadInterrupts>
 8001794:	4603      	mov	r3, r0
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b08      	cmp	r3, #8
 800179c:	d10a      	bne.n	80017b4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f004 ffd5 	bl	800674e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f002 0208 	and.w	r2, r2, #8
 80017b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f002 fbdd 	bl	8003f78 <USB_ReadInterrupts>
 80017be:	4603      	mov	r3, r0
 80017c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017c4:	2b80      	cmp	r3, #128	@ 0x80
 80017c6:	d123      	bne.n	8001810 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017d4:	2301      	movs	r3, #1
 80017d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80017d8:	e014      	b.n	8001804 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017de:	4613      	mov	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	4413      	add	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	440b      	add	r3, r1
 80017e8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d105      	bne.n	80017fe <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80017f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	4619      	mov	r1, r3
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 fb0a 	bl	8001e12 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001800:	3301      	adds	r3, #1
 8001802:	627b      	str	r3, [r7, #36]	@ 0x24
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	791b      	ldrb	r3, [r3, #4]
 8001808:	461a      	mov	r2, r3
 800180a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180c:	4293      	cmp	r3, r2
 800180e:	d3e4      	bcc.n	80017da <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f002 fbaf 	bl	8003f78 <USB_ReadInterrupts>
 800181a:	4603      	mov	r3, r0
 800181c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001820:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001824:	d13c      	bne.n	80018a0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001826:	2301      	movs	r3, #1
 8001828:	627b      	str	r3, [r7, #36]	@ 0x24
 800182a:	e02b      	b.n	8001884 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800182c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182e:	015a      	lsls	r2, r3, #5
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	4413      	add	r3, r2
 8001834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001840:	4613      	mov	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	4413      	add	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	3318      	adds	r3, #24
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d115      	bne.n	800187e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001852:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001854:	2b00      	cmp	r3, #0
 8001856:	da12      	bge.n	800187e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800185c:	4613      	mov	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	4413      	add	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	3317      	adds	r3, #23
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186e:	b2db      	uxtb	r3, r3
 8001870:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001874:	b2db      	uxtb	r3, r3
 8001876:	4619      	mov	r1, r3
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 faca 	bl	8001e12 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800187e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001880:	3301      	adds	r3, #1
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	791b      	ldrb	r3, [r3, #4]
 8001888:	461a      	mov	r2, r3
 800188a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188c:	4293      	cmp	r3, r2
 800188e:	d3cd      	bcc.n	800182c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	695a      	ldr	r2, [r3, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800189e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f002 fb67 	bl	8003f78 <USB_ReadInterrupts>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80018b4:	d156      	bne.n	8001964 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018b6:	2301      	movs	r3, #1
 80018b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ba:	e045      	b.n	8001948 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80018bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018be:	015a      	lsls	r2, r3, #5
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	4413      	add	r3, r2
 80018c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018d0:	4613      	mov	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d12e      	bne.n	8001942 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80018e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	da2b      	bge.n	8001942 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	0c1a      	lsrs	r2, r3, #16
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80018f4:	4053      	eors	r3, r2
 80018f6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d121      	bne.n	8001942 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001902:	4613      	mov	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4413      	add	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001910:	2201      	movs	r2, #1
 8001912:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001914:	6a3b      	ldr	r3, [r7, #32]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10a      	bne.n	8001942 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	69fa      	ldr	r2, [r7, #28]
 8001936:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800193a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800193e:	6053      	str	r3, [r2, #4]
            break;
 8001940:	e008      	b.n	8001954 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001944:	3301      	adds	r3, #1
 8001946:	627b      	str	r3, [r7, #36]	@ 0x24
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	791b      	ldrb	r3, [r3, #4]
 800194c:	461a      	mov	r2, r3
 800194e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001950:	4293      	cmp	r3, r2
 8001952:	d3b3      	bcc.n	80018bc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	695a      	ldr	r2, [r3, #20]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001962:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f002 fb05 	bl	8003f78 <USB_ReadInterrupts>
 800196e:	4603      	mov	r3, r0
 8001970:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001978:	d10a      	bne.n	8001990 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f004 ff6c 	bl	8006858 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800198e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f002 faef 	bl	8003f78 <USB_ReadInterrupts>
 800199a:	4603      	mov	r3, r0
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d115      	bne.n	80019d0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f004 ff5c 	bl	8006874 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6859      	ldr	r1, [r3, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	e000      	b.n	80019d0 <HAL_PCD_IRQHandler+0x93c>
      return;
 80019ce:	bf00      	nop
    }
  }
}
 80019d0:	3734      	adds	r7, #52	@ 0x34
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd90      	pop	{r4, r7, pc}

080019d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	460b      	mov	r3, r1
 80019e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <HAL_PCD_SetAddress+0x1a>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e012      	b.n	8001a16 <HAL_PCD_SetAddress+0x40>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	78fa      	ldrb	r2, [r7, #3]
 80019fc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	78fa      	ldrb	r2, [r7, #3]
 8001a04:	4611      	mov	r1, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 fa4e 	bl	8003ea8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b084      	sub	sp, #16
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	4608      	mov	r0, r1
 8001a28:	4611      	mov	r1, r2
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	70fb      	strb	r3, [r7, #3]
 8001a30:	460b      	mov	r3, r1
 8001a32:	803b      	strh	r3, [r7, #0]
 8001a34:	4613      	mov	r3, r2
 8001a36:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	da0f      	bge.n	8001a64 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	f003 020f 	and.w	r2, r3, #15
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4413      	add	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	3310      	adds	r3, #16
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	4413      	add	r3, r2
 8001a58:	3304      	adds	r3, #4
 8001a5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	705a      	strb	r2, [r3, #1]
 8001a62:	e00f      	b.n	8001a84 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	f003 020f 	and.w	r2, r3, #15
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	4413      	add	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a84:	78fb      	ldrb	r3, [r7, #3]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001a90:	883b      	ldrh	r3, [r7, #0]
 8001a92:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	78ba      	ldrb	r2, [r7, #2]
 8001a9e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	785b      	ldrb	r3, [r3, #1]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d004      	beq.n	8001ab2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ab2:	78bb      	ldrb	r3, [r7, #2]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d102      	bne.n	8001abe <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <HAL_PCD_EP_Open+0xae>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e00e      	b.n	8001aea <HAL_PCD_EP_Open+0xcc>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68f9      	ldr	r1, [r7, #12]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f001 fbce 	bl	800327c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001ae8:	7afb      	ldrb	r3, [r7, #11]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b084      	sub	sp, #16
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	460b      	mov	r3, r1
 8001afc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001afe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	da0f      	bge.n	8001b26 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b06:	78fb      	ldrb	r3, [r7, #3]
 8001b08:	f003 020f 	and.w	r2, r3, #15
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	4413      	add	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	3310      	adds	r3, #16
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2201      	movs	r2, #1
 8001b22:	705a      	strb	r2, [r3, #1]
 8001b24:	e00f      	b.n	8001b46 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	f003 020f 	and.w	r2, r3, #15
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	f003 030f 	and.w	r3, r3, #15
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d101      	bne.n	8001b60 <HAL_PCD_EP_Close+0x6e>
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	e00e      	b.n	8001b7e <HAL_PCD_EP_Close+0x8c>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68f9      	ldr	r1, [r7, #12]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f001 fc0c 	bl	800338c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	607a      	str	r2, [r7, #4]
 8001b90:	603b      	str	r3, [r7, #0]
 8001b92:	460b      	mov	r3, r1
 8001b94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b96:	7afb      	ldrb	r3, [r7, #11]
 8001b98:	f003 020f 	and.w	r2, r3, #15
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4413      	add	r3, r2
 8001bac:	3304      	adds	r3, #4
 8001bae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bc8:	7afb      	ldrb	r3, [r7, #11]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	799b      	ldrb	r3, [r3, #6]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d102      	bne.n	8001be2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	799b      	ldrb	r3, [r3, #6]
 8001bea:	461a      	mov	r2, r3
 8001bec:	6979      	ldr	r1, [r7, #20]
 8001bee:	f001 fca9 	bl	8003544 <USB_EPStartXfer>

  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c08:	78fb      	ldrb	r3, [r7, #3]
 8001c0a:	f003 020f 	and.w	r2, r3, #15
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	4413      	add	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c3c:	7afb      	ldrb	r3, [r7, #11]
 8001c3e:	f003 020f 	and.w	r2, r3, #15
 8001c42:	4613      	mov	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4413      	add	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	3310      	adds	r3, #16
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4413      	add	r3, r2
 8001c50:	3304      	adds	r3, #4
 8001c52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2200      	movs	r2, #0
 8001c64:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c6c:	7afb      	ldrb	r3, [r7, #11]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	799b      	ldrb	r3, [r3, #6]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d102      	bne.n	8001c86 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	799b      	ldrb	r3, [r3, #6]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	6979      	ldr	r1, [r7, #20]
 8001c92:	f001 fc57 	bl	8003544 <USB_EPStartXfer>

  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	7912      	ldrb	r2, [r2, #4]
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e04f      	b.n	8001d5e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	da0f      	bge.n	8001ce6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	f003 020f 	and.w	r2, r3, #15
 8001ccc:	4613      	mov	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	3310      	adds	r3, #16
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	3304      	adds	r3, #4
 8001cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	705a      	strb	r2, [r3, #1]
 8001ce4:	e00d      	b.n	8001d02 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ce6:	78fa      	ldrb	r2, [r7, #3]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2201      	movs	r2, #1
 8001d06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_PCD_EP_SetStall+0x82>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e01d      	b.n	8001d5e <HAL_PCD_EP_SetStall+0xbe>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68f9      	ldr	r1, [r7, #12]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f001 ffe5 	bl	8003d00 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	f003 030f 	and.w	r3, r3, #15
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d109      	bne.n	8001d54 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	7999      	ldrb	r1, [r3, #6]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001d4e:	461a      	mov	r2, r3
 8001d50:	f002 f9d6 	bl	8004100 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b084      	sub	sp, #16
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	f003 030f 	and.w	r3, r3, #15
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	7912      	ldrb	r2, [r2, #4]
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d901      	bls.n	8001d84 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e042      	b.n	8001e0a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	da0f      	bge.n	8001dac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	f003 020f 	and.w	r2, r3, #15
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	3310      	adds	r3, #16
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	4413      	add	r3, r2
 8001da0:	3304      	adds	r3, #4
 8001da2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2201      	movs	r2, #1
 8001da8:	705a      	strb	r2, [r3, #1]
 8001daa:	e00f      	b.n	8001dcc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	f003 020f 	and.w	r2, r3, #15
 8001db2:	4613      	mov	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4413      	add	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dd2:	78fb      	ldrb	r3, [r7, #3]
 8001dd4:	f003 030f 	and.w	r3, r3, #15
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_PCD_EP_ClrStall+0x86>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e00e      	b.n	8001e0a <HAL_PCD_EP_ClrStall+0xa4>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68f9      	ldr	r1, [r7, #12]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f001 ffee 	bl	8003ddc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b084      	sub	sp, #16
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001e1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	da0c      	bge.n	8001e40 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	f003 020f 	and.w	r2, r3, #15
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4413      	add	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	3310      	adds	r3, #16
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	e00c      	b.n	8001e5a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	f003 020f 	and.w	r2, r3, #15
 8001e46:	4613      	mov	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	3304      	adds	r3, #4
 8001e58:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68f9      	ldr	r1, [r7, #12]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f001 fe0d 	bl	8003a80 <USB_EPStopXfer>
 8001e66:	4603      	mov	r3, r0
 8001e68:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001e6a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	@ 0x28
 8001e78:	af02      	add	r7, sp, #8
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	3310      	adds	r3, #16
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	4413      	add	r3, r2
 8001e98:	3304      	adds	r3, #4
 8001e9a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	695a      	ldr	r2, [r3, #20]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d901      	bls.n	8001eac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e06b      	b.n	8001f84 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	69fa      	ldr	r2, [r7, #28]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d902      	bls.n	8001ec8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	3303      	adds	r3, #3
 8001ecc:	089b      	lsrs	r3, r3, #2
 8001ece:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ed0:	e02a      	b.n	8001f28 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	691a      	ldr	r2, [r3, #16]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	69fa      	ldr	r2, [r7, #28]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d902      	bls.n	8001eee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3303      	adds	r3, #3
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	68d9      	ldr	r1, [r3, #12]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	4603      	mov	r3, r0
 8001f0a:	6978      	ldr	r0, [r7, #20]
 8001f0c:	f001 fe62 	bl	8003bd4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	441a      	add	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	695a      	ldr	r2, [r3, #20]
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	441a      	add	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	015a      	lsls	r2, r3, #5
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d809      	bhi.n	8001f52 <PCD_WriteEmptyTxFifo+0xde>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d203      	bcs.n	8001f52 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1bf      	bne.n	8001ed2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	691a      	ldr	r2, [r3, #16]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d811      	bhi.n	8001f82 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	f003 030f 	and.w	r3, r3, #15
 8001f64:	2201      	movs	r2, #1
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	43db      	mvns	r3, r3
 8001f78:	6939      	ldr	r1, [r7, #16]
 8001f7a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001f7e:	4013      	ands	r3, r2
 8001f80:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3720      	adds	r7, #32
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	333c      	adds	r3, #60	@ 0x3c
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	015a      	lsls	r2, r3, #5
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	799b      	ldrb	r3, [r3, #6]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d17b      	bne.n	80020ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	f003 0308 	and.w	r3, r3, #8
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d015      	beq.n	8001ff8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	4a61      	ldr	r2, [pc, #388]	@ (8002154 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	f240 80b9 	bls.w	8002148 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 80b3 	beq.w	8002148 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fee:	461a      	mov	r2, r3
 8001ff0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ff4:	6093      	str	r3, [r2, #8]
 8001ff6:	e0a7      	b.n	8002148 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	f003 0320 	and.w	r3, r3, #32
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	015a      	lsls	r2, r3, #5
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	4413      	add	r3, r2
 800200a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800200e:	461a      	mov	r2, r3
 8002010:	2320      	movs	r3, #32
 8002012:	6093      	str	r3, [r2, #8]
 8002014:	e098      	b.n	8002148 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800201c:	2b00      	cmp	r3, #0
 800201e:	f040 8093 	bne.w	8002148 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	4a4b      	ldr	r2, [pc, #300]	@ (8002154 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d90f      	bls.n	800204a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00a      	beq.n	800204a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	015a      	lsls	r2, r3, #5
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	4413      	add	r3, r2
 800203c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002040:	461a      	mov	r2, r3
 8002042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002046:	6093      	str	r3, [r2, #8]
 8002048:	e07e      	b.n	8002148 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	4413      	add	r3, r2
 800205c:	3304      	adds	r3, #4
 800205e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a1a      	ldr	r2, [r3, #32]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	0159      	lsls	r1, r3, #5
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	440b      	add	r3, r1
 800206c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002076:	1ad2      	subs	r2, r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d114      	bne.n	80020ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d109      	bne.n	800209e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002094:	461a      	mov	r2, r3
 8002096:	2101      	movs	r1, #1
 8002098:	f002 f832 	bl	8004100 <USB_EP0_OutStart>
 800209c:	e006      	b.n	80020ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	441a      	add	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	4619      	mov	r1, r3
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f004 fb16 	bl	80066e4 <HAL_PCD_DataOutStageCallback>
 80020b8:	e046      	b.n	8002148 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	4a26      	ldr	r2, [pc, #152]	@ (8002158 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d124      	bne.n	800210c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00a      	beq.n	80020e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	015a      	lsls	r2, r3, #5
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	4413      	add	r3, r2
 80020d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020d8:	461a      	mov	r2, r3
 80020da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020de:	6093      	str	r3, [r2, #8]
 80020e0:	e032      	b.n	8002148 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020f8:	461a      	mov	r2, r3
 80020fa:	2320      	movs	r3, #32
 80020fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	4619      	mov	r1, r3
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f004 faed 	bl	80066e4 <HAL_PCD_DataOutStageCallback>
 800210a:	e01d      	b.n	8002148 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d114      	bne.n	800213c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	4613      	mov	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d108      	bne.n	800213c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002134:	461a      	mov	r2, r3
 8002136:	2100      	movs	r1, #0
 8002138:	f001 ffe2 	bl	8004100 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	4619      	mov	r1, r3
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f004 face 	bl	80066e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3720      	adds	r7, #32
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	4f54300a 	.word	0x4f54300a
 8002158:	4f54310a 	.word	0x4f54310a

0800215c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	333c      	adds	r3, #60	@ 0x3c
 8002174:	3304      	adds	r3, #4
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4413      	add	r3, r2
 8002182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4a15      	ldr	r2, [pc, #84]	@ (80021e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d90e      	bls.n	80021b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002198:	2b00      	cmp	r3, #0
 800219a:	d009      	beq.n	80021b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	015a      	lsls	r2, r3, #5
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4413      	add	r3, r2
 80021a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021a8:	461a      	mov	r2, r3
 80021aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f004 fa85 	bl	80066c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4a0a      	ldr	r2, [pc, #40]	@ (80021e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d90c      	bls.n	80021d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	799b      	ldrb	r3, [r3, #6]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d108      	bne.n	80021d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80021d0:	461a      	mov	r2, r3
 80021d2:	2101      	movs	r1, #1
 80021d4:	f001 ff94 	bl	8004100 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	4f54300a 	.word	0x4f54300a

080021e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	70fb      	strb	r3, [r7, #3]
 80021f4:	4613      	mov	r3, r2
 80021f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002200:	78fb      	ldrb	r3, [r7, #3]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d107      	bne.n	8002216 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002206:	883b      	ldrh	r3, [r7, #0]
 8002208:	0419      	lsls	r1, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	430a      	orrs	r2, r1
 8002212:	629a      	str	r2, [r3, #40]	@ 0x28
 8002214:	e028      	b.n	8002268 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221c:	0c1b      	lsrs	r3, r3, #16
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	4413      	add	r3, r2
 8002222:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002224:	2300      	movs	r3, #0
 8002226:	73fb      	strb	r3, [r7, #15]
 8002228:	e00d      	b.n	8002246 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	3340      	adds	r3, #64	@ 0x40
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	0c1b      	lsrs	r3, r3, #16
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	4413      	add	r3, r2
 800223e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	3301      	adds	r3, #1
 8002244:	73fb      	strb	r3, [r7, #15]
 8002246:	7bfa      	ldrb	r2, [r7, #15]
 8002248:	78fb      	ldrb	r3, [r7, #3]
 800224a:	3b01      	subs	r3, #1
 800224c:	429a      	cmp	r2, r3
 800224e:	d3ec      	bcc.n	800222a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002250:	883b      	ldrh	r3, [r7, #0]
 8002252:	0418      	lsls	r0, r3, #16
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6819      	ldr	r1, [r3, #0]
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	3b01      	subs	r3, #1
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	4302      	orrs	r2, r0
 8002260:	3340      	adds	r3, #64	@ 0x40
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	460b      	mov	r3, r1
 8002280:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	887a      	ldrh	r2, [r7, #2]
 8002288:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e267      	b.n	8002792 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d075      	beq.n	80023ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80022ce:	4b88      	ldr	r3, [pc, #544]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d00c      	beq.n	80022f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022da:	4b85      	ldr	r3, [pc, #532]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d112      	bne.n	800230c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022e6:	4b82      	ldr	r3, [pc, #520]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022f2:	d10b      	bne.n	800230c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f4:	4b7e      	ldr	r3, [pc, #504]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d05b      	beq.n	80023b8 <HAL_RCC_OscConfig+0x108>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d157      	bne.n	80023b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e242      	b.n	8002792 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002314:	d106      	bne.n	8002324 <HAL_RCC_OscConfig+0x74>
 8002316:	4b76      	ldr	r3, [pc, #472]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a75      	ldr	r2, [pc, #468]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 800231c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	e01d      	b.n	8002360 <HAL_RCC_OscConfig+0xb0>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800232c:	d10c      	bne.n	8002348 <HAL_RCC_OscConfig+0x98>
 800232e:	4b70      	ldr	r3, [pc, #448]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a6f      	ldr	r2, [pc, #444]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 8002334:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	4b6d      	ldr	r3, [pc, #436]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a6c      	ldr	r2, [pc, #432]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 8002340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	e00b      	b.n	8002360 <HAL_RCC_OscConfig+0xb0>
 8002348:	4b69      	ldr	r3, [pc, #420]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a68      	ldr	r2, [pc, #416]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 800234e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	4b66      	ldr	r3, [pc, #408]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a65      	ldr	r2, [pc, #404]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 800235a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800235e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d013      	beq.n	8002390 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7fe fa8a 	bl	8000880 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002370:	f7fe fa86 	bl	8000880 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	@ 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e207      	b.n	8002792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002382:	4b5b      	ldr	r3, [pc, #364]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0xc0>
 800238e:	e014      	b.n	80023ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7fe fa76 	bl	8000880 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002398:	f7fe fa72 	bl	8000880 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	@ 0x64
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e1f3      	b.n	8002792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023aa:	4b51      	ldr	r3, [pc, #324]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0xe8>
 80023b6:	e000      	b.n	80023ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d063      	beq.n	800248e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023c6:	4b4a      	ldr	r3, [pc, #296]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00b      	beq.n	80023ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023d2:	4b47      	ldr	r3, [pc, #284]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d11c      	bne.n	8002418 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023de:	4b44      	ldr	r3, [pc, #272]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d116      	bne.n	8002418 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ea:	4b41      	ldr	r3, [pc, #260]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <HAL_RCC_OscConfig+0x152>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d001      	beq.n	8002402 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e1c7      	b.n	8002792 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002402:	4b3b      	ldr	r3, [pc, #236]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4937      	ldr	r1, [pc, #220]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002416:	e03a      	b.n	800248e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d020      	beq.n	8002462 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002420:	4b34      	ldr	r3, [pc, #208]	@ (80024f4 <HAL_RCC_OscConfig+0x244>)
 8002422:	2201      	movs	r2, #1
 8002424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002426:	f7fe fa2b 	bl	8000880 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800242e:	f7fe fa27 	bl	8000880 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e1a8      	b.n	8002792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002440:	4b2b      	ldr	r3, [pc, #172]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244c:	4b28      	ldr	r3, [pc, #160]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4925      	ldr	r1, [pc, #148]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 800245c:	4313      	orrs	r3, r2
 800245e:	600b      	str	r3, [r1, #0]
 8002460:	e015      	b.n	800248e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002462:	4b24      	ldr	r3, [pc, #144]	@ (80024f4 <HAL_RCC_OscConfig+0x244>)
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7fe fa0a 	bl	8000880 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002470:	f7fe fa06 	bl	8000880 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e187      	b.n	8002792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002482:	4b1b      	ldr	r3, [pc, #108]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d036      	beq.n	8002508 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d016      	beq.n	80024d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024a2:	4b15      	ldr	r3, [pc, #84]	@ (80024f8 <HAL_RCC_OscConfig+0x248>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a8:	f7fe f9ea 	bl	8000880 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b0:	f7fe f9e6 	bl	8000880 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e167      	b.n	8002792 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c2:	4b0b      	ldr	r3, [pc, #44]	@ (80024f0 <HAL_RCC_OscConfig+0x240>)
 80024c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0x200>
 80024ce:	e01b      	b.n	8002508 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d0:	4b09      	ldr	r3, [pc, #36]	@ (80024f8 <HAL_RCC_OscConfig+0x248>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d6:	f7fe f9d3 	bl	8000880 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024dc:	e00e      	b.n	80024fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024de:	f7fe f9cf 	bl	8000880 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d907      	bls.n	80024fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e150      	b.n	8002792 <HAL_RCC_OscConfig+0x4e2>
 80024f0:	40023800 	.word	0x40023800
 80024f4:	42470000 	.word	0x42470000
 80024f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024fc:	4b88      	ldr	r3, [pc, #544]	@ (8002720 <HAL_RCC_OscConfig+0x470>)
 80024fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1ea      	bne.n	80024de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 8097 	beq.w	8002644 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002516:	2300      	movs	r3, #0
 8002518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800251a:	4b81      	ldr	r3, [pc, #516]	@ (8002720 <HAL_RCC_OscConfig+0x470>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10f      	bne.n	8002546 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	4b7d      	ldr	r3, [pc, #500]	@ (8002720 <HAL_RCC_OscConfig+0x470>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252e:	4a7c      	ldr	r2, [pc, #496]	@ (8002720 <HAL_RCC_OscConfig+0x470>)
 8002530:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002534:	6413      	str	r3, [r2, #64]	@ 0x40
 8002536:	4b7a      	ldr	r3, [pc, #488]	@ (8002720 <HAL_RCC_OscConfig+0x470>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002542:	2301      	movs	r3, #1
 8002544:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002546:	4b77      	ldr	r3, [pc, #476]	@ (8002724 <HAL_RCC_OscConfig+0x474>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254e:	2b00      	cmp	r3, #0
 8002550:	d118      	bne.n	8002584 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002552:	4b74      	ldr	r3, [pc, #464]	@ (8002724 <HAL_RCC_OscConfig+0x474>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a73      	ldr	r2, [pc, #460]	@ (8002724 <HAL_RCC_OscConfig+0x474>)
 8002558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800255c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800255e:	f7fe f98f 	bl	8000880 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002566:	f7fe f98b 	bl	8000880 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e10c      	b.n	8002792 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002578:	4b6a      	ldr	r3, [pc, #424]	@ (8002724 <HAL_RCC_OscConfig+0x474>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d106      	bne.n	800259a <HAL_RCC_OscConfig+0x2ea>
 800258c:	4b64      	ldr	r3, [pc, #400]	@ (8002720 <HAL_RCC_OscConfig+0x470>)
 800258e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002590:	4a63      	ldr	r2, [pc, #396]	@ (8002720 <HAL_RCC_OscConfig+0x470>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6713      	str	r3, [r2, #112]	@ 0x70
 8002598:	e01c      	b.n	80025d4 <HAL_RCC_OscConfig+0x324>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b05      	cmp	r3, #5
 80025a0:	d10c      	bne.n	80025bc <HAL_RCC_OscConfig+0x30c>
 80025a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002720 <HAL_RCC_OscConfig+0x470>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a6:	4a5e      	ldr	r2, [pc, #376]	@ (8002720 <HAL_RCC_OscConfig+0x470>)
 80025a8:	f043 0304 	orr.w	r3, r3, #4
 80025ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002720 <HAL_RCC_OscConfig+0x470>)
 80025b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b2:	4a5b      	ldr	r2, [pc, #364]	@ (8002720 <HAL_RCC_OscConfig+0x470>)
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ba:	e00b      	b.n	80025d4 <HAL_RCC_OscConfig+0x324>
 80025bc:	4b58      	ldr	r3, [pc, #352]	@ (8002720 <HAL_RCC_OscConfig+0x470>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c0:	4a57      	ldr	r2, [pc, #348]	@ (8002720 <HAL_RCC_OscConfig+0x470>)
 80025c2:	f023 0301 	bic.w	r3, r3, #1
 80025c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80025c8:	4b55      	ldr	r3, [pc, #340]	@ (8002720 <HAL_RCC_OscConfig+0x470>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025cc:	4a54      	ldr	r2, [pc, #336]	@ (8002720 <HAL_RCC_OscConfig+0x470>)
 80025ce:	f023 0304 	bic.w	r3, r3, #4
 80025d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d015      	beq.n	8002608 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025dc:	f7fe f950 	bl	8000880 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e2:	e00a      	b.n	80025fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e4:	f7fe f94c 	bl	8000880 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e0cb      	b.n	8002792 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fa:	4b49      	ldr	r3, [pc, #292]	@ (8002720 <HAL_RCC_OscConfig+0x470>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0ee      	beq.n	80025e4 <HAL_RCC_OscConfig+0x334>
 8002606:	e014      	b.n	8002632 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002608:	f7fe f93a 	bl	8000880 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260e:	e00a      	b.n	8002626 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002610:	f7fe f936 	bl	8000880 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e0b5      	b.n	8002792 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002626:	4b3e      	ldr	r3, [pc, #248]	@ (8002720 <HAL_RCC_OscConfig+0x470>)
 8002628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1ee      	bne.n	8002610 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002632:	7dfb      	ldrb	r3, [r7, #23]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d105      	bne.n	8002644 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002638:	4b39      	ldr	r3, [pc, #228]	@ (8002720 <HAL_RCC_OscConfig+0x470>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263c:	4a38      	ldr	r2, [pc, #224]	@ (8002720 <HAL_RCC_OscConfig+0x470>)
 800263e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002642:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80a1 	beq.w	8002790 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800264e:	4b34      	ldr	r3, [pc, #208]	@ (8002720 <HAL_RCC_OscConfig+0x470>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	2b08      	cmp	r3, #8
 8002658:	d05c      	beq.n	8002714 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d141      	bne.n	80026e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002662:	4b31      	ldr	r3, [pc, #196]	@ (8002728 <HAL_RCC_OscConfig+0x478>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7fe f90a 	bl	8000880 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002670:	f7fe f906 	bl	8000880 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e087      	b.n	8002792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002682:	4b27      	ldr	r3, [pc, #156]	@ (8002720 <HAL_RCC_OscConfig+0x470>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69da      	ldr	r2, [r3, #28]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269c:	019b      	lsls	r3, r3, #6
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a4:	085b      	lsrs	r3, r3, #1
 80026a6:	3b01      	subs	r3, #1
 80026a8:	041b      	lsls	r3, r3, #16
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b0:	061b      	lsls	r3, r3, #24
 80026b2:	491b      	ldr	r1, [pc, #108]	@ (8002720 <HAL_RCC_OscConfig+0x470>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002728 <HAL_RCC_OscConfig+0x478>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026be:	f7fe f8df 	bl	8000880 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c6:	f7fe f8db 	bl	8000880 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e05c      	b.n	8002792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d8:	4b11      	ldr	r3, [pc, #68]	@ (8002720 <HAL_RCC_OscConfig+0x470>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCC_OscConfig+0x416>
 80026e4:	e054      	b.n	8002790 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e6:	4b10      	ldr	r3, [pc, #64]	@ (8002728 <HAL_RCC_OscConfig+0x478>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7fe f8c8 	bl	8000880 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f4:	f7fe f8c4 	bl	8000880 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e045      	b.n	8002792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002706:	4b06      	ldr	r3, [pc, #24]	@ (8002720 <HAL_RCC_OscConfig+0x470>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_OscConfig+0x444>
 8002712:	e03d      	b.n	8002790 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d107      	bne.n	800272c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e038      	b.n	8002792 <HAL_RCC_OscConfig+0x4e2>
 8002720:	40023800 	.word	0x40023800
 8002724:	40007000 	.word	0x40007000
 8002728:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800272c:	4b1b      	ldr	r3, [pc, #108]	@ (800279c <HAL_RCC_OscConfig+0x4ec>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d028      	beq.n	800278c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002744:	429a      	cmp	r2, r3
 8002746:	d121      	bne.n	800278c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002752:	429a      	cmp	r2, r3
 8002754:	d11a      	bne.n	800278c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800275c:	4013      	ands	r3, r2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002762:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002764:	4293      	cmp	r3, r2
 8002766:	d111      	bne.n	800278c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002772:	085b      	lsrs	r3, r3, #1
 8002774:	3b01      	subs	r3, #1
 8002776:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002778:	429a      	cmp	r2, r3
 800277a:	d107      	bne.n	800278c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002786:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002788:	429a      	cmp	r2, r3
 800278a:	d001      	beq.n	8002790 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800

080027a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0cc      	b.n	800294e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027b4:	4b68      	ldr	r3, [pc, #416]	@ (8002958 <HAL_RCC_ClockConfig+0x1b8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d90c      	bls.n	80027dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c2:	4b65      	ldr	r3, [pc, #404]	@ (8002958 <HAL_RCC_ClockConfig+0x1b8>)
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ca:	4b63      	ldr	r3, [pc, #396]	@ (8002958 <HAL_RCC_ClockConfig+0x1b8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d001      	beq.n	80027dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0b8      	b.n	800294e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d020      	beq.n	800282a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027f4:	4b59      	ldr	r3, [pc, #356]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	4a58      	ldr	r2, [pc, #352]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0308 	and.w	r3, r3, #8
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800280c:	4b53      	ldr	r3, [pc, #332]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	4a52      	ldr	r2, [pc, #328]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002816:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002818:	4b50      	ldr	r3, [pc, #320]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	494d      	ldr	r1, [pc, #308]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	4313      	orrs	r3, r2
 8002828:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d044      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d107      	bne.n	800284e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283e:	4b47      	ldr	r3, [pc, #284]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d119      	bne.n	800287e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e07f      	b.n	800294e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d003      	beq.n	800285e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800285a:	2b03      	cmp	r3, #3
 800285c:	d107      	bne.n	800286e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285e:	4b3f      	ldr	r3, [pc, #252]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d109      	bne.n	800287e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e06f      	b.n	800294e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286e:	4b3b      	ldr	r3, [pc, #236]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e067      	b.n	800294e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800287e:	4b37      	ldr	r3, [pc, #220]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f023 0203 	bic.w	r2, r3, #3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	4934      	ldr	r1, [pc, #208]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	4313      	orrs	r3, r2
 800288e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002890:	f7fd fff6 	bl	8000880 <HAL_GetTick>
 8002894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002896:	e00a      	b.n	80028ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002898:	f7fd fff2 	bl	8000880 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e04f      	b.n	800294e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ae:	4b2b      	ldr	r3, [pc, #172]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 020c 	and.w	r2, r3, #12
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	429a      	cmp	r2, r3
 80028be:	d1eb      	bne.n	8002898 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028c0:	4b25      	ldr	r3, [pc, #148]	@ (8002958 <HAL_RCC_ClockConfig+0x1b8>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d20c      	bcs.n	80028e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ce:	4b22      	ldr	r3, [pc, #136]	@ (8002958 <HAL_RCC_ClockConfig+0x1b8>)
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d6:	4b20      	ldr	r3, [pc, #128]	@ (8002958 <HAL_RCC_ClockConfig+0x1b8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e032      	b.n	800294e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d008      	beq.n	8002906 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f4:	4b19      	ldr	r3, [pc, #100]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4916      	ldr	r1, [pc, #88]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	4313      	orrs	r3, r2
 8002904:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d009      	beq.n	8002926 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002912:	4b12      	ldr	r3, [pc, #72]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	490e      	ldr	r1, [pc, #56]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	4313      	orrs	r3, r2
 8002924:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002926:	f000 f821 	bl	800296c <HAL_RCC_GetSysClockFreq>
 800292a:	4602      	mov	r2, r0
 800292c:	4b0b      	ldr	r3, [pc, #44]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	490a      	ldr	r1, [pc, #40]	@ (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	5ccb      	ldrb	r3, [r1, r3]
 800293a:	fa22 f303 	lsr.w	r3, r2, r3
 800293e:	4a09      	ldr	r2, [pc, #36]	@ (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002942:	4b09      	ldr	r3, [pc, #36]	@ (8002968 <HAL_RCC_ClockConfig+0x1c8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7fd ff56 	bl	80007f8 <HAL_InitTick>

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40023c00 	.word	0x40023c00
 800295c:	40023800 	.word	0x40023800
 8002960:	08006ce4 	.word	0x08006ce4
 8002964:	20000034 	.word	0x20000034
 8002968:	20000038 	.word	0x20000038

0800296c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800296c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002970:	b094      	sub	sp, #80	@ 0x50
 8002972:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002984:	4b79      	ldr	r3, [pc, #484]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 030c 	and.w	r3, r3, #12
 800298c:	2b08      	cmp	r3, #8
 800298e:	d00d      	beq.n	80029ac <HAL_RCC_GetSysClockFreq+0x40>
 8002990:	2b08      	cmp	r3, #8
 8002992:	f200 80e1 	bhi.w	8002b58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <HAL_RCC_GetSysClockFreq+0x34>
 800299a:	2b04      	cmp	r3, #4
 800299c:	d003      	beq.n	80029a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800299e:	e0db      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029a0:	4b73      	ldr	r3, [pc, #460]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x204>)
 80029a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029a4:	e0db      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029a6:	4b73      	ldr	r3, [pc, #460]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x208>)
 80029a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029aa:	e0d8      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029ac:	4b6f      	ldr	r3, [pc, #444]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x200>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029b6:	4b6d      	ldr	r3, [pc, #436]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x200>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d063      	beq.n	8002a8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c2:	4b6a      	ldr	r3, [pc, #424]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x200>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	099b      	lsrs	r3, r3, #6
 80029c8:	2200      	movs	r2, #0
 80029ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80029ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80029d6:	2300      	movs	r3, #0
 80029d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80029da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80029de:	4622      	mov	r2, r4
 80029e0:	462b      	mov	r3, r5
 80029e2:	f04f 0000 	mov.w	r0, #0
 80029e6:	f04f 0100 	mov.w	r1, #0
 80029ea:	0159      	lsls	r1, r3, #5
 80029ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029f0:	0150      	lsls	r0, r2, #5
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4621      	mov	r1, r4
 80029f8:	1a51      	subs	r1, r2, r1
 80029fa:	6139      	str	r1, [r7, #16]
 80029fc:	4629      	mov	r1, r5
 80029fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a10:	4659      	mov	r1, fp
 8002a12:	018b      	lsls	r3, r1, #6
 8002a14:	4651      	mov	r1, sl
 8002a16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a1a:	4651      	mov	r1, sl
 8002a1c:	018a      	lsls	r2, r1, #6
 8002a1e:	4651      	mov	r1, sl
 8002a20:	ebb2 0801 	subs.w	r8, r2, r1
 8002a24:	4659      	mov	r1, fp
 8002a26:	eb63 0901 	sbc.w	r9, r3, r1
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a3e:	4690      	mov	r8, r2
 8002a40:	4699      	mov	r9, r3
 8002a42:	4623      	mov	r3, r4
 8002a44:	eb18 0303 	adds.w	r3, r8, r3
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	462b      	mov	r3, r5
 8002a4c:	eb49 0303 	adc.w	r3, r9, r3
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a5e:	4629      	mov	r1, r5
 8002a60:	024b      	lsls	r3, r1, #9
 8002a62:	4621      	mov	r1, r4
 8002a64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a68:	4621      	mov	r1, r4
 8002a6a:	024a      	lsls	r2, r1, #9
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	4619      	mov	r1, r3
 8002a70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a72:	2200      	movs	r2, #0
 8002a74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a7c:	f7fd fbb4 	bl	80001e8 <__aeabi_uldivmod>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4613      	mov	r3, r2
 8002a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a88:	e058      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a8a:	4b38      	ldr	r3, [pc, #224]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	099b      	lsrs	r3, r3, #6
 8002a90:	2200      	movs	r2, #0
 8002a92:	4618      	mov	r0, r3
 8002a94:	4611      	mov	r1, r2
 8002a96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a9a:	623b      	str	r3, [r7, #32]
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aa0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002aa4:	4642      	mov	r2, r8
 8002aa6:	464b      	mov	r3, r9
 8002aa8:	f04f 0000 	mov.w	r0, #0
 8002aac:	f04f 0100 	mov.w	r1, #0
 8002ab0:	0159      	lsls	r1, r3, #5
 8002ab2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ab6:	0150      	lsls	r0, r2, #5
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ac2:	4649      	mov	r1, r9
 8002ac4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ad4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ad8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002adc:	ebb2 040a 	subs.w	r4, r2, sl
 8002ae0:	eb63 050b 	sbc.w	r5, r3, fp
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	f04f 0300 	mov.w	r3, #0
 8002aec:	00eb      	lsls	r3, r5, #3
 8002aee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002af2:	00e2      	lsls	r2, r4, #3
 8002af4:	4614      	mov	r4, r2
 8002af6:	461d      	mov	r5, r3
 8002af8:	4643      	mov	r3, r8
 8002afa:	18e3      	adds	r3, r4, r3
 8002afc:	603b      	str	r3, [r7, #0]
 8002afe:	464b      	mov	r3, r9
 8002b00:	eb45 0303 	adc.w	r3, r5, r3
 8002b04:	607b      	str	r3, [r7, #4]
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b12:	4629      	mov	r1, r5
 8002b14:	028b      	lsls	r3, r1, #10
 8002b16:	4621      	mov	r1, r4
 8002b18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b1c:	4621      	mov	r1, r4
 8002b1e:	028a      	lsls	r2, r1, #10
 8002b20:	4610      	mov	r0, r2
 8002b22:	4619      	mov	r1, r3
 8002b24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b26:	2200      	movs	r2, #0
 8002b28:	61bb      	str	r3, [r7, #24]
 8002b2a:	61fa      	str	r2, [r7, #28]
 8002b2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b30:	f7fd fb5a 	bl	80001e8 <__aeabi_uldivmod>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4613      	mov	r3, r2
 8002b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	0c1b      	lsrs	r3, r3, #16
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	3301      	adds	r3, #1
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002b4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b56:	e002      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b58:	4b05      	ldr	r3, [pc, #20]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3750      	adds	r7, #80	@ 0x50
 8002b64:	46bd      	mov	sp, r7
 8002b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	00f42400 	.word	0x00f42400
 8002b74:	007a1200 	.word	0x007a1200

08002b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b7c:	4b03      	ldr	r3, [pc, #12]	@ (8002b8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	20000034 	.word	0x20000034

08002b90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b90:	b084      	sub	sp, #16
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	f107 001c 	add.w	r0, r7, #28
 8002b9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ba2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d123      	bne.n	8002bf2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002bbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002bd2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d105      	bne.n	8002be6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f001 fae8 	bl	80041bc <USB_CoreReset>
 8002bec:	4603      	mov	r3, r0
 8002bee:	73fb      	strb	r3, [r7, #15]
 8002bf0:	e01b      	b.n	8002c2a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f001 fadc 	bl	80041bc <USB_CoreReset>
 8002c04:	4603      	mov	r3, r0
 8002c06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002c08:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d106      	bne.n	8002c1e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c14:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c1c:	e005      	b.n	8002c2a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c22:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002c2a:	7fbb      	ldrb	r3, [r7, #30]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d10b      	bne.n	8002c48 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f043 0206 	orr.w	r2, r3, #6
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f043 0220 	orr.w	r2, r3, #32
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c54:	b004      	add	sp, #16
 8002c56:	4770      	bx	lr

08002c58 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	4613      	mov	r3, r2
 8002c64:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d165      	bne.n	8002d38 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	4a41      	ldr	r2, [pc, #260]	@ (8002d74 <USB_SetTurnaroundTime+0x11c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d906      	bls.n	8002c82 <USB_SetTurnaroundTime+0x2a>
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	4a40      	ldr	r2, [pc, #256]	@ (8002d78 <USB_SetTurnaroundTime+0x120>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d202      	bcs.n	8002c82 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002c7c:	230f      	movs	r3, #15
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	e062      	b.n	8002d48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	4a3c      	ldr	r2, [pc, #240]	@ (8002d78 <USB_SetTurnaroundTime+0x120>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d306      	bcc.n	8002c98 <USB_SetTurnaroundTime+0x40>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	4a3b      	ldr	r2, [pc, #236]	@ (8002d7c <USB_SetTurnaroundTime+0x124>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d202      	bcs.n	8002c98 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002c92:	230e      	movs	r3, #14
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	e057      	b.n	8002d48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4a38      	ldr	r2, [pc, #224]	@ (8002d7c <USB_SetTurnaroundTime+0x124>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d306      	bcc.n	8002cae <USB_SetTurnaroundTime+0x56>
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4a37      	ldr	r2, [pc, #220]	@ (8002d80 <USB_SetTurnaroundTime+0x128>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d202      	bcs.n	8002cae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002ca8:	230d      	movs	r3, #13
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	e04c      	b.n	8002d48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	4a33      	ldr	r2, [pc, #204]	@ (8002d80 <USB_SetTurnaroundTime+0x128>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d306      	bcc.n	8002cc4 <USB_SetTurnaroundTime+0x6c>
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	4a32      	ldr	r2, [pc, #200]	@ (8002d84 <USB_SetTurnaroundTime+0x12c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d802      	bhi.n	8002cc4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002cbe:	230c      	movs	r3, #12
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	e041      	b.n	8002d48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4a2f      	ldr	r2, [pc, #188]	@ (8002d84 <USB_SetTurnaroundTime+0x12c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d906      	bls.n	8002cda <USB_SetTurnaroundTime+0x82>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4a2e      	ldr	r2, [pc, #184]	@ (8002d88 <USB_SetTurnaroundTime+0x130>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d802      	bhi.n	8002cda <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002cd4:	230b      	movs	r3, #11
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	e036      	b.n	8002d48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	4a2a      	ldr	r2, [pc, #168]	@ (8002d88 <USB_SetTurnaroundTime+0x130>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d906      	bls.n	8002cf0 <USB_SetTurnaroundTime+0x98>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	4a29      	ldr	r2, [pc, #164]	@ (8002d8c <USB_SetTurnaroundTime+0x134>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d802      	bhi.n	8002cf0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002cea:	230a      	movs	r3, #10
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	e02b      	b.n	8002d48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4a26      	ldr	r2, [pc, #152]	@ (8002d8c <USB_SetTurnaroundTime+0x134>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d906      	bls.n	8002d06 <USB_SetTurnaroundTime+0xae>
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	4a25      	ldr	r2, [pc, #148]	@ (8002d90 <USB_SetTurnaroundTime+0x138>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d202      	bcs.n	8002d06 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002d00:	2309      	movs	r3, #9
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	e020      	b.n	8002d48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	4a21      	ldr	r2, [pc, #132]	@ (8002d90 <USB_SetTurnaroundTime+0x138>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d306      	bcc.n	8002d1c <USB_SetTurnaroundTime+0xc4>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	4a20      	ldr	r2, [pc, #128]	@ (8002d94 <USB_SetTurnaroundTime+0x13c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d802      	bhi.n	8002d1c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002d16:	2308      	movs	r3, #8
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	e015      	b.n	8002d48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	4a1d      	ldr	r2, [pc, #116]	@ (8002d94 <USB_SetTurnaroundTime+0x13c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d906      	bls.n	8002d32 <USB_SetTurnaroundTime+0xda>
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	4a1c      	ldr	r2, [pc, #112]	@ (8002d98 <USB_SetTurnaroundTime+0x140>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d202      	bcs.n	8002d32 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002d2c:	2307      	movs	r3, #7
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	e00a      	b.n	8002d48 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002d32:	2306      	movs	r3, #6
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	e007      	b.n	8002d48 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d102      	bne.n	8002d44 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002d3e:	2309      	movs	r3, #9
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	e001      	b.n	8002d48 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002d44:	2309      	movs	r3, #9
 8002d46:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	029b      	lsls	r3, r3, #10
 8002d5c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002d60:	431a      	orrs	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	371c      	adds	r7, #28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	00d8acbf 	.word	0x00d8acbf
 8002d78:	00e4e1c0 	.word	0x00e4e1c0
 8002d7c:	00f42400 	.word	0x00f42400
 8002d80:	01067380 	.word	0x01067380
 8002d84:	011a499f 	.word	0x011a499f
 8002d88:	01312cff 	.word	0x01312cff
 8002d8c:	014ca43f 	.word	0x014ca43f
 8002d90:	016e3600 	.word	0x016e3600
 8002d94:	01a6ab1f 	.word	0x01a6ab1f
 8002d98:	01e84800 	.word	0x01e84800

08002d9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f043 0201 	orr.w	r2, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f023 0201 	bic.w	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d115      	bne.n	8002e2e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002e0e:	200a      	movs	r0, #10
 8002e10:	f7fd fd42 	bl	8000898 <HAL_Delay>
      ms += 10U;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	330a      	adds	r3, #10
 8002e18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f001 f93f 	bl	800409e <USB_GetMode>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d01e      	beq.n	8002e64 <USB_SetCurrentMode+0x84>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2bc7      	cmp	r3, #199	@ 0xc7
 8002e2a:	d9f0      	bls.n	8002e0e <USB_SetCurrentMode+0x2e>
 8002e2c:	e01a      	b.n	8002e64 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002e2e:	78fb      	ldrb	r3, [r7, #3]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d115      	bne.n	8002e60 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002e40:	200a      	movs	r0, #10
 8002e42:	f7fd fd29 	bl	8000898 <HAL_Delay>
      ms += 10U;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	330a      	adds	r3, #10
 8002e4a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f001 f926 	bl	800409e <USB_GetMode>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <USB_SetCurrentMode+0x84>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2bc7      	cmp	r3, #199	@ 0xc7
 8002e5c:	d9f0      	bls.n	8002e40 <USB_SetCurrentMode+0x60>
 8002e5e:	e001      	b.n	8002e64 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e005      	b.n	8002e70 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2bc8      	cmp	r3, #200	@ 0xc8
 8002e68:	d101      	bne.n	8002e6e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e78:	b084      	sub	sp, #16
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b086      	sub	sp, #24
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002e86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002e92:	2300      	movs	r3, #0
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	e009      	b.n	8002eac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	3340      	adds	r3, #64	@ 0x40
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	613b      	str	r3, [r7, #16]
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	2b0e      	cmp	r3, #14
 8002eb0:	d9f2      	bls.n	8002e98 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002eb2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d11c      	bne.n	8002ef4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ec8:	f043 0302 	orr.w	r3, r3, #2
 8002ecc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ede:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eea:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	639a      	str	r2, [r3, #56]	@ 0x38
 8002ef2:	e00b      	b.n	8002f0c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f04:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002f12:	461a      	mov	r2, r3
 8002f14:	2300      	movs	r3, #0
 8002f16:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f18:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d10d      	bne.n	8002f3c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002f20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d104      	bne.n	8002f32 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002f28:	2100      	movs	r1, #0
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f968 	bl	8003200 <USB_SetDevSpeed>
 8002f30:	e008      	b.n	8002f44 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002f32:	2101      	movs	r1, #1
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 f963 	bl	8003200 <USB_SetDevSpeed>
 8002f3a:	e003      	b.n	8002f44 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002f3c:	2103      	movs	r1, #3
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f95e 	bl	8003200 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002f44:	2110      	movs	r1, #16
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f8fa 	bl	8003140 <USB_FlushTxFifo>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f924 	bl	80031a4 <USB_FlushRxFifo>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	2300      	movs	r3, #0
 8002f70:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f78:	461a      	mov	r2, r3
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f84:	461a      	mov	r2, r3
 8002f86:	2300      	movs	r3, #0
 8002f88:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	e043      	b.n	8003018 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	015a      	lsls	r2, r3, #5
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002fa2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002fa6:	d118      	bne.n	8002fda <USB_DevInit+0x162>
    {
      if (i == 0U)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10a      	bne.n	8002fc4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	015a      	lsls	r2, r3, #5
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	e013      	b.n	8002fec <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	e008      	b.n	8002fec <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	2300      	movs	r3, #0
 8002fea:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	015a      	lsls	r2, r3, #5
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4413      	add	r3, r2
 8003006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800300a:	461a      	mov	r2, r3
 800300c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003010:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	3301      	adds	r3, #1
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800301c:	461a      	mov	r2, r3
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4293      	cmp	r3, r2
 8003022:	d3b5      	bcc.n	8002f90 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003024:	2300      	movs	r3, #0
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	e043      	b.n	80030b2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4413      	add	r3, r2
 8003032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800303c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003040:	d118      	bne.n	8003074 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10a      	bne.n	800305e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4413      	add	r3, r2
 8003050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003054:	461a      	mov	r2, r3
 8003056:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	e013      	b.n	8003086 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	015a      	lsls	r2, r3, #5
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4413      	add	r3, r2
 8003066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800306a:	461a      	mov	r2, r3
 800306c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e008      	b.n	8003086 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4413      	add	r3, r2
 800307c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003080:	461a      	mov	r2, r3
 8003082:	2300      	movs	r3, #0
 8003084:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4413      	add	r3, r2
 800308e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003092:	461a      	mov	r2, r3
 8003094:	2300      	movs	r3, #0
 8003096:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030a4:	461a      	mov	r2, r3
 80030a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80030aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	3301      	adds	r3, #1
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80030b6:	461a      	mov	r2, r3
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d3b5      	bcc.n	800302a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030d0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80030de:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80030e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d105      	bne.n	80030f4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f043 0210 	orr.w	r2, r3, #16
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699a      	ldr	r2, [r3, #24]
 80030f8:	4b10      	ldr	r3, [pc, #64]	@ (800313c <USB_DevInit+0x2c4>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003100:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	f043 0208 	orr.w	r2, r3, #8
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003114:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003118:	2b01      	cmp	r3, #1
 800311a:	d107      	bne.n	800312c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003124:	f043 0304 	orr.w	r3, r3, #4
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800312c:	7dfb      	ldrb	r3, [r7, #23]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003138:	b004      	add	sp, #16
 800313a:	4770      	bx	lr
 800313c:	803c3800 	.word	0x803c3800

08003140 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	3301      	adds	r3, #1
 8003152:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800315a:	d901      	bls.n	8003160 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e01b      	b.n	8003198 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	daf2      	bge.n	800314e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	019b      	lsls	r3, r3, #6
 8003170:	f043 0220 	orr.w	r2, r3, #32
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	3301      	adds	r3, #1
 800317c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003184:	d901      	bls.n	800318a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e006      	b.n	8003198 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b20      	cmp	r3, #32
 8003194:	d0f0      	beq.n	8003178 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	3301      	adds	r3, #1
 80031b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80031bc:	d901      	bls.n	80031c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e018      	b.n	80031f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	daf2      	bge.n	80031b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2210      	movs	r2, #16
 80031d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	3301      	adds	r3, #1
 80031d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80031e0:	d901      	bls.n	80031e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e006      	b.n	80031f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f003 0310 	and.w	r3, r3, #16
 80031ee:	2b10      	cmp	r3, #16
 80031f0:	d0f0      	beq.n	80031d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	68f9      	ldr	r1, [r7, #12]
 800321c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003220:	4313      	orrs	r3, r2
 8003222:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003232:	b480      	push	{r7}
 8003234:	b087      	sub	sp, #28
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 0306 	and.w	r3, r3, #6
 800324a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d102      	bne.n	8003258 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003252:	2300      	movs	r3, #0
 8003254:	75fb      	strb	r3, [r7, #23]
 8003256:	e00a      	b.n	800326e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d002      	beq.n	8003264 <USB_GetDevSpeed+0x32>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2b06      	cmp	r3, #6
 8003262:	d102      	bne.n	800326a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003264:	2302      	movs	r3, #2
 8003266:	75fb      	strb	r3, [r7, #23]
 8003268:	e001      	b.n	800326e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800326a:	230f      	movs	r3, #15
 800326c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800326e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003270:	4618      	mov	r0, r3
 8003272:	371c      	adds	r7, #28
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	785b      	ldrb	r3, [r3, #1]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d13a      	bne.n	800330e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800329e:	69da      	ldr	r2, [r3, #28]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	f003 030f 	and.w	r3, r3, #15
 80032a8:	2101      	movs	r1, #1
 80032aa:	fa01 f303 	lsl.w	r3, r1, r3
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	68f9      	ldr	r1, [r7, #12]
 80032b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80032b6:	4313      	orrs	r3, r2
 80032b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	015a      	lsls	r2, r3, #5
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4413      	add	r3, r2
 80032c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d155      	bne.n	800337c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	791b      	ldrb	r3, [r3, #4]
 80032ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	059b      	lsls	r3, r3, #22
 80032f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032f4:	4313      	orrs	r3, r2
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	0151      	lsls	r1, r2, #5
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	440a      	add	r2, r1
 80032fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003302:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003306:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	e036      	b.n	800337c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003314:	69da      	ldr	r2, [r3, #28]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	2101      	movs	r1, #1
 8003320:	fa01 f303 	lsl.w	r3, r1, r3
 8003324:	041b      	lsls	r3, r3, #16
 8003326:	68f9      	ldr	r1, [r7, #12]
 8003328:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800332c:	4313      	orrs	r3, r2
 800332e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4413      	add	r3, r2
 8003338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d11a      	bne.n	800337c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4413      	add	r3, r2
 800334e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	791b      	ldrb	r3, [r3, #4]
 8003360:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003362:	430b      	orrs	r3, r1
 8003364:	4313      	orrs	r3, r2
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	0151      	lsls	r1, r2, #5
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	440a      	add	r2, r1
 800336e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003372:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003376:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800337a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
	...

0800338c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	785b      	ldrb	r3, [r3, #1]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d161      	bne.n	800346c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80033ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033be:	d11f      	bne.n	8003400 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	0151      	lsls	r1, r2, #5
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	440a      	add	r2, r1
 80033d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80033da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80033de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	0151      	lsls	r1, r2, #5
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	440a      	add	r2, r1
 80033f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80033fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80033fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003406:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	f003 030f 	and.w	r3, r3, #15
 8003410:	2101      	movs	r1, #1
 8003412:	fa01 f303 	lsl.w	r3, r1, r3
 8003416:	b29b      	uxth	r3, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	68f9      	ldr	r1, [r7, #12]
 800341c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003420:	4013      	ands	r3, r2
 8003422:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800342a:	69da      	ldr	r2, [r3, #28]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	f003 030f 	and.w	r3, r3, #15
 8003434:	2101      	movs	r1, #1
 8003436:	fa01 f303 	lsl.w	r3, r1, r3
 800343a:	b29b      	uxth	r3, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	68f9      	ldr	r1, [r7, #12]
 8003440:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003444:	4013      	ands	r3, r2
 8003446:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4413      	add	r3, r2
 8003450:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	0159      	lsls	r1, r3, #5
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	440b      	add	r3, r1
 800345e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003462:	4619      	mov	r1, r3
 8003464:	4b35      	ldr	r3, [pc, #212]	@ (800353c <USB_DeactivateEndpoint+0x1b0>)
 8003466:	4013      	ands	r3, r2
 8003468:	600b      	str	r3, [r1, #0]
 800346a:	e060      	b.n	800352e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800347e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003482:	d11f      	bne.n	80034c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4413      	add	r3, r2
 800348c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	0151      	lsls	r1, r2, #5
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	440a      	add	r2, r1
 800349a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800349e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80034a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	0151      	lsls	r1, r2, #5
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	440a      	add	r2, r1
 80034ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80034be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80034c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	f003 030f 	and.w	r3, r3, #15
 80034d4:	2101      	movs	r1, #1
 80034d6:	fa01 f303 	lsl.w	r3, r1, r3
 80034da:	041b      	lsls	r3, r3, #16
 80034dc:	43db      	mvns	r3, r3
 80034de:	68f9      	ldr	r1, [r7, #12]
 80034e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034e4:	4013      	ands	r3, r2
 80034e6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034ee:	69da      	ldr	r2, [r3, #28]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	2101      	movs	r1, #1
 80034fa:	fa01 f303 	lsl.w	r3, r1, r3
 80034fe:	041b      	lsls	r3, r3, #16
 8003500:	43db      	mvns	r3, r3
 8003502:	68f9      	ldr	r1, [r7, #12]
 8003504:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003508:	4013      	ands	r3, r2
 800350a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4413      	add	r3, r2
 8003514:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	0159      	lsls	r1, r3, #5
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	440b      	add	r3, r1
 8003522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003526:	4619      	mov	r1, r3
 8003528:	4b05      	ldr	r3, [pc, #20]	@ (8003540 <USB_DeactivateEndpoint+0x1b4>)
 800352a:	4013      	ands	r3, r2
 800352c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	ec337800 	.word	0xec337800
 8003540:	eff37800 	.word	0xeff37800

08003544 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08a      	sub	sp, #40	@ 0x28
 8003548:	af02      	add	r7, sp, #8
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	4613      	mov	r3, r2
 8003550:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	785b      	ldrb	r3, [r3, #1]
 8003560:	2b01      	cmp	r3, #1
 8003562:	f040 817f 	bne.w	8003864 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d132      	bne.n	80035d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	4413      	add	r3, r2
 8003576:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	0151      	lsls	r1, r2, #5
 8003580:	69fa      	ldr	r2, [r7, #28]
 8003582:	440a      	add	r2, r1
 8003584:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003588:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800358c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003590:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	4413      	add	r3, r2
 800359a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	0151      	lsls	r1, r2, #5
 80035a4:	69fa      	ldr	r2, [r7, #28]
 80035a6:	440a      	add	r2, r1
 80035a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80035b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	0151      	lsls	r1, r2, #5
 80035c4:	69fa      	ldr	r2, [r7, #28]
 80035c6:	440a      	add	r2, r1
 80035c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035cc:	0cdb      	lsrs	r3, r3, #19
 80035ce:	04db      	lsls	r3, r3, #19
 80035d0:	6113      	str	r3, [r2, #16]
 80035d2:	e097      	b.n	8003704 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	0151      	lsls	r1, r2, #5
 80035e6:	69fa      	ldr	r2, [r7, #28]
 80035e8:	440a      	add	r2, r1
 80035ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035ee:	0cdb      	lsrs	r3, r3, #19
 80035f0:	04db      	lsls	r3, r3, #19
 80035f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	015a      	lsls	r2, r3, #5
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	4413      	add	r3, r2
 80035fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	0151      	lsls	r1, r2, #5
 8003606:	69fa      	ldr	r2, [r7, #28]
 8003608:	440a      	add	r2, r1
 800360a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800360e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003612:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003616:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d11a      	bne.n	8003654 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	691a      	ldr	r2, [r3, #16]
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	429a      	cmp	r2, r3
 8003628:	d903      	bls.n	8003632 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	0151      	lsls	r1, r2, #5
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	440a      	add	r2, r1
 8003648:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800364c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003650:	6113      	str	r3, [r2, #16]
 8003652:	e044      	b.n	80036de <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	4413      	add	r3, r2
 800365e:	1e5a      	subs	r2, r3, #1
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	fbb2 f3f3 	udiv	r3, r2, r3
 8003668:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	4413      	add	r3, r2
 8003672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	8afb      	ldrh	r3, [r7, #22]
 800367a:	04d9      	lsls	r1, r3, #19
 800367c:	4ba4      	ldr	r3, [pc, #656]	@ (8003910 <USB_EPStartXfer+0x3cc>)
 800367e:	400b      	ands	r3, r1
 8003680:	69b9      	ldr	r1, [r7, #24]
 8003682:	0148      	lsls	r0, r1, #5
 8003684:	69f9      	ldr	r1, [r7, #28]
 8003686:	4401      	add	r1, r0
 8003688:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800368c:	4313      	orrs	r3, r2
 800368e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	791b      	ldrb	r3, [r3, #4]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d122      	bne.n	80036de <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	0151      	lsls	r1, r2, #5
 80036aa:	69fa      	ldr	r2, [r7, #28]
 80036ac:	440a      	add	r2, r1
 80036ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036b2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80036b6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	8afb      	ldrh	r3, [r7, #22]
 80036c8:	075b      	lsls	r3, r3, #29
 80036ca:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80036ce:	69b9      	ldr	r1, [r7, #24]
 80036d0:	0148      	lsls	r0, r1, #5
 80036d2:	69f9      	ldr	r1, [r7, #28]
 80036d4:	4401      	add	r1, r0
 80036d6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80036da:	4313      	orrs	r3, r2
 80036dc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	015a      	lsls	r2, r3, #5
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	4413      	add	r3, r2
 80036e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f4:	69b9      	ldr	r1, [r7, #24]
 80036f6:	0148      	lsls	r0, r1, #5
 80036f8:	69f9      	ldr	r1, [r7, #28]
 80036fa:	4401      	add	r1, r0
 80036fc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003700:	4313      	orrs	r3, r2
 8003702:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d14b      	bne.n	80037a2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d009      	beq.n	8003726 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	4413      	add	r3, r2
 800371a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800371e:	461a      	mov	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	791b      	ldrb	r3, [r3, #4]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d128      	bne.n	8003780 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373a:	2b00      	cmp	r3, #0
 800373c:	d110      	bne.n	8003760 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	4413      	add	r3, r2
 8003746:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	0151      	lsls	r1, r2, #5
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	440a      	add	r2, r1
 8003754:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003758:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	e00f      	b.n	8003780 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	4413      	add	r3, r2
 8003768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	0151      	lsls	r1, r2, #5
 8003772:	69fa      	ldr	r2, [r7, #28]
 8003774:	440a      	add	r2, r1
 8003776:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800377a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800377e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	4413      	add	r3, r2
 8003788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	0151      	lsls	r1, r2, #5
 8003792:	69fa      	ldr	r2, [r7, #28]
 8003794:	440a      	add	r2, r1
 8003796:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800379a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	e166      	b.n	8003a70 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	0151      	lsls	r1, r2, #5
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	440a      	add	r2, r1
 80037b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037bc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80037c0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	791b      	ldrb	r3, [r3, #4]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d015      	beq.n	80037f6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 814e 	beq.w	8003a70 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	f003 030f 	and.w	r3, r3, #15
 80037e4:	2101      	movs	r1, #1
 80037e6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ea:	69f9      	ldr	r1, [r7, #28]
 80037ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80037f0:	4313      	orrs	r3, r2
 80037f2:	634b      	str	r3, [r1, #52]	@ 0x34
 80037f4:	e13c      	b.n	8003a70 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003802:	2b00      	cmp	r3, #0
 8003804:	d110      	bne.n	8003828 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	4413      	add	r3, r2
 800380e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	0151      	lsls	r1, r2, #5
 8003818:	69fa      	ldr	r2, [r7, #28]
 800381a:	440a      	add	r2, r1
 800381c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003820:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	e00f      	b.n	8003848 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	0151      	lsls	r1, r2, #5
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	440a      	add	r2, r1
 800383e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003842:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003846:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	68d9      	ldr	r1, [r3, #12]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	781a      	ldrb	r2, [r3, #0]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	b298      	uxth	r0, r3
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	4603      	mov	r3, r0
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 f9b9 	bl	8003bd4 <USB_WritePacket>
 8003862:	e105      	b.n	8003a70 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	4413      	add	r3, r2
 800386c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	0151      	lsls	r1, r2, #5
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	440a      	add	r2, r1
 800387a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800387e:	0cdb      	lsrs	r3, r3, #19
 8003880:	04db      	lsls	r3, r3, #19
 8003882:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	4413      	add	r3, r2
 800388c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	0151      	lsls	r1, r2, #5
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	440a      	add	r2, r1
 800389a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800389e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80038a2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80038a6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d132      	bne.n	8003914 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038dc:	69b9      	ldr	r1, [r7, #24]
 80038de:	0148      	lsls	r0, r1, #5
 80038e0:	69f9      	ldr	r1, [r7, #28]
 80038e2:	4401      	add	r1, r0
 80038e4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80038e8:	4313      	orrs	r3, r2
 80038ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	0151      	lsls	r1, r2, #5
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	440a      	add	r2, r1
 8003902:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003906:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800390a:	6113      	str	r3, [r2, #16]
 800390c:	e062      	b.n	80039d4 <USB_EPStartXfer+0x490>
 800390e:	bf00      	nop
 8003910:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d123      	bne.n	8003964 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	4413      	add	r3, r2
 8003924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003928:	691a      	ldr	r2, [r3, #16]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003932:	69b9      	ldr	r1, [r7, #24]
 8003934:	0148      	lsls	r0, r1, #5
 8003936:	69f9      	ldr	r1, [r7, #28]
 8003938:	4401      	add	r1, r0
 800393a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800393e:	4313      	orrs	r3, r2
 8003940:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	4413      	add	r3, r2
 800394a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	0151      	lsls	r1, r2, #5
 8003954:	69fa      	ldr	r2, [r7, #28]
 8003956:	440a      	add	r2, r1
 8003958:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800395c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003960:	6113      	str	r3, [r2, #16]
 8003962:	e037      	b.n	80039d4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	4413      	add	r3, r2
 800396e:	1e5a      	subs	r2, r3, #1
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	fbb2 f3f3 	udiv	r3, r2, r3
 8003978:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	8afa      	ldrh	r2, [r7, #22]
 8003980:	fb03 f202 	mul.w	r2, r3, r2
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	8afb      	ldrh	r3, [r7, #22]
 8003998:	04d9      	lsls	r1, r3, #19
 800399a:	4b38      	ldr	r3, [pc, #224]	@ (8003a7c <USB_EPStartXfer+0x538>)
 800399c:	400b      	ands	r3, r1
 800399e:	69b9      	ldr	r1, [r7, #24]
 80039a0:	0148      	lsls	r0, r1, #5
 80039a2:	69f9      	ldr	r1, [r7, #28]
 80039a4:	4401      	add	r1, r0
 80039a6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80039aa:	4313      	orrs	r3, r2
 80039ac:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c4:	69b9      	ldr	r1, [r7, #24]
 80039c6:	0148      	lsls	r0, r1, #5
 80039c8:	69f9      	ldr	r1, [r7, #28]
 80039ca:	4401      	add	r1, r0
 80039cc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80039d0:	4313      	orrs	r3, r2
 80039d2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d10d      	bne.n	80039f6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	68d9      	ldr	r1, [r3, #12]
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039f2:	460a      	mov	r2, r1
 80039f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	791b      	ldrb	r3, [r3, #4]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d128      	bne.n	8003a50 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d110      	bne.n	8003a30 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	0151      	lsls	r1, r2, #5
 8003a20:	69fa      	ldr	r2, [r7, #28]
 8003a22:	440a      	add	r2, r1
 8003a24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a28:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	e00f      	b.n	8003a50 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	0151      	lsls	r1, r2, #5
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	440a      	add	r2, r1
 8003a46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a4e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	0151      	lsls	r1, r2, #5
 8003a62:	69fa      	ldr	r2, [r7, #28]
 8003a64:	440a      	add	r2, r1
 8003a66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a6a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003a6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3720      	adds	r7, #32
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	1ff80000 	.word	0x1ff80000

08003a80 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	785b      	ldrb	r3, [r3, #1]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d14a      	bne.n	8003b34 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ab2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ab6:	f040 8086 	bne.w	8003bc6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	7812      	ldrb	r2, [r2, #0]
 8003ace:	0151      	lsls	r1, r2, #5
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	440a      	add	r2, r1
 8003ad4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ad8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003adc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	7812      	ldrb	r2, [r2, #0]
 8003af2:	0151      	lsls	r1, r2, #5
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	440a      	add	r2, r1
 8003af8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003afc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	3301      	adds	r3, #1
 8003b06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d902      	bls.n	8003b18 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	75fb      	strb	r3, [r7, #23]
          break;
 8003b16:	e056      	b.n	8003bc6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b30:	d0e7      	beq.n	8003b02 <USB_EPStopXfer+0x82>
 8003b32:	e048      	b.n	8003bc6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b4c:	d13b      	bne.n	8003bc6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	015a      	lsls	r2, r3, #5
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	7812      	ldrb	r2, [r2, #0]
 8003b62:	0151      	lsls	r1, r2, #5
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	440a      	add	r2, r1
 8003b68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b6c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003b70:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	7812      	ldrb	r2, [r2, #0]
 8003b86:	0151      	lsls	r1, r2, #5
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	440a      	add	r2, r1
 8003b8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d902      	bls.n	8003bac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	75fb      	strb	r3, [r7, #23]
          break;
 8003baa:	e00c      	b.n	8003bc6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003bc4:	d0e7      	beq.n	8003b96 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	371c      	adds	r7, #28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b089      	sub	sp, #36	@ 0x24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	4611      	mov	r1, r2
 8003be0:	461a      	mov	r2, r3
 8003be2:	460b      	mov	r3, r1
 8003be4:	71fb      	strb	r3, [r7, #7]
 8003be6:	4613      	mov	r3, r2
 8003be8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003bf2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d123      	bne.n	8003c42 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003bfa:	88bb      	ldrh	r3, [r7, #4]
 8003bfc:	3303      	adds	r3, #3
 8003bfe:	089b      	lsrs	r3, r3, #2
 8003c00:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003c02:	2300      	movs	r3, #0
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	e018      	b.n	8003c3a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003c08:	79fb      	ldrb	r3, [r7, #7]
 8003c0a:	031a      	lsls	r2, r3, #12
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c14:	461a      	mov	r2, r3
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	3301      	adds	r3, #1
 8003c26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	3301      	adds	r3, #1
 8003c32:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	3301      	adds	r3, #1
 8003c38:	61bb      	str	r3, [r7, #24]
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d3e2      	bcc.n	8003c08 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3724      	adds	r7, #36	@ 0x24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b08b      	sub	sp, #44	@ 0x2c
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003c66:	88fb      	ldrh	r3, [r7, #6]
 8003c68:	089b      	lsrs	r3, r3, #2
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003c6e:	88fb      	ldrh	r3, [r7, #6]
 8003c70:	f003 0303 	and.w	r3, r3, #3
 8003c74:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003c76:	2300      	movs	r3, #0
 8003c78:	623b      	str	r3, [r7, #32]
 8003c7a:	e014      	b.n	8003ca6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c86:	601a      	str	r2, [r3, #0]
    pDest++;
 8003c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c90:	3301      	adds	r3, #1
 8003c92:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c96:	3301      	adds	r3, #1
 8003c98:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	623b      	str	r3, [r7, #32]
 8003ca6:	6a3a      	ldr	r2, [r7, #32]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d3e6      	bcc.n	8003c7c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003cae:	8bfb      	ldrh	r3, [r7, #30]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d01e      	beq.n	8003cf2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f107 0310 	add.w	r3, r7, #16
 8003cc4:	6812      	ldr	r2, [r2, #0]
 8003cc6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd8:	701a      	strb	r2, [r3, #0]
      i++;
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	623b      	str	r3, [r7, #32]
      pDest++;
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003ce6:	8bfb      	ldrh	r3, [r7, #30]
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003cec:	8bfb      	ldrh	r3, [r7, #30]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1ea      	bne.n	8003cc8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	372c      	adds	r7, #44	@ 0x2c
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	785b      	ldrb	r3, [r3, #1]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d12c      	bne.n	8003d76 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	db12      	blt.n	8003d54 <USB_EPSetStall+0x54>
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00f      	beq.n	8003d54 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	015a      	lsls	r2, r3, #5
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	0151      	lsls	r1, r2, #5
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	440a      	add	r2, r1
 8003d4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d4e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d52:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	0151      	lsls	r1, r2, #5
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	440a      	add	r2, r1
 8003d6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d6e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	e02b      	b.n	8003dce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	db12      	blt.n	8003dae <USB_EPSetStall+0xae>
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00f      	beq.n	8003dae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	015a      	lsls	r2, r3, #5
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4413      	add	r3, r2
 8003d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	0151      	lsls	r1, r2, #5
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	440a      	add	r2, r1
 8003da4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003da8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003dac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	0151      	lsls	r1, r2, #5
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	440a      	add	r2, r1
 8003dc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003dc8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003dcc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	785b      	ldrb	r3, [r3, #1]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d128      	bne.n	8003e4a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	0151      	lsls	r1, r2, #5
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	440a      	add	r2, r1
 8003e0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	791b      	ldrb	r3, [r3, #4]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d003      	beq.n	8003e28 <USB_EPClearStall+0x4c>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	791b      	ldrb	r3, [r3, #4]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d138      	bne.n	8003e9a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	0151      	lsls	r1, r2, #5
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	440a      	add	r2, r1
 8003e3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	e027      	b.n	8003e9a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	0151      	lsls	r1, r2, #5
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	440a      	add	r2, r1
 8003e60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e64:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e68:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	791b      	ldrb	r3, [r3, #4]
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d003      	beq.n	8003e7a <USB_EPClearStall+0x9e>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	791b      	ldrb	r3, [r3, #4]
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d10f      	bne.n	8003e9a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	015a      	lsls	r2, r3, #5
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4413      	add	r3, r2
 8003e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	0151      	lsls	r1, r2, #5
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	440a      	add	r2, r1
 8003e90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e98:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ec6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003eca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8003edc:	68f9      	ldr	r1, [r7, #12]
 8003ede:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003f0e:	f023 0303 	bic.w	r3, r3, #3
 8003f12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f22:	f023 0302 	bic.w	r3, r3, #2
 8003f26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b085      	sub	sp, #20
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003f50:	f023 0303 	bic.w	r3, r3, #3
 8003f54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f64:	f043 0302 	orr.w	r3, r3, #2
 8003f68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003f90:	68fb      	ldr	r3, [r7, #12]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b085      	sub	sp, #20
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	0c1b      	lsrs	r3, r3, #16
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b085      	sub	sp, #20
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	b29b      	uxth	r3, r3
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004006:	b480      	push	{r7}
 8004008:	b085      	sub	sp, #20
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	460b      	mov	r3, r1
 8004010:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004016:	78fb      	ldrb	r3, [r7, #3]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4413      	add	r3, r2
 800401e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	4013      	ands	r3, r2
 8004032:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004034:	68bb      	ldr	r3, [r7, #8]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004042:	b480      	push	{r7}
 8004044:	b087      	sub	sp, #28
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	460b      	mov	r3, r1
 800404c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004064:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004066:	78fb      	ldrb	r3, [r7, #3]
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	fa22 f303 	lsr.w	r3, r2, r3
 8004072:	01db      	lsls	r3, r3, #7
 8004074:	b2db      	uxtb	r3, r3
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	4013      	ands	r3, r2
 800408e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004090:	68bb      	ldr	r3, [r7, #8]
}
 8004092:	4618      	mov	r0, r3
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f003 0301 	and.w	r3, r3, #1
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b085      	sub	sp, #20
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040d4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80040d8:	f023 0307 	bic.w	r3, r3, #7
 80040dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	460b      	mov	r3, r1
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	333c      	adds	r3, #60	@ 0x3c
 8004116:	3304      	adds	r3, #4
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	4a26      	ldr	r2, [pc, #152]	@ (80041b8 <USB_EP0_OutStart+0xb8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d90a      	bls.n	800413a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004130:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004134:	d101      	bne.n	800413a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	e037      	b.n	80041aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004140:	461a      	mov	r2, r3
 8004142:	2300      	movs	r3, #0
 8004144:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004154:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004158:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004168:	f043 0318 	orr.w	r3, r3, #24
 800416c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800417c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004180:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004182:	7afb      	ldrb	r3, [r7, #11]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d10f      	bne.n	80041a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800418e:	461a      	mov	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041a2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80041a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	4f54300a 	.word	0x4f54300a

080041bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	3301      	adds	r3, #1
 80041cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80041d4:	d901      	bls.n	80041da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e022      	b.n	8004220 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	daf2      	bge.n	80041c8 <USB_CoreReset+0xc>

  count = 10U;
 80041e2:	230a      	movs	r3, #10
 80041e4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80041e6:	e002      	b.n	80041ee <USB_CoreReset+0x32>
  {
    count--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	3b01      	subs	r3, #1
 80041ec:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1f9      	bne.n	80041e8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f043 0201 	orr.w	r2, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	3301      	adds	r3, #1
 8004204:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800420c:	d901      	bls.n	8004212 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e006      	b.n	8004220 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b01      	cmp	r3, #1
 800421c:	d0f0      	beq.n	8004200 <USB_CoreReset+0x44>

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004238:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800423c:	f002 fcb2 	bl	8006ba4 <USBD_static_malloc>
 8004240:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d109      	bne.n	800425c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	32b0      	adds	r2, #176	@ 0xb0
 8004252:	2100      	movs	r1, #0
 8004254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004258:	2302      	movs	r3, #2
 800425a:	e0d4      	b.n	8004406 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800425c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004260:	2100      	movs	r1, #0
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f002 fce2 	bl	8006c2c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	32b0      	adds	r2, #176	@ 0xb0
 8004272:	68f9      	ldr	r1, [r7, #12]
 8004274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	32b0      	adds	r2, #176	@ 0xb0
 8004282:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	7c1b      	ldrb	r3, [r3, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d138      	bne.n	8004306 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004294:	4b5e      	ldr	r3, [pc, #376]	@ (8004410 <USBD_CDC_Init+0x1e4>)
 8004296:	7819      	ldrb	r1, [r3, #0]
 8004298:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800429c:	2202      	movs	r2, #2
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f002 fb5d 	bl	800695e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80042a4:	4b5a      	ldr	r3, [pc, #360]	@ (8004410 <USBD_CDC_Init+0x1e4>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	f003 020f 	and.w	r2, r3, #15
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	4613      	mov	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	3323      	adds	r3, #35	@ 0x23
 80042ba:	2201      	movs	r2, #1
 80042bc:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80042be:	4b55      	ldr	r3, [pc, #340]	@ (8004414 <USBD_CDC_Init+0x1e8>)
 80042c0:	7819      	ldrb	r1, [r3, #0]
 80042c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80042c6:	2202      	movs	r2, #2
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f002 fb48 	bl	800695e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80042ce:	4b51      	ldr	r3, [pc, #324]	@ (8004414 <USBD_CDC_Init+0x1e8>)
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	f003 020f 	and.w	r2, r3, #15
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	4613      	mov	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80042e6:	2201      	movs	r2, #1
 80042e8:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80042ea:	4b4b      	ldr	r3, [pc, #300]	@ (8004418 <USBD_CDC_Init+0x1ec>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	f003 020f 	and.w	r2, r3, #15
 80042f2:	6879      	ldr	r1, [r7, #4]
 80042f4:	4613      	mov	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	440b      	add	r3, r1
 80042fe:	331c      	adds	r3, #28
 8004300:	2210      	movs	r2, #16
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	e035      	b.n	8004372 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004306:	4b42      	ldr	r3, [pc, #264]	@ (8004410 <USBD_CDC_Init+0x1e4>)
 8004308:	7819      	ldrb	r1, [r3, #0]
 800430a:	2340      	movs	r3, #64	@ 0x40
 800430c:	2202      	movs	r2, #2
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f002 fb25 	bl	800695e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004314:	4b3e      	ldr	r3, [pc, #248]	@ (8004410 <USBD_CDC_Init+0x1e4>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	f003 020f 	and.w	r2, r3, #15
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	4613      	mov	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	440b      	add	r3, r1
 8004328:	3323      	adds	r3, #35	@ 0x23
 800432a:	2201      	movs	r2, #1
 800432c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800432e:	4b39      	ldr	r3, [pc, #228]	@ (8004414 <USBD_CDC_Init+0x1e8>)
 8004330:	7819      	ldrb	r1, [r3, #0]
 8004332:	2340      	movs	r3, #64	@ 0x40
 8004334:	2202      	movs	r2, #2
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f002 fb11 	bl	800695e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800433c:	4b35      	ldr	r3, [pc, #212]	@ (8004414 <USBD_CDC_Init+0x1e8>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	f003 020f 	and.w	r2, r3, #15
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	4613      	mov	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	440b      	add	r3, r1
 8004350:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004354:	2201      	movs	r2, #1
 8004356:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004358:	4b2f      	ldr	r3, [pc, #188]	@ (8004418 <USBD_CDC_Init+0x1ec>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	f003 020f 	and.w	r2, r3, #15
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	4613      	mov	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	440b      	add	r3, r1
 800436c:	331c      	adds	r3, #28
 800436e:	2210      	movs	r2, #16
 8004370:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004372:	4b29      	ldr	r3, [pc, #164]	@ (8004418 <USBD_CDC_Init+0x1ec>)
 8004374:	7819      	ldrb	r1, [r3, #0]
 8004376:	2308      	movs	r3, #8
 8004378:	2203      	movs	r2, #3
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f002 faef 	bl	800695e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004380:	4b25      	ldr	r3, [pc, #148]	@ (8004418 <USBD_CDC_Init+0x1ec>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	f003 020f 	and.w	r2, r3, #15
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	4613      	mov	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	440b      	add	r3, r1
 8004394:	3323      	adds	r3, #35	@ 0x23
 8004396:	2201      	movs	r2, #1
 8004398:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	33b0      	adds	r3, #176	@ 0xb0
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80043d0:	2302      	movs	r3, #2
 80043d2:	e018      	b.n	8004406 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	7c1b      	ldrb	r3, [r3, #16]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10a      	bne.n	80043f2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80043dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004414 <USBD_CDC_Init+0x1e8>)
 80043de:	7819      	ldrb	r1, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80043e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f002 fba6 	bl	8006b3c <USBD_LL_PrepareReceive>
 80043f0:	e008      	b.n	8004404 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80043f2:	4b08      	ldr	r3, [pc, #32]	@ (8004414 <USBD_CDC_Init+0x1e8>)
 80043f4:	7819      	ldrb	r1, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80043fc:	2340      	movs	r3, #64	@ 0x40
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f002 fb9c 	bl	8006b3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	200000c7 	.word	0x200000c7
 8004414:	200000c8 	.word	0x200000c8
 8004418:	200000c9 	.word	0x200000c9

0800441c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004428:	4b3a      	ldr	r3, [pc, #232]	@ (8004514 <USBD_CDC_DeInit+0xf8>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	4619      	mov	r1, r3
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f002 fabb 	bl	80069aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004434:	4b37      	ldr	r3, [pc, #220]	@ (8004514 <USBD_CDC_DeInit+0xf8>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	f003 020f 	and.w	r2, r3, #15
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	440b      	add	r3, r1
 8004448:	3323      	adds	r3, #35	@ 0x23
 800444a:	2200      	movs	r2, #0
 800444c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800444e:	4b32      	ldr	r3, [pc, #200]	@ (8004518 <USBD_CDC_DeInit+0xfc>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	4619      	mov	r1, r3
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f002 faa8 	bl	80069aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800445a:	4b2f      	ldr	r3, [pc, #188]	@ (8004518 <USBD_CDC_DeInit+0xfc>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	f003 020f 	and.w	r2, r3, #15
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004472:	2200      	movs	r2, #0
 8004474:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004476:	4b29      	ldr	r3, [pc, #164]	@ (800451c <USBD_CDC_DeInit+0x100>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	4619      	mov	r1, r3
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f002 fa94 	bl	80069aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004482:	4b26      	ldr	r3, [pc, #152]	@ (800451c <USBD_CDC_DeInit+0x100>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	f003 020f 	and.w	r2, r3, #15
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	4613      	mov	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	3323      	adds	r3, #35	@ 0x23
 8004498:	2200      	movs	r2, #0
 800449a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800449c:	4b1f      	ldr	r3, [pc, #124]	@ (800451c <USBD_CDC_DeInit+0x100>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	f003 020f 	and.w	r2, r3, #15
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	440b      	add	r3, r1
 80044b0:	331c      	adds	r3, #28
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	32b0      	adds	r2, #176	@ 0xb0
 80044c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d01f      	beq.n	8004508 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	33b0      	adds	r3, #176	@ 0xb0
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	32b0      	adds	r2, #176	@ 0xb0
 80044e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f002 fb68 	bl	8006bc0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	32b0      	adds	r2, #176	@ 0xb0
 80044fa:	2100      	movs	r1, #0
 80044fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	200000c7 	.word	0x200000c7
 8004518:	200000c8 	.word	0x200000c8
 800451c:	200000c9 	.word	0x200000c9

08004520 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	32b0      	adds	r2, #176	@ 0xb0
 8004534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004538:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800453a:	2300      	movs	r3, #0
 800453c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800454c:	2303      	movs	r3, #3
 800454e:	e0bf      	b.n	80046d0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004558:	2b00      	cmp	r3, #0
 800455a:	d050      	beq.n	80045fe <USBD_CDC_Setup+0xde>
 800455c:	2b20      	cmp	r3, #32
 800455e:	f040 80af 	bne.w	80046c0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	88db      	ldrh	r3, [r3, #6]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d03a      	beq.n	80045e0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	b25b      	sxtb	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	da1b      	bge.n	80045ac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	33b0      	adds	r3, #176	@ 0xb0
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800458a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	88d2      	ldrh	r2, [r2, #6]
 8004590:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	88db      	ldrh	r3, [r3, #6]
 8004596:	2b07      	cmp	r3, #7
 8004598:	bf28      	it	cs
 800459a:	2307      	movcs	r3, #7
 800459c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	89fa      	ldrh	r2, [r7, #14]
 80045a2:	4619      	mov	r1, r3
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f001 fda9 	bl	80060fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80045aa:	e090      	b.n	80046ce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	785a      	ldrb	r2, [r3, #1]
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	88db      	ldrh	r3, [r3, #6]
 80045ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80045bc:	d803      	bhi.n	80045c6 <USBD_CDC_Setup+0xa6>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	88db      	ldrh	r3, [r3, #6]
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	e000      	b.n	80045c8 <USBD_CDC_Setup+0xa8>
 80045c6:	2240      	movs	r2, #64	@ 0x40
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80045ce:	6939      	ldr	r1, [r7, #16]
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80045d6:	461a      	mov	r2, r3
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f001 fdbe 	bl	800615a <USBD_CtlPrepareRx>
      break;
 80045de:	e076      	b.n	80046ce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	33b0      	adds	r3, #176	@ 0xb0
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	7850      	ldrb	r0, [r2, #1]
 80045f6:	2200      	movs	r2, #0
 80045f8:	6839      	ldr	r1, [r7, #0]
 80045fa:	4798      	blx	r3
      break;
 80045fc:	e067      	b.n	80046ce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	785b      	ldrb	r3, [r3, #1]
 8004602:	2b0b      	cmp	r3, #11
 8004604:	d851      	bhi.n	80046aa <USBD_CDC_Setup+0x18a>
 8004606:	a201      	add	r2, pc, #4	@ (adr r2, 800460c <USBD_CDC_Setup+0xec>)
 8004608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460c:	0800463d 	.word	0x0800463d
 8004610:	080046b9 	.word	0x080046b9
 8004614:	080046ab 	.word	0x080046ab
 8004618:	080046ab 	.word	0x080046ab
 800461c:	080046ab 	.word	0x080046ab
 8004620:	080046ab 	.word	0x080046ab
 8004624:	080046ab 	.word	0x080046ab
 8004628:	080046ab 	.word	0x080046ab
 800462c:	080046ab 	.word	0x080046ab
 8004630:	080046ab 	.word	0x080046ab
 8004634:	08004667 	.word	0x08004667
 8004638:	08004691 	.word	0x08004691
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b03      	cmp	r3, #3
 8004646:	d107      	bne.n	8004658 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004648:	f107 030a 	add.w	r3, r7, #10
 800464c:	2202      	movs	r2, #2
 800464e:	4619      	mov	r1, r3
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f001 fd53 	bl	80060fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004656:	e032      	b.n	80046be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004658:	6839      	ldr	r1, [r7, #0]
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f001 fcd1 	bl	8006002 <USBD_CtlError>
            ret = USBD_FAIL;
 8004660:	2303      	movs	r3, #3
 8004662:	75fb      	strb	r3, [r7, #23]
          break;
 8004664:	e02b      	b.n	80046be <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b03      	cmp	r3, #3
 8004670:	d107      	bne.n	8004682 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004672:	f107 030d 	add.w	r3, r7, #13
 8004676:	2201      	movs	r2, #1
 8004678:	4619      	mov	r1, r3
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f001 fd3e 	bl	80060fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004680:	e01d      	b.n	80046be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004682:	6839      	ldr	r1, [r7, #0]
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f001 fcbc 	bl	8006002 <USBD_CtlError>
            ret = USBD_FAIL;
 800468a:	2303      	movs	r3, #3
 800468c:	75fb      	strb	r3, [r7, #23]
          break;
 800468e:	e016      	b.n	80046be <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b03      	cmp	r3, #3
 800469a:	d00f      	beq.n	80046bc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800469c:	6839      	ldr	r1, [r7, #0]
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f001 fcaf 	bl	8006002 <USBD_CtlError>
            ret = USBD_FAIL;
 80046a4:	2303      	movs	r3, #3
 80046a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80046a8:	e008      	b.n	80046bc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80046aa:	6839      	ldr	r1, [r7, #0]
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f001 fca8 	bl	8006002 <USBD_CtlError>
          ret = USBD_FAIL;
 80046b2:	2303      	movs	r3, #3
 80046b4:	75fb      	strb	r3, [r7, #23]
          break;
 80046b6:	e002      	b.n	80046be <USBD_CDC_Setup+0x19e>
          break;
 80046b8:	bf00      	nop
 80046ba:	e008      	b.n	80046ce <USBD_CDC_Setup+0x1ae>
          break;
 80046bc:	bf00      	nop
      }
      break;
 80046be:	e006      	b.n	80046ce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80046c0:	6839      	ldr	r1, [r7, #0]
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f001 fc9d 	bl	8006002 <USBD_CtlError>
      ret = USBD_FAIL;
 80046c8:	2303      	movs	r3, #3
 80046ca:	75fb      	strb	r3, [r7, #23]
      break;
 80046cc:	bf00      	nop
  }

  return (uint8_t)ret;
 80046ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80046ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	32b0      	adds	r2, #176	@ 0xb0
 80046f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80046fe:	2303      	movs	r3, #3
 8004700:	e065      	b.n	80047ce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	32b0      	adds	r2, #176	@ 0xb0
 800470c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004710:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	f003 020f 	and.w	r2, r3, #15
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	4613      	mov	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	3314      	adds	r3, #20
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d02f      	beq.n	800478c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800472c:	78fb      	ldrb	r3, [r7, #3]
 800472e:	f003 020f 	and.w	r2, r3, #15
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	4613      	mov	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	3314      	adds	r3, #20
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	78fb      	ldrb	r3, [r7, #3]
 8004744:	f003 010f 	and.w	r1, r3, #15
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	460b      	mov	r3, r1
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	440b      	add	r3, r1
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4403      	add	r3, r0
 8004754:	331c      	adds	r3, #28
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	fbb2 f1f3 	udiv	r1, r2, r3
 800475c:	fb01 f303 	mul.w	r3, r1, r3
 8004760:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004762:	2b00      	cmp	r3, #0
 8004764:	d112      	bne.n	800478c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004766:	78fb      	ldrb	r3, [r7, #3]
 8004768:	f003 020f 	and.w	r2, r3, #15
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	4613      	mov	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	440b      	add	r3, r1
 8004778:	3314      	adds	r3, #20
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800477e:	78f9      	ldrb	r1, [r7, #3]
 8004780:	2300      	movs	r3, #0
 8004782:	2200      	movs	r2, #0
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f002 f9b8 	bl	8006afa <USBD_LL_Transmit>
 800478a:	e01f      	b.n	80047cc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2200      	movs	r2, #0
 8004790:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	33b0      	adds	r3, #176	@ 0xb0
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d010      	beq.n	80047cc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	33b0      	adds	r3, #176	@ 0xb0
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80047c8:	78fa      	ldrb	r2, [r7, #3]
 80047ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	460b      	mov	r3, r1
 80047e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	32b0      	adds	r2, #176	@ 0xb0
 80047ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	32b0      	adds	r2, #176	@ 0xb0
 80047fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004804:	2303      	movs	r3, #3
 8004806:	e01a      	b.n	800483e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	4619      	mov	r1, r3
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f002 f9b6 	bl	8006b7e <USBD_LL_GetRxDataSize>
 8004812:	4602      	mov	r2, r0
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	33b0      	adds	r3, #176	@ 0xb0
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8004838:	4611      	mov	r1, r2
 800483a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b084      	sub	sp, #16
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	32b0      	adds	r2, #176	@ 0xb0
 8004858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800485c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004864:	2303      	movs	r3, #3
 8004866:	e024      	b.n	80048b2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	33b0      	adds	r3, #176	@ 0xb0
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d019      	beq.n	80048b0 <USBD_CDC_EP0_RxReady+0x6a>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004882:	2bff      	cmp	r3, #255	@ 0xff
 8004884:	d014      	beq.n	80048b0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	33b0      	adds	r3, #176	@ 0xb0
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800489e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80048a6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	22ff      	movs	r2, #255	@ 0xff
 80048ac:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80048c4:	2182      	movs	r1, #130	@ 0x82
 80048c6:	4818      	ldr	r0, [pc, #96]	@ (8004928 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80048c8:	f000 fd62 	bl	8005390 <USBD_GetEpDesc>
 80048cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80048ce:	2101      	movs	r1, #1
 80048d0:	4815      	ldr	r0, [pc, #84]	@ (8004928 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80048d2:	f000 fd5d 	bl	8005390 <USBD_GetEpDesc>
 80048d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80048d8:	2181      	movs	r1, #129	@ 0x81
 80048da:	4813      	ldr	r0, [pc, #76]	@ (8004928 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80048dc:	f000 fd58 	bl	8005390 <USBD_GetEpDesc>
 80048e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	2210      	movs	r2, #16
 80048ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d006      	beq.n	8004902 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048fc:	711a      	strb	r2, [r3, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d006      	beq.n	8004916 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004910:	711a      	strb	r2, [r3, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2243      	movs	r2, #67	@ 0x43
 800491a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800491c:	4b02      	ldr	r3, [pc, #8]	@ (8004928 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800491e:	4618      	mov	r0, r3
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20000084 	.word	0x20000084

0800492c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004934:	2182      	movs	r1, #130	@ 0x82
 8004936:	4818      	ldr	r0, [pc, #96]	@ (8004998 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004938:	f000 fd2a 	bl	8005390 <USBD_GetEpDesc>
 800493c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800493e:	2101      	movs	r1, #1
 8004940:	4815      	ldr	r0, [pc, #84]	@ (8004998 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004942:	f000 fd25 	bl	8005390 <USBD_GetEpDesc>
 8004946:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004948:	2181      	movs	r1, #129	@ 0x81
 800494a:	4813      	ldr	r0, [pc, #76]	@ (8004998 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800494c:	f000 fd20 	bl	8005390 <USBD_GetEpDesc>
 8004950:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2210      	movs	r2, #16
 800495c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d006      	beq.n	8004972 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	2200      	movs	r2, #0
 8004968:	711a      	strb	r2, [r3, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f042 0202 	orr.w	r2, r2, #2
 8004970:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d006      	beq.n	8004986 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	711a      	strb	r2, [r3, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f042 0202 	orr.w	r2, r2, #2
 8004984:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2243      	movs	r2, #67	@ 0x43
 800498a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800498c:	4b02      	ldr	r3, [pc, #8]	@ (8004998 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800498e:	4618      	mov	r0, r3
 8004990:	3718      	adds	r7, #24
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	20000084 	.word	0x20000084

0800499c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80049a4:	2182      	movs	r1, #130	@ 0x82
 80049a6:	4818      	ldr	r0, [pc, #96]	@ (8004a08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80049a8:	f000 fcf2 	bl	8005390 <USBD_GetEpDesc>
 80049ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80049ae:	2101      	movs	r1, #1
 80049b0:	4815      	ldr	r0, [pc, #84]	@ (8004a08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80049b2:	f000 fced 	bl	8005390 <USBD_GetEpDesc>
 80049b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80049b8:	2181      	movs	r1, #129	@ 0x81
 80049ba:	4813      	ldr	r0, [pc, #76]	@ (8004a08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80049bc:	f000 fce8 	bl	8005390 <USBD_GetEpDesc>
 80049c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2210      	movs	r2, #16
 80049cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d006      	beq.n	80049e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049dc:	711a      	strb	r2, [r3, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d006      	beq.n	80049f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049f0:	711a      	strb	r2, [r3, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2243      	movs	r2, #67	@ 0x43
 80049fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80049fc:	4b02      	ldr	r3, [pc, #8]	@ (8004a08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000084 	.word	0x20000084

08004a0c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	220a      	movs	r2, #10
 8004a18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004a1a:	4b03      	ldr	r3, [pc, #12]	@ (8004a28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	20000040 	.word	0x20000040

08004a2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e009      	b.n	8004a54 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	33b0      	adds	r3, #176	@ 0xb0
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	32b0      	adds	r2, #176	@ 0xb0
 8004a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a7a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e008      	b.n	8004a98 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	32b0      	adds	r2, #176	@ 0xb0
 8004ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004abc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e004      	b.n	8004ad2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
	...

08004ae0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	32b0      	adds	r2, #176	@ 0xb0
 8004af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004af6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8004af8:	2301      	movs	r3, #1
 8004afa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e025      	b.n	8004b52 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d11f      	bne.n	8004b50 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004b18:	4b10      	ldr	r3, [pc, #64]	@ (8004b5c <USBD_CDC_TransmitPacket+0x7c>)
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	f003 020f 	and.w	r2, r3, #15
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4403      	add	r3, r0
 8004b32:	3314      	adds	r3, #20
 8004b34:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004b36:	4b09      	ldr	r3, [pc, #36]	@ (8004b5c <USBD_CDC_TransmitPacket+0x7c>)
 8004b38:	7819      	ldrb	r1, [r3, #0]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f001 ffd7 	bl	8006afa <USBD_LL_Transmit>

    ret = USBD_OK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	200000c7 	.word	0x200000c7

08004b60 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	32b0      	adds	r2, #176	@ 0xb0
 8004b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b76:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	32b0      	adds	r2, #176	@ 0xb0
 8004b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e018      	b.n	8004bc0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	7c1b      	ldrb	r3, [r3, #16]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10a      	bne.n	8004bac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004b96:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc8 <USBD_CDC_ReceivePacket+0x68>)
 8004b98:	7819      	ldrb	r1, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004ba0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f001 ffc9 	bl	8006b3c <USBD_LL_PrepareReceive>
 8004baa:	e008      	b.n	8004bbe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004bac:	4b06      	ldr	r3, [pc, #24]	@ (8004bc8 <USBD_CDC_ReceivePacket+0x68>)
 8004bae:	7819      	ldrb	r1, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004bb6:	2340      	movs	r3, #64	@ 0x40
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f001 ffbf 	bl	8006b3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	200000c8 	.word	0x200000c8

08004bcc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e01f      	b.n	8004c24 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	79fa      	ldrb	r2, [r7, #7]
 8004c16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f001 fe39 	bl	8006890 <USBD_LL_Init>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e025      	b.n	8004c90 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	32ae      	adds	r2, #174	@ 0xae
 8004c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00f      	beq.n	8004c80 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	32ae      	adds	r2, #174	@ 0xae
 8004c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c70:	f107 020e 	add.w	r2, r7, #14
 8004c74:	4610      	mov	r0, r2
 8004c76:	4798      	blx	r3
 8004c78:	4602      	mov	r2, r0
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f001 fe41 	bl	8006928 <USBD_LL_Start>
 8004ca6:	4603      	mov	r3, r0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004cb8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	460b      	mov	r3, r1
 8004cd0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d009      	beq.n	8004cf4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	78fa      	ldrb	r2, [r7, #3]
 8004cea:	4611      	mov	r1, r2
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	4798      	blx	r3
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b084      	sub	sp, #16
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	460b      	mov	r3, r1
 8004d08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	78fa      	ldrb	r2, [r7, #3]
 8004d18:	4611      	mov	r1, r2
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	4798      	blx	r3
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004d24:	2303      	movs	r3, #3
 8004d26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b084      	sub	sp, #16
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004d42:	6839      	ldr	r1, [r7, #0]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f001 f922 	bl	8005f8e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8004d58:	461a      	mov	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004d66:	f003 031f 	and.w	r3, r3, #31
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d01a      	beq.n	8004da4 <USBD_LL_SetupStage+0x72>
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d822      	bhi.n	8004db8 <USBD_LL_SetupStage+0x86>
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <USBD_LL_SetupStage+0x4a>
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d00a      	beq.n	8004d90 <USBD_LL_SetupStage+0x5e>
 8004d7a:	e01d      	b.n	8004db8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004d82:	4619      	mov	r1, r3
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 fb77 	bl	8005478 <USBD_StdDevReq>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8004d8e:	e020      	b.n	8004dd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004d96:	4619      	mov	r1, r3
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fbdf 	bl	800555c <USBD_StdItfReq>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	73fb      	strb	r3, [r7, #15]
      break;
 8004da2:	e016      	b.n	8004dd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004daa:	4619      	mov	r1, r3
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 fc41 	bl	8005634 <USBD_StdEPReq>
 8004db2:	4603      	mov	r3, r0
 8004db4:	73fb      	strb	r3, [r7, #15]
      break;
 8004db6:	e00c      	b.n	8004dd2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004dbe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f001 fe0e 	bl	80069e8 <USBD_LL_StallEP>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	73fb      	strb	r3, [r7, #15]
      break;
 8004dd0:	bf00      	nop
  }

  return ret;
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	460b      	mov	r3, r1
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8004dee:	7afb      	ldrb	r3, [r7, #11]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d177      	bne.n	8004ee4 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004dfa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004e02:	2b03      	cmp	r3, #3
 8004e04:	f040 80a1 	bne.w	8004f4a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	8992      	ldrh	r2, [r2, #12]
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d91c      	bls.n	8004e4e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	8992      	ldrh	r2, [r2, #12]
 8004e1c:	1a9a      	subs	r2, r3, r2
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	8992      	ldrh	r2, [r2, #12]
 8004e2a:	441a      	add	r2, r3
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	6919      	ldr	r1, [r3, #16]
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	899b      	ldrh	r3, [r3, #12]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	bf38      	it	cc
 8004e42:	4613      	movcc	r3, r2
 8004e44:	461a      	mov	r2, r3
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f001 f9a8 	bl	800619c <USBD_CtlContinueRx>
 8004e4c:	e07d      	b.n	8004f4a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004e54:	f003 031f 	and.w	r3, r3, #31
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d014      	beq.n	8004e86 <USBD_LL_DataOutStage+0xaa>
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d81d      	bhi.n	8004e9c <USBD_LL_DataOutStage+0xc0>
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d002      	beq.n	8004e6a <USBD_LL_DataOutStage+0x8e>
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d003      	beq.n	8004e70 <USBD_LL_DataOutStage+0x94>
 8004e68:	e018      	b.n	8004e9c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	75bb      	strb	r3, [r7, #22]
            break;
 8004e6e:	e018      	b.n	8004ea2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	4619      	mov	r1, r3
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 fa6e 	bl	800535c <USBD_CoreFindIF>
 8004e80:	4603      	mov	r3, r0
 8004e82:	75bb      	strb	r3, [r7, #22]
            break;
 8004e84:	e00d      	b.n	8004ea2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	4619      	mov	r1, r3
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 fa70 	bl	8005376 <USBD_CoreFindEP>
 8004e96:	4603      	mov	r3, r0
 8004e98:	75bb      	strb	r3, [r7, #22]
            break;
 8004e9a:	e002      	b.n	8004ea2 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	75bb      	strb	r3, [r7, #22]
            break;
 8004ea0:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004ea2:	7dbb      	ldrb	r3, [r7, #22]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d119      	bne.n	8004edc <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d113      	bne.n	8004edc <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004eb4:	7dba      	ldrb	r2, [r7, #22]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	32ae      	adds	r2, #174	@ 0xae
 8004eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00b      	beq.n	8004edc <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8004ec4:	7dba      	ldrb	r2, [r7, #22]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004ecc:	7dba      	ldrb	r2, [r7, #22]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	32ae      	adds	r2, #174	@ 0xae
 8004ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f001 f96e 	bl	80061be <USBD_CtlSendStatus>
 8004ee2:	e032      	b.n	8004f4a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004ee4:	7afb      	ldrb	r3, [r7, #11]
 8004ee6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	4619      	mov	r1, r3
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 fa41 	bl	8005376 <USBD_CoreFindEP>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004ef8:	7dbb      	ldrb	r3, [r7, #22]
 8004efa:	2bff      	cmp	r3, #255	@ 0xff
 8004efc:	d025      	beq.n	8004f4a <USBD_LL_DataOutStage+0x16e>
 8004efe:	7dbb      	ldrb	r3, [r7, #22]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d122      	bne.n	8004f4a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b03      	cmp	r3, #3
 8004f0e:	d117      	bne.n	8004f40 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004f10:	7dba      	ldrb	r2, [r7, #22]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	32ae      	adds	r2, #174	@ 0xae
 8004f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00f      	beq.n	8004f40 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8004f20:	7dba      	ldrb	r2, [r7, #22]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004f28:	7dba      	ldrb	r2, [r7, #22]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	32ae      	adds	r2, #174	@ 0xae
 8004f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	7afa      	ldrb	r2, [r7, #11]
 8004f36:	4611      	mov	r1, r2
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	4798      	blx	r3
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004f40:	7dfb      	ldrb	r3, [r7, #23]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8004f46:	7dfb      	ldrb	r3, [r7, #23]
 8004f48:	e000      	b.n	8004f4c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	607a      	str	r2, [r7, #4]
 8004f60:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8004f62:	7afb      	ldrb	r3, [r7, #11]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d178      	bne.n	800505a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	3314      	adds	r3, #20
 8004f6c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d163      	bne.n	8005040 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	8992      	ldrh	r2, [r2, #12]
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d91c      	bls.n	8004fbe <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	8992      	ldrh	r2, [r2, #12]
 8004f8c:	1a9a      	subs	r2, r3, r2
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	8992      	ldrh	r2, [r2, #12]
 8004f9a:	441a      	add	r2, r3
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	6919      	ldr	r1, [r3, #16]
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f001 f8c4 	bl	8006138 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f001 fdc0 	bl	8006b3c <USBD_LL_PrepareReceive>
 8004fbc:	e040      	b.n	8005040 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	899b      	ldrh	r3, [r3, #12]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d11c      	bne.n	8005006 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d316      	bcc.n	8005006 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d20f      	bcs.n	8005006 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	2100      	movs	r1, #0
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f001 f8a4 	bl	8006138 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f001 fd9c 	bl	8006b3c <USBD_LL_PrepareReceive>
 8005004:	e01c      	b.n	8005040 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b03      	cmp	r3, #3
 8005010:	d10f      	bne.n	8005032 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d009      	beq.n	8005032 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005032:	2180      	movs	r1, #128	@ 0x80
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f001 fcd7 	bl	80069e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f001 f8d2 	bl	80061e4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d03a      	beq.n	80050c0 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f7ff fe30 	bl	8004cb0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005058:	e032      	b.n	80050c0 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800505a:	7afb      	ldrb	r3, [r7, #11]
 800505c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005060:	b2db      	uxtb	r3, r3
 8005062:	4619      	mov	r1, r3
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 f986 	bl	8005376 <USBD_CoreFindEP>
 800506a:	4603      	mov	r3, r0
 800506c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800506e:	7dfb      	ldrb	r3, [r7, #23]
 8005070:	2bff      	cmp	r3, #255	@ 0xff
 8005072:	d025      	beq.n	80050c0 <USBD_LL_DataInStage+0x16c>
 8005074:	7dfb      	ldrb	r3, [r7, #23]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d122      	bne.n	80050c0 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b03      	cmp	r3, #3
 8005084:	d11c      	bne.n	80050c0 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005086:	7dfa      	ldrb	r2, [r7, #23]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	32ae      	adds	r2, #174	@ 0xae
 800508c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d014      	beq.n	80050c0 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8005096:	7dfa      	ldrb	r2, [r7, #23]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800509e:	7dfa      	ldrb	r2, [r7, #23]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	32ae      	adds	r2, #174	@ 0xae
 80050a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	7afa      	ldrb	r2, [r7, #11]
 80050ac:	4611      	mov	r1, r2
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	4798      	blx	r3
 80050b2:	4603      	mov	r3, r0
 80050b4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80050b6:	7dbb      	ldrb	r3, [r7, #22]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80050bc:	7dbb      	ldrb	r3, [r7, #22]
 80050be:	e000      	b.n	80050c2 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3718      	adds	r7, #24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b084      	sub	sp, #16
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005102:	2b00      	cmp	r3, #0
 8005104:	d014      	beq.n	8005130 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00e      	beq.n	8005130 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6852      	ldr	r2, [r2, #4]
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	4611      	mov	r1, r2
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	4798      	blx	r3
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800512c:	2303      	movs	r3, #3
 800512e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005130:	2340      	movs	r3, #64	@ 0x40
 8005132:	2200      	movs	r2, #0
 8005134:	2100      	movs	r1, #0
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f001 fc11 	bl	800695e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2240      	movs	r2, #64	@ 0x40
 8005148:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800514c:	2340      	movs	r3, #64	@ 0x40
 800514e:	2200      	movs	r2, #0
 8005150:	2180      	movs	r1, #128	@ 0x80
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f001 fc03 	bl	800695e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2240      	movs	r2, #64	@ 0x40
 8005164:	841a      	strh	r2, [r3, #32]

  return ret;
 8005166:	7bfb      	ldrb	r3, [r7, #15]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	78fa      	ldrb	r2, [r7, #3]
 8005180:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	d006      	beq.n	80051b2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2204      	movs	r2, #4
 80051b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b04      	cmp	r3, #4
 80051da:	d106      	bne.n	80051ea <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b03      	cmp	r3, #3
 800520a:	d110      	bne.n	800522e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00b      	beq.n	800522e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d005      	beq.n	800522e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	32ae      	adds	r2, #174	@ 0xae
 800524e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005256:	2303      	movs	r3, #3
 8005258:	e01c      	b.n	8005294 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b03      	cmp	r3, #3
 8005264:	d115      	bne.n	8005292 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	32ae      	adds	r2, #174	@ 0xae
 8005270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00b      	beq.n	8005292 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	32ae      	adds	r2, #174	@ 0xae
 8005284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	78fa      	ldrb	r2, [r7, #3]
 800528c:	4611      	mov	r1, r2
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	460b      	mov	r3, r1
 80052a6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	32ae      	adds	r2, #174	@ 0xae
 80052b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e01c      	b.n	80052f8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b03      	cmp	r3, #3
 80052c8:	d115      	bne.n	80052f6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	32ae      	adds	r2, #174	@ 0xae
 80052d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00b      	beq.n	80052f6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	32ae      	adds	r2, #174	@ 0xae
 80052e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ee:	78fa      	ldrb	r2, [r7, #3]
 80052f0:	4611      	mov	r1, r2
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b084      	sub	sp, #16
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00e      	beq.n	8005352 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6852      	ldr	r2, [r2, #4]
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	4611      	mov	r1, r2
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	4798      	blx	r3
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800534e:	2303      	movs	r3, #3
 8005350:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005352:	7bfb      	ldrb	r3, [r7, #15]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	460b      	mov	r3, r1
 8005366:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005368:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800536a:	4618      	mov	r0, r3
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	460b      	mov	r3, r1
 8005380:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005382:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005384:	4618      	mov	r0, r3
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	460b      	mov	r3, r1
 800539a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80053a4:	2300      	movs	r3, #0
 80053a6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	885b      	ldrh	r3, [r3, #2]
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	7812      	ldrb	r2, [r2, #0]
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d91f      	bls.n	80053f6 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80053bc:	e013      	b.n	80053e6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80053be:	f107 030a 	add.w	r3, r7, #10
 80053c2:	4619      	mov	r1, r3
 80053c4:	6978      	ldr	r0, [r7, #20]
 80053c6:	f000 f81b 	bl	8005400 <USBD_GetNextDesc>
 80053ca:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	785b      	ldrb	r3, [r3, #1]
 80053d0:	2b05      	cmp	r3, #5
 80053d2:	d108      	bne.n	80053e6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	789b      	ldrb	r3, [r3, #2]
 80053dc:	78fa      	ldrb	r2, [r7, #3]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d008      	beq.n	80053f4 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80053e2:	2300      	movs	r3, #0
 80053e4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	885b      	ldrh	r3, [r3, #2]
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	897b      	ldrh	r3, [r7, #10]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d8e5      	bhi.n	80053be <USBD_GetEpDesc+0x2e>
 80053f2:	e000      	b.n	80053f6 <USBD_GetEpDesc+0x66>
          break;
 80053f4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80053f6:	693b      	ldr	r3, [r7, #16]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	881b      	ldrh	r3, [r3, #0]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	7812      	ldrb	r2, [r2, #0]
 8005416:	4413      	add	r3, r2
 8005418:	b29a      	uxth	r2, r3
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	461a      	mov	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4413      	add	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800542a:	68fb      	ldr	r3, [r7, #12]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	3301      	adds	r3, #1
 800544e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005456:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800545a:	021b      	lsls	r3, r3, #8
 800545c:	b21a      	sxth	r2, r3
 800545e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005462:	4313      	orrs	r3, r2
 8005464:	b21b      	sxth	r3, r3
 8005466:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005468:	89fb      	ldrh	r3, [r7, #14]
}
 800546a:	4618      	mov	r0, r3
 800546c:	371c      	adds	r7, #28
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
	...

08005478 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005482:	2300      	movs	r3, #0
 8005484:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800548e:	2b40      	cmp	r3, #64	@ 0x40
 8005490:	d005      	beq.n	800549e <USBD_StdDevReq+0x26>
 8005492:	2b40      	cmp	r3, #64	@ 0x40
 8005494:	d857      	bhi.n	8005546 <USBD_StdDevReq+0xce>
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00f      	beq.n	80054ba <USBD_StdDevReq+0x42>
 800549a:	2b20      	cmp	r3, #32
 800549c:	d153      	bne.n	8005546 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	32ae      	adds	r2, #174	@ 0xae
 80054a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	6839      	ldr	r1, [r7, #0]
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	4798      	blx	r3
 80054b4:	4603      	mov	r3, r0
 80054b6:	73fb      	strb	r3, [r7, #15]
      break;
 80054b8:	e04a      	b.n	8005550 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	785b      	ldrb	r3, [r3, #1]
 80054be:	2b09      	cmp	r3, #9
 80054c0:	d83b      	bhi.n	800553a <USBD_StdDevReq+0xc2>
 80054c2:	a201      	add	r2, pc, #4	@ (adr r2, 80054c8 <USBD_StdDevReq+0x50>)
 80054c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c8:	0800551d 	.word	0x0800551d
 80054cc:	08005531 	.word	0x08005531
 80054d0:	0800553b 	.word	0x0800553b
 80054d4:	08005527 	.word	0x08005527
 80054d8:	0800553b 	.word	0x0800553b
 80054dc:	080054fb 	.word	0x080054fb
 80054e0:	080054f1 	.word	0x080054f1
 80054e4:	0800553b 	.word	0x0800553b
 80054e8:	08005513 	.word	0x08005513
 80054ec:	08005505 	.word	0x08005505
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80054f0:	6839      	ldr	r1, [r7, #0]
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fa3e 	bl	8005974 <USBD_GetDescriptor>
          break;
 80054f8:	e024      	b.n	8005544 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80054fa:	6839      	ldr	r1, [r7, #0]
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fba3 	bl	8005c48 <USBD_SetAddress>
          break;
 8005502:	e01f      	b.n	8005544 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005504:	6839      	ldr	r1, [r7, #0]
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fbe2 	bl	8005cd0 <USBD_SetConfig>
 800550c:	4603      	mov	r3, r0
 800550e:	73fb      	strb	r3, [r7, #15]
          break;
 8005510:	e018      	b.n	8005544 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005512:	6839      	ldr	r1, [r7, #0]
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fc85 	bl	8005e24 <USBD_GetConfig>
          break;
 800551a:	e013      	b.n	8005544 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800551c:	6839      	ldr	r1, [r7, #0]
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fcb6 	bl	8005e90 <USBD_GetStatus>
          break;
 8005524:	e00e      	b.n	8005544 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005526:	6839      	ldr	r1, [r7, #0]
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 fce5 	bl	8005ef8 <USBD_SetFeature>
          break;
 800552e:	e009      	b.n	8005544 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005530:	6839      	ldr	r1, [r7, #0]
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fd09 	bl	8005f4a <USBD_ClrFeature>
          break;
 8005538:	e004      	b.n	8005544 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800553a:	6839      	ldr	r1, [r7, #0]
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fd60 	bl	8006002 <USBD_CtlError>
          break;
 8005542:	bf00      	nop
      }
      break;
 8005544:	e004      	b.n	8005550 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005546:	6839      	ldr	r1, [r7, #0]
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 fd5a 	bl	8006002 <USBD_CtlError>
      break;
 800554e:	bf00      	nop
  }

  return ret;
 8005550:	7bfb      	ldrb	r3, [r7, #15]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop

0800555c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005566:	2300      	movs	r3, #0
 8005568:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005572:	2b40      	cmp	r3, #64	@ 0x40
 8005574:	d005      	beq.n	8005582 <USBD_StdItfReq+0x26>
 8005576:	2b40      	cmp	r3, #64	@ 0x40
 8005578:	d852      	bhi.n	8005620 <USBD_StdItfReq+0xc4>
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <USBD_StdItfReq+0x26>
 800557e:	2b20      	cmp	r3, #32
 8005580:	d14e      	bne.n	8005620 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005588:	b2db      	uxtb	r3, r3
 800558a:	3b01      	subs	r3, #1
 800558c:	2b02      	cmp	r3, #2
 800558e:	d840      	bhi.n	8005612 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	889b      	ldrh	r3, [r3, #4]
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b01      	cmp	r3, #1
 8005598:	d836      	bhi.n	8005608 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	889b      	ldrh	r3, [r3, #4]
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	4619      	mov	r1, r3
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7ff feda 	bl	800535c <USBD_CoreFindIF>
 80055a8:	4603      	mov	r3, r0
 80055aa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80055ac:	7bbb      	ldrb	r3, [r7, #14]
 80055ae:	2bff      	cmp	r3, #255	@ 0xff
 80055b0:	d01d      	beq.n	80055ee <USBD_StdItfReq+0x92>
 80055b2:	7bbb      	ldrb	r3, [r7, #14]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d11a      	bne.n	80055ee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80055b8:	7bba      	ldrb	r2, [r7, #14]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	32ae      	adds	r2, #174	@ 0xae
 80055be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00f      	beq.n	80055e8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80055c8:	7bba      	ldrb	r2, [r7, #14]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80055d0:	7bba      	ldrb	r2, [r7, #14]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	32ae      	adds	r2, #174	@ 0xae
 80055d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	6839      	ldr	r1, [r7, #0]
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	4798      	blx	r3
 80055e2:	4603      	mov	r3, r0
 80055e4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80055e6:	e004      	b.n	80055f2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80055e8:	2303      	movs	r3, #3
 80055ea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80055ec:	e001      	b.n	80055f2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80055ee:	2303      	movs	r3, #3
 80055f0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	88db      	ldrh	r3, [r3, #6]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d110      	bne.n	800561c <USBD_StdItfReq+0xc0>
 80055fa:	7bfb      	ldrb	r3, [r7, #15]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10d      	bne.n	800561c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 fddc 	bl	80061be <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005606:	e009      	b.n	800561c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005608:	6839      	ldr	r1, [r7, #0]
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fcf9 	bl	8006002 <USBD_CtlError>
          break;
 8005610:	e004      	b.n	800561c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005612:	6839      	ldr	r1, [r7, #0]
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 fcf4 	bl	8006002 <USBD_CtlError>
          break;
 800561a:	e000      	b.n	800561e <USBD_StdItfReq+0xc2>
          break;
 800561c:	bf00      	nop
      }
      break;
 800561e:	e004      	b.n	800562a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005620:	6839      	ldr	r1, [r7, #0]
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fced 	bl	8006002 <USBD_CtlError>
      break;
 8005628:	bf00      	nop
  }

  return ret;
 800562a:	7bfb      	ldrb	r3, [r7, #15]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	889b      	ldrh	r3, [r3, #4]
 8005646:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005650:	2b40      	cmp	r3, #64	@ 0x40
 8005652:	d007      	beq.n	8005664 <USBD_StdEPReq+0x30>
 8005654:	2b40      	cmp	r3, #64	@ 0x40
 8005656:	f200 8181 	bhi.w	800595c <USBD_StdEPReq+0x328>
 800565a:	2b00      	cmp	r3, #0
 800565c:	d02a      	beq.n	80056b4 <USBD_StdEPReq+0x80>
 800565e:	2b20      	cmp	r3, #32
 8005660:	f040 817c 	bne.w	800595c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005664:	7bbb      	ldrb	r3, [r7, #14]
 8005666:	4619      	mov	r1, r3
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7ff fe84 	bl	8005376 <USBD_CoreFindEP>
 800566e:	4603      	mov	r3, r0
 8005670:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005672:	7b7b      	ldrb	r3, [r7, #13]
 8005674:	2bff      	cmp	r3, #255	@ 0xff
 8005676:	f000 8176 	beq.w	8005966 <USBD_StdEPReq+0x332>
 800567a:	7b7b      	ldrb	r3, [r7, #13]
 800567c:	2b00      	cmp	r3, #0
 800567e:	f040 8172 	bne.w	8005966 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8005682:	7b7a      	ldrb	r2, [r7, #13]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800568a:	7b7a      	ldrb	r2, [r7, #13]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	32ae      	adds	r2, #174	@ 0xae
 8005690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 8165 	beq.w	8005966 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800569c:	7b7a      	ldrb	r2, [r7, #13]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	32ae      	adds	r2, #174	@ 0xae
 80056a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	6839      	ldr	r1, [r7, #0]
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	4798      	blx	r3
 80056ae:	4603      	mov	r3, r0
 80056b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056b2:	e158      	b.n	8005966 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	785b      	ldrb	r3, [r3, #1]
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d008      	beq.n	80056ce <USBD_StdEPReq+0x9a>
 80056bc:	2b03      	cmp	r3, #3
 80056be:	f300 8147 	bgt.w	8005950 <USBD_StdEPReq+0x31c>
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 809b 	beq.w	80057fe <USBD_StdEPReq+0x1ca>
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d03c      	beq.n	8005746 <USBD_StdEPReq+0x112>
 80056cc:	e140      	b.n	8005950 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d002      	beq.n	80056e0 <USBD_StdEPReq+0xac>
 80056da:	2b03      	cmp	r3, #3
 80056dc:	d016      	beq.n	800570c <USBD_StdEPReq+0xd8>
 80056de:	e02c      	b.n	800573a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80056e0:	7bbb      	ldrb	r3, [r7, #14]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00d      	beq.n	8005702 <USBD_StdEPReq+0xce>
 80056e6:	7bbb      	ldrb	r3, [r7, #14]
 80056e8:	2b80      	cmp	r3, #128	@ 0x80
 80056ea:	d00a      	beq.n	8005702 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80056ec:	7bbb      	ldrb	r3, [r7, #14]
 80056ee:	4619      	mov	r1, r3
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f001 f979 	bl	80069e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80056f6:	2180      	movs	r1, #128	@ 0x80
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f001 f975 	bl	80069e8 <USBD_LL_StallEP>
 80056fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005700:	e020      	b.n	8005744 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005702:	6839      	ldr	r1, [r7, #0]
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fc7c 	bl	8006002 <USBD_CtlError>
              break;
 800570a:	e01b      	b.n	8005744 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	885b      	ldrh	r3, [r3, #2]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10e      	bne.n	8005732 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005714:	7bbb      	ldrb	r3, [r7, #14]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00b      	beq.n	8005732 <USBD_StdEPReq+0xfe>
 800571a:	7bbb      	ldrb	r3, [r7, #14]
 800571c:	2b80      	cmp	r3, #128	@ 0x80
 800571e:	d008      	beq.n	8005732 <USBD_StdEPReq+0xfe>
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	88db      	ldrh	r3, [r3, #6]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d104      	bne.n	8005732 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005728:	7bbb      	ldrb	r3, [r7, #14]
 800572a:	4619      	mov	r1, r3
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f001 f95b 	bl	80069e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fd43 	bl	80061be <USBD_CtlSendStatus>

              break;
 8005738:	e004      	b.n	8005744 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800573a:	6839      	ldr	r1, [r7, #0]
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fc60 	bl	8006002 <USBD_CtlError>
              break;
 8005742:	bf00      	nop
          }
          break;
 8005744:	e109      	b.n	800595a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d002      	beq.n	8005758 <USBD_StdEPReq+0x124>
 8005752:	2b03      	cmp	r3, #3
 8005754:	d016      	beq.n	8005784 <USBD_StdEPReq+0x150>
 8005756:	e04b      	b.n	80057f0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005758:	7bbb      	ldrb	r3, [r7, #14]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00d      	beq.n	800577a <USBD_StdEPReq+0x146>
 800575e:	7bbb      	ldrb	r3, [r7, #14]
 8005760:	2b80      	cmp	r3, #128	@ 0x80
 8005762:	d00a      	beq.n	800577a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005764:	7bbb      	ldrb	r3, [r7, #14]
 8005766:	4619      	mov	r1, r3
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f001 f93d 	bl	80069e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800576e:	2180      	movs	r1, #128	@ 0x80
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f001 f939 	bl	80069e8 <USBD_LL_StallEP>
 8005776:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005778:	e040      	b.n	80057fc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800577a:	6839      	ldr	r1, [r7, #0]
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fc40 	bl	8006002 <USBD_CtlError>
              break;
 8005782:	e03b      	b.n	80057fc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	885b      	ldrh	r3, [r3, #2]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d136      	bne.n	80057fa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800578c:	7bbb      	ldrb	r3, [r7, #14]
 800578e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005792:	2b00      	cmp	r3, #0
 8005794:	d004      	beq.n	80057a0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005796:	7bbb      	ldrb	r3, [r7, #14]
 8005798:	4619      	mov	r1, r3
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f001 f943 	bl	8006a26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 fd0c 	bl	80061be <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80057a6:	7bbb      	ldrb	r3, [r7, #14]
 80057a8:	4619      	mov	r1, r3
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7ff fde3 	bl	8005376 <USBD_CoreFindEP>
 80057b0:	4603      	mov	r3, r0
 80057b2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80057b4:	7b7b      	ldrb	r3, [r7, #13]
 80057b6:	2bff      	cmp	r3, #255	@ 0xff
 80057b8:	d01f      	beq.n	80057fa <USBD_StdEPReq+0x1c6>
 80057ba:	7b7b      	ldrb	r3, [r7, #13]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d11c      	bne.n	80057fa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80057c0:	7b7a      	ldrb	r2, [r7, #13]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80057c8:	7b7a      	ldrb	r2, [r7, #13]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	32ae      	adds	r2, #174	@ 0xae
 80057ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d010      	beq.n	80057fa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80057d8:	7b7a      	ldrb	r2, [r7, #13]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	32ae      	adds	r2, #174	@ 0xae
 80057de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	6839      	ldr	r1, [r7, #0]
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	4798      	blx	r3
 80057ea:	4603      	mov	r3, r0
 80057ec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80057ee:	e004      	b.n	80057fa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80057f0:	6839      	ldr	r1, [r7, #0]
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fc05 	bl	8006002 <USBD_CtlError>
              break;
 80057f8:	e000      	b.n	80057fc <USBD_StdEPReq+0x1c8>
              break;
 80057fa:	bf00      	nop
          }
          break;
 80057fc:	e0ad      	b.n	800595a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d002      	beq.n	8005810 <USBD_StdEPReq+0x1dc>
 800580a:	2b03      	cmp	r3, #3
 800580c:	d033      	beq.n	8005876 <USBD_StdEPReq+0x242>
 800580e:	e099      	b.n	8005944 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005810:	7bbb      	ldrb	r3, [r7, #14]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d007      	beq.n	8005826 <USBD_StdEPReq+0x1f2>
 8005816:	7bbb      	ldrb	r3, [r7, #14]
 8005818:	2b80      	cmp	r3, #128	@ 0x80
 800581a:	d004      	beq.n	8005826 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800581c:	6839      	ldr	r1, [r7, #0]
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fbef 	bl	8006002 <USBD_CtlError>
                break;
 8005824:	e093      	b.n	800594e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005826:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800582a:	2b00      	cmp	r3, #0
 800582c:	da0b      	bge.n	8005846 <USBD_StdEPReq+0x212>
 800582e:	7bbb      	ldrb	r3, [r7, #14]
 8005830:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005834:	4613      	mov	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	3310      	adds	r3, #16
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	4413      	add	r3, r2
 8005842:	3304      	adds	r3, #4
 8005844:	e00b      	b.n	800585e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005846:	7bbb      	ldrb	r3, [r7, #14]
 8005848:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800584c:	4613      	mov	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	4413      	add	r3, r2
 800585c:	3304      	adds	r3, #4
 800585e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2200      	movs	r2, #0
 8005864:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	330e      	adds	r3, #14
 800586a:	2202      	movs	r2, #2
 800586c:	4619      	mov	r1, r3
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 fc44 	bl	80060fc <USBD_CtlSendData>
              break;
 8005874:	e06b      	b.n	800594e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005876:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800587a:	2b00      	cmp	r3, #0
 800587c:	da11      	bge.n	80058a2 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800587e:	7bbb      	ldrb	r3, [r7, #14]
 8005880:	f003 020f 	and.w	r2, r3, #15
 8005884:	6879      	ldr	r1, [r7, #4]
 8005886:	4613      	mov	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	440b      	add	r3, r1
 8005890:	3323      	adds	r3, #35	@ 0x23
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d117      	bne.n	80058c8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8005898:	6839      	ldr	r1, [r7, #0]
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fbb1 	bl	8006002 <USBD_CtlError>
                  break;
 80058a0:	e055      	b.n	800594e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80058a2:	7bbb      	ldrb	r3, [r7, #14]
 80058a4:	f003 020f 	and.w	r2, r3, #15
 80058a8:	6879      	ldr	r1, [r7, #4]
 80058aa:	4613      	mov	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4413      	add	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	440b      	add	r3, r1
 80058b4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d104      	bne.n	80058c8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80058be:	6839      	ldr	r1, [r7, #0]
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 fb9e 	bl	8006002 <USBD_CtlError>
                  break;
 80058c6:	e042      	b.n	800594e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	da0b      	bge.n	80058e8 <USBD_StdEPReq+0x2b4>
 80058d0:	7bbb      	ldrb	r3, [r7, #14]
 80058d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80058d6:	4613      	mov	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	3310      	adds	r3, #16
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	4413      	add	r3, r2
 80058e4:	3304      	adds	r3, #4
 80058e6:	e00b      	b.n	8005900 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80058e8:	7bbb      	ldrb	r3, [r7, #14]
 80058ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058ee:	4613      	mov	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	4413      	add	r3, r2
 80058fe:	3304      	adds	r3, #4
 8005900:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005902:	7bbb      	ldrb	r3, [r7, #14]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d002      	beq.n	800590e <USBD_StdEPReq+0x2da>
 8005908:	7bbb      	ldrb	r3, [r7, #14]
 800590a:	2b80      	cmp	r3, #128	@ 0x80
 800590c:	d103      	bne.n	8005916 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2200      	movs	r2, #0
 8005912:	739a      	strb	r2, [r3, #14]
 8005914:	e00e      	b.n	8005934 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005916:	7bbb      	ldrb	r3, [r7, #14]
 8005918:	4619      	mov	r1, r3
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f001 f8a2 	bl	8006a64 <USBD_LL_IsStallEP>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2201      	movs	r2, #1
 800592a:	739a      	strb	r2, [r3, #14]
 800592c:	e002      	b.n	8005934 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2200      	movs	r2, #0
 8005932:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	330e      	adds	r3, #14
 8005938:	2202      	movs	r2, #2
 800593a:	4619      	mov	r1, r3
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 fbdd 	bl	80060fc <USBD_CtlSendData>
              break;
 8005942:	e004      	b.n	800594e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8005944:	6839      	ldr	r1, [r7, #0]
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fb5b 	bl	8006002 <USBD_CtlError>
              break;
 800594c:	bf00      	nop
          }
          break;
 800594e:	e004      	b.n	800595a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8005950:	6839      	ldr	r1, [r7, #0]
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fb55 	bl	8006002 <USBD_CtlError>
          break;
 8005958:	bf00      	nop
      }
      break;
 800595a:	e005      	b.n	8005968 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800595c:	6839      	ldr	r1, [r7, #0]
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fb4f 	bl	8006002 <USBD_CtlError>
      break;
 8005964:	e000      	b.n	8005968 <USBD_StdEPReq+0x334>
      break;
 8005966:	bf00      	nop
  }

  return ret;
 8005968:	7bfb      	ldrb	r3, [r7, #15]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
	...

08005974 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800597e:	2300      	movs	r3, #0
 8005980:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005982:	2300      	movs	r3, #0
 8005984:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	885b      	ldrh	r3, [r3, #2]
 800598e:	0a1b      	lsrs	r3, r3, #8
 8005990:	b29b      	uxth	r3, r3
 8005992:	3b01      	subs	r3, #1
 8005994:	2b06      	cmp	r3, #6
 8005996:	f200 8128 	bhi.w	8005bea <USBD_GetDescriptor+0x276>
 800599a:	a201      	add	r2, pc, #4	@ (adr r2, 80059a0 <USBD_GetDescriptor+0x2c>)
 800599c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a0:	080059bd 	.word	0x080059bd
 80059a4:	080059d5 	.word	0x080059d5
 80059a8:	08005a15 	.word	0x08005a15
 80059ac:	08005beb 	.word	0x08005beb
 80059b0:	08005beb 	.word	0x08005beb
 80059b4:	08005b8b 	.word	0x08005b8b
 80059b8:	08005bb7 	.word	0x08005bb7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	7c12      	ldrb	r2, [r2, #16]
 80059c8:	f107 0108 	add.w	r1, r7, #8
 80059cc:	4610      	mov	r0, r2
 80059ce:	4798      	blx	r3
 80059d0:	60f8      	str	r0, [r7, #12]
      break;
 80059d2:	e112      	b.n	8005bfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	7c1b      	ldrb	r3, [r3, #16]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10d      	bne.n	80059f8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e4:	f107 0208 	add.w	r2, r7, #8
 80059e8:	4610      	mov	r0, r2
 80059ea:	4798      	blx	r3
 80059ec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	3301      	adds	r3, #1
 80059f2:	2202      	movs	r2, #2
 80059f4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80059f6:	e100      	b.n	8005bfa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a00:	f107 0208 	add.w	r2, r7, #8
 8005a04:	4610      	mov	r0, r2
 8005a06:	4798      	blx	r3
 8005a08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	2202      	movs	r2, #2
 8005a10:	701a      	strb	r2, [r3, #0]
      break;
 8005a12:	e0f2      	b.n	8005bfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	885b      	ldrh	r3, [r3, #2]
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b05      	cmp	r3, #5
 8005a1c:	f200 80ac 	bhi.w	8005b78 <USBD_GetDescriptor+0x204>
 8005a20:	a201      	add	r2, pc, #4	@ (adr r2, 8005a28 <USBD_GetDescriptor+0xb4>)
 8005a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a26:	bf00      	nop
 8005a28:	08005a41 	.word	0x08005a41
 8005a2c:	08005a75 	.word	0x08005a75
 8005a30:	08005aa9 	.word	0x08005aa9
 8005a34:	08005add 	.word	0x08005add
 8005a38:	08005b11 	.word	0x08005b11
 8005a3c:	08005b45 	.word	0x08005b45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00b      	beq.n	8005a64 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	7c12      	ldrb	r2, [r2, #16]
 8005a58:	f107 0108 	add.w	r1, r7, #8
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	4798      	blx	r3
 8005a60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a62:	e091      	b.n	8005b88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a64:	6839      	ldr	r1, [r7, #0]
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 facb 	bl	8006002 <USBD_CtlError>
            err++;
 8005a6c:	7afb      	ldrb	r3, [r7, #11]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	72fb      	strb	r3, [r7, #11]
          break;
 8005a72:	e089      	b.n	8005b88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00b      	beq.n	8005a98 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	7c12      	ldrb	r2, [r2, #16]
 8005a8c:	f107 0108 	add.w	r1, r7, #8
 8005a90:	4610      	mov	r0, r2
 8005a92:	4798      	blx	r3
 8005a94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a96:	e077      	b.n	8005b88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a98:	6839      	ldr	r1, [r7, #0]
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fab1 	bl	8006002 <USBD_CtlError>
            err++;
 8005aa0:	7afb      	ldrb	r3, [r7, #11]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	72fb      	strb	r3, [r7, #11]
          break;
 8005aa6:	e06f      	b.n	8005b88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00b      	beq.n	8005acc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	7c12      	ldrb	r2, [r2, #16]
 8005ac0:	f107 0108 	add.w	r1, r7, #8
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	4798      	blx	r3
 8005ac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005aca:	e05d      	b.n	8005b88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005acc:	6839      	ldr	r1, [r7, #0]
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fa97 	bl	8006002 <USBD_CtlError>
            err++;
 8005ad4:	7afb      	ldrb	r3, [r7, #11]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	72fb      	strb	r3, [r7, #11]
          break;
 8005ada:	e055      	b.n	8005b88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00b      	beq.n	8005b00 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	7c12      	ldrb	r2, [r2, #16]
 8005af4:	f107 0108 	add.w	r1, r7, #8
 8005af8:	4610      	mov	r0, r2
 8005afa:	4798      	blx	r3
 8005afc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005afe:	e043      	b.n	8005b88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b00:	6839      	ldr	r1, [r7, #0]
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fa7d 	bl	8006002 <USBD_CtlError>
            err++;
 8005b08:	7afb      	ldrb	r3, [r7, #11]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	72fb      	strb	r3, [r7, #11]
          break;
 8005b0e:	e03b      	b.n	8005b88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00b      	beq.n	8005b34 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	7c12      	ldrb	r2, [r2, #16]
 8005b28:	f107 0108 	add.w	r1, r7, #8
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	4798      	blx	r3
 8005b30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b32:	e029      	b.n	8005b88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b34:	6839      	ldr	r1, [r7, #0]
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fa63 	bl	8006002 <USBD_CtlError>
            err++;
 8005b3c:	7afb      	ldrb	r3, [r7, #11]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	72fb      	strb	r3, [r7, #11]
          break;
 8005b42:	e021      	b.n	8005b88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00b      	beq.n	8005b68 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	7c12      	ldrb	r2, [r2, #16]
 8005b5c:	f107 0108 	add.w	r1, r7, #8
 8005b60:	4610      	mov	r0, r2
 8005b62:	4798      	blx	r3
 8005b64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b66:	e00f      	b.n	8005b88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b68:	6839      	ldr	r1, [r7, #0]
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fa49 	bl	8006002 <USBD_CtlError>
            err++;
 8005b70:	7afb      	ldrb	r3, [r7, #11]
 8005b72:	3301      	adds	r3, #1
 8005b74:	72fb      	strb	r3, [r7, #11]
          break;
 8005b76:	e007      	b.n	8005b88 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005b78:	6839      	ldr	r1, [r7, #0]
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fa41 	bl	8006002 <USBD_CtlError>
          err++;
 8005b80:	7afb      	ldrb	r3, [r7, #11]
 8005b82:	3301      	adds	r3, #1
 8005b84:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005b86:	bf00      	nop
      }
      break;
 8005b88:	e037      	b.n	8005bfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	7c1b      	ldrb	r3, [r3, #16]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d109      	bne.n	8005ba6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b9a:	f107 0208 	add.w	r2, r7, #8
 8005b9e:	4610      	mov	r0, r2
 8005ba0:	4798      	blx	r3
 8005ba2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ba4:	e029      	b.n	8005bfa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005ba6:	6839      	ldr	r1, [r7, #0]
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 fa2a 	bl	8006002 <USBD_CtlError>
        err++;
 8005bae:	7afb      	ldrb	r3, [r7, #11]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	72fb      	strb	r3, [r7, #11]
      break;
 8005bb4:	e021      	b.n	8005bfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	7c1b      	ldrb	r3, [r3, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10d      	bne.n	8005bda <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc6:	f107 0208 	add.w	r2, r7, #8
 8005bca:	4610      	mov	r0, r2
 8005bcc:	4798      	blx	r3
 8005bce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	2207      	movs	r2, #7
 8005bd6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005bd8:	e00f      	b.n	8005bfa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005bda:	6839      	ldr	r1, [r7, #0]
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fa10 	bl	8006002 <USBD_CtlError>
        err++;
 8005be2:	7afb      	ldrb	r3, [r7, #11]
 8005be4:	3301      	adds	r3, #1
 8005be6:	72fb      	strb	r3, [r7, #11]
      break;
 8005be8:	e007      	b.n	8005bfa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005bea:	6839      	ldr	r1, [r7, #0]
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 fa08 	bl	8006002 <USBD_CtlError>
      err++;
 8005bf2:	7afb      	ldrb	r3, [r7, #11]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	72fb      	strb	r3, [r7, #11]
      break;
 8005bf8:	bf00      	nop
  }

  if (err != 0U)
 8005bfa:	7afb      	ldrb	r3, [r7, #11]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d11e      	bne.n	8005c3e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	88db      	ldrh	r3, [r3, #6]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d016      	beq.n	8005c36 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005c08:	893b      	ldrh	r3, [r7, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00e      	beq.n	8005c2c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	88da      	ldrh	r2, [r3, #6]
 8005c12:	893b      	ldrh	r3, [r7, #8]
 8005c14:	4293      	cmp	r3, r2
 8005c16:	bf28      	it	cs
 8005c18:	4613      	movcs	r3, r2
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005c1e:	893b      	ldrh	r3, [r7, #8]
 8005c20:	461a      	mov	r2, r3
 8005c22:	68f9      	ldr	r1, [r7, #12]
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fa69 	bl	80060fc <USBD_CtlSendData>
 8005c2a:	e009      	b.n	8005c40 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f9e7 	bl	8006002 <USBD_CtlError>
 8005c34:	e004      	b.n	8005c40 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fac1 	bl	80061be <USBD_CtlSendStatus>
 8005c3c:	e000      	b.n	8005c40 <USBD_GetDescriptor+0x2cc>
    return;
 8005c3e:	bf00      	nop
  }
}
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop

08005c48 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	889b      	ldrh	r3, [r3, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d131      	bne.n	8005cbe <USBD_SetAddress+0x76>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	88db      	ldrh	r3, [r3, #6]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d12d      	bne.n	8005cbe <USBD_SetAddress+0x76>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	885b      	ldrh	r3, [r3, #2]
 8005c66:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c68:	d829      	bhi.n	8005cbe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	885b      	ldrh	r3, [r3, #2]
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	d104      	bne.n	8005c8c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005c82:	6839      	ldr	r1, [r7, #0]
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f9bc 	bl	8006002 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c8a:	e01d      	b.n	8005cc8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	7bfa      	ldrb	r2, [r7, #15]
 8005c90:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
 8005c96:	4619      	mov	r1, r3
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 ff0f 	bl	8006abc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fa8d 	bl	80061be <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d004      	beq.n	8005cb4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2202      	movs	r2, #2
 8005cae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cb2:	e009      	b.n	8005cc8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cbc:	e004      	b.n	8005cc8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005cbe:	6839      	ldr	r1, [r7, #0]
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f99e 	bl	8006002 <USBD_CtlError>
  }
}
 8005cc6:	bf00      	nop
 8005cc8:	bf00      	nop
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	885b      	ldrh	r3, [r3, #2]
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	4b4e      	ldr	r3, [pc, #312]	@ (8005e20 <USBD_SetConfig+0x150>)
 8005ce6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005ce8:	4b4d      	ldr	r3, [pc, #308]	@ (8005e20 <USBD_SetConfig+0x150>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d905      	bls.n	8005cfc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005cf0:	6839      	ldr	r1, [r7, #0]
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f985 	bl	8006002 <USBD_CtlError>
    return USBD_FAIL;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e08c      	b.n	8005e16 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d002      	beq.n	8005d0e <USBD_SetConfig+0x3e>
 8005d08:	2b03      	cmp	r3, #3
 8005d0a:	d029      	beq.n	8005d60 <USBD_SetConfig+0x90>
 8005d0c:	e075      	b.n	8005dfa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005d0e:	4b44      	ldr	r3, [pc, #272]	@ (8005e20 <USBD_SetConfig+0x150>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d020      	beq.n	8005d58 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005d16:	4b42      	ldr	r3, [pc, #264]	@ (8005e20 <USBD_SetConfig+0x150>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005d20:	4b3f      	ldr	r3, [pc, #252]	@ (8005e20 <USBD_SetConfig+0x150>)
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	4619      	mov	r1, r3
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7fe ffcd 	bl	8004cc6 <USBD_SetClassConfig>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d008      	beq.n	8005d48 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f962 	bl	8006002 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2202      	movs	r2, #2
 8005d42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005d46:	e065      	b.n	8005e14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fa38 	bl	80061be <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2203      	movs	r2, #3
 8005d52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005d56:	e05d      	b.n	8005e14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fa30 	bl	80061be <USBD_CtlSendStatus>
      break;
 8005d5e:	e059      	b.n	8005e14 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005d60:	4b2f      	ldr	r3, [pc, #188]	@ (8005e20 <USBD_SetConfig+0x150>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d112      	bne.n	8005d8e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8005d70:	4b2b      	ldr	r3, [pc, #172]	@ (8005e20 <USBD_SetConfig+0x150>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	461a      	mov	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005d7a:	4b29      	ldr	r3, [pc, #164]	@ (8005e20 <USBD_SetConfig+0x150>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	4619      	mov	r1, r3
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7fe ffbc 	bl	8004cfe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fa19 	bl	80061be <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005d8c:	e042      	b.n	8005e14 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005d8e:	4b24      	ldr	r3, [pc, #144]	@ (8005e20 <USBD_SetConfig+0x150>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	461a      	mov	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d02a      	beq.n	8005df2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	4619      	mov	r1, r3
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7fe ffaa 	bl	8004cfe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005daa:	4b1d      	ldr	r3, [pc, #116]	@ (8005e20 <USBD_SetConfig+0x150>)
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	461a      	mov	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005db4:	4b1a      	ldr	r3, [pc, #104]	@ (8005e20 <USBD_SetConfig+0x150>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	4619      	mov	r1, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7fe ff83 	bl	8004cc6 <USBD_SetClassConfig>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00f      	beq.n	8005dea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005dca:	6839      	ldr	r1, [r7, #0]
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f918 	bl	8006002 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	4619      	mov	r1, r3
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7fe ff8f 	bl	8004cfe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2202      	movs	r2, #2
 8005de4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005de8:	e014      	b.n	8005e14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f9e7 	bl	80061be <USBD_CtlSendStatus>
      break;
 8005df0:	e010      	b.n	8005e14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f9e3 	bl	80061be <USBD_CtlSendStatus>
      break;
 8005df8:	e00c      	b.n	8005e14 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005dfa:	6839      	ldr	r1, [r7, #0]
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f900 	bl	8006002 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005e02:	4b07      	ldr	r3, [pc, #28]	@ (8005e20 <USBD_SetConfig+0x150>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	4619      	mov	r1, r3
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7fe ff78 	bl	8004cfe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	73fb      	strb	r3, [r7, #15]
      break;
 8005e12:	bf00      	nop
  }

  return ret;
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	20000150 	.word	0x20000150

08005e24 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	88db      	ldrh	r3, [r3, #6]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d004      	beq.n	8005e40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005e36:	6839      	ldr	r1, [r7, #0]
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f8e2 	bl	8006002 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005e3e:	e023      	b.n	8005e88 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	dc02      	bgt.n	8005e52 <USBD_GetConfig+0x2e>
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	dc03      	bgt.n	8005e58 <USBD_GetConfig+0x34>
 8005e50:	e015      	b.n	8005e7e <USBD_GetConfig+0x5a>
 8005e52:	2b03      	cmp	r3, #3
 8005e54:	d00b      	beq.n	8005e6e <USBD_GetConfig+0x4a>
 8005e56:	e012      	b.n	8005e7e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	3308      	adds	r3, #8
 8005e62:	2201      	movs	r2, #1
 8005e64:	4619      	mov	r1, r3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f948 	bl	80060fc <USBD_CtlSendData>
        break;
 8005e6c:	e00c      	b.n	8005e88 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3304      	adds	r3, #4
 8005e72:	2201      	movs	r2, #1
 8005e74:	4619      	mov	r1, r3
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f940 	bl	80060fc <USBD_CtlSendData>
        break;
 8005e7c:	e004      	b.n	8005e88 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f8be 	bl	8006002 <USBD_CtlError>
        break;
 8005e86:	bf00      	nop
}
 8005e88:	bf00      	nop
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d81e      	bhi.n	8005ee6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	88db      	ldrh	r3, [r3, #6]
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d004      	beq.n	8005eba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005eb0:	6839      	ldr	r1, [r7, #0]
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f8a5 	bl	8006002 <USBD_CtlError>
        break;
 8005eb8:	e01a      	b.n	8005ef0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d005      	beq.n	8005ed6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	f043 0202 	orr.w	r2, r3, #2
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	330c      	adds	r3, #12
 8005eda:	2202      	movs	r2, #2
 8005edc:	4619      	mov	r1, r3
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f90c 	bl	80060fc <USBD_CtlSendData>
      break;
 8005ee4:	e004      	b.n	8005ef0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005ee6:	6839      	ldr	r1, [r7, #0]
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 f88a 	bl	8006002 <USBD_CtlError>
      break;
 8005eee:	bf00      	nop
  }
}
 8005ef0:	bf00      	nop
 8005ef2:	3708      	adds	r7, #8
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	885b      	ldrh	r3, [r3, #2]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d107      	bne.n	8005f1a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f953 	bl	80061be <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005f18:	e013      	b.n	8005f42 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	885b      	ldrh	r3, [r3, #2]
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d10b      	bne.n	8005f3a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	889b      	ldrh	r3, [r3, #4]
 8005f26:	0a1b      	lsrs	r3, r3, #8
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f943 	bl	80061be <USBD_CtlSendStatus>
}
 8005f38:	e003      	b.n	8005f42 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005f3a:	6839      	ldr	r1, [r7, #0]
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f860 	bl	8006002 <USBD_CtlError>
}
 8005f42:	bf00      	nop
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b082      	sub	sp, #8
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
 8005f52:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d80b      	bhi.n	8005f7a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	885b      	ldrh	r3, [r3, #2]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d10c      	bne.n	8005f84 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f923 	bl	80061be <USBD_CtlSendStatus>
      }
      break;
 8005f78:	e004      	b.n	8005f84 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005f7a:	6839      	ldr	r1, [r7, #0]
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f840 	bl	8006002 <USBD_CtlError>
      break;
 8005f82:	e000      	b.n	8005f86 <USBD_ClrFeature+0x3c>
      break;
 8005f84:	bf00      	nop
  }
}
 8005f86:	bf00      	nop
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	781a      	ldrb	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	781a      	ldrb	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f7ff fa3d 	bl	8005438 <SWAPBYTE>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f7ff fa30 	bl	8005438 <SWAPBYTE>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	461a      	mov	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f7ff fa23 	bl	8005438 <SWAPBYTE>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	80da      	strh	r2, [r3, #6]
}
 8005ffa:	bf00      	nop
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b082      	sub	sp, #8
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800600c:	2180      	movs	r1, #128	@ 0x80
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fcea 	bl	80069e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006014:	2100      	movs	r1, #0
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 fce6 	bl	80069e8 <USBD_LL_StallEP>
}
 800601c:	bf00      	nop
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d042      	beq.n	80060c0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800603e:	6938      	ldr	r0, [r7, #16]
 8006040:	f000 f842 	bl	80060c8 <USBD_GetLen>
 8006044:	4603      	mov	r3, r0
 8006046:	3301      	adds	r3, #1
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800604e:	d808      	bhi.n	8006062 <USBD_GetString+0x3e>
 8006050:	6938      	ldr	r0, [r7, #16]
 8006052:	f000 f839 	bl	80060c8 <USBD_GetLen>
 8006056:	4603      	mov	r3, r0
 8006058:	3301      	adds	r3, #1
 800605a:	b29b      	uxth	r3, r3
 800605c:	005b      	lsls	r3, r3, #1
 800605e:	b29a      	uxth	r2, r3
 8006060:	e001      	b.n	8006066 <USBD_GetString+0x42>
 8006062:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800606a:	7dfb      	ldrb	r3, [r7, #23]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	4413      	add	r3, r2
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	7812      	ldrb	r2, [r2, #0]
 8006074:	701a      	strb	r2, [r3, #0]
  idx++;
 8006076:	7dfb      	ldrb	r3, [r7, #23]
 8006078:	3301      	adds	r3, #1
 800607a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800607c:	7dfb      	ldrb	r3, [r7, #23]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	4413      	add	r3, r2
 8006082:	2203      	movs	r2, #3
 8006084:	701a      	strb	r2, [r3, #0]
  idx++;
 8006086:	7dfb      	ldrb	r3, [r7, #23]
 8006088:	3301      	adds	r3, #1
 800608a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800608c:	e013      	b.n	80060b6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800608e:	7dfb      	ldrb	r3, [r7, #23]
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	4413      	add	r3, r2
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	7812      	ldrb	r2, [r2, #0]
 8006098:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	3301      	adds	r3, #1
 800609e:	613b      	str	r3, [r7, #16]
    idx++;
 80060a0:	7dfb      	ldrb	r3, [r7, #23]
 80060a2:	3301      	adds	r3, #1
 80060a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80060a6:	7dfb      	ldrb	r3, [r7, #23]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	4413      	add	r3, r2
 80060ac:	2200      	movs	r2, #0
 80060ae:	701a      	strb	r2, [r3, #0]
    idx++;
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
 80060b2:	3301      	adds	r3, #1
 80060b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1e7      	bne.n	800608e <USBD_GetString+0x6a>
 80060be:	e000      	b.n	80060c2 <USBD_GetString+0x9e>
    return;
 80060c0:	bf00      	nop
  }
}
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80060d8:	e005      	b.n	80060e6 <USBD_GetLen+0x1e>
  {
    len++;
 80060da:	7bfb      	ldrb	r3, [r7, #15]
 80060dc:	3301      	adds	r3, #1
 80060de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	3301      	adds	r3, #1
 80060e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1f5      	bne.n	80060da <USBD_GetLen+0x12>
  }

  return len;
 80060ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2202      	movs	r2, #2
 800610c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	2100      	movs	r1, #0
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f000 fce6 	bl	8006afa <USBD_LL_Transmit>

  return USBD_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	2100      	movs	r1, #0
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f000 fcd5 	bl	8006afa <USBD_LL_Transmit>

  return USBD_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b084      	sub	sp, #16
 800615e:	af00      	add	r7, sp, #0
 8006160:	60f8      	str	r0, [r7, #12]
 8006162:	60b9      	str	r1, [r7, #8]
 8006164:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2203      	movs	r2, #3
 800616a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	2100      	movs	r1, #0
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 fcd5 	bl	8006b3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	2100      	movs	r1, #0
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f000 fcc4 	bl	8006b3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b082      	sub	sp, #8
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2204      	movs	r2, #4
 80061ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80061ce:	2300      	movs	r3, #0
 80061d0:	2200      	movs	r2, #0
 80061d2:	2100      	movs	r1, #0
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fc90 	bl	8006afa <USBD_LL_Transmit>

  return USBD_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3708      	adds	r7, #8
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2205      	movs	r2, #5
 80061f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061f4:	2300      	movs	r3, #0
 80061f6:	2200      	movs	r2, #0
 80061f8:	2100      	movs	r1, #0
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fc9e 	bl	8006b3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
	...

0800620c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006210:	2200      	movs	r2, #0
 8006212:	4912      	ldr	r1, [pc, #72]	@ (800625c <MX_USB_DEVICE_Init+0x50>)
 8006214:	4812      	ldr	r0, [pc, #72]	@ (8006260 <MX_USB_DEVICE_Init+0x54>)
 8006216:	f7fe fcd9 	bl	8004bcc <USBD_Init>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006220:	f7fa fa24 	bl	800066c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006224:	490f      	ldr	r1, [pc, #60]	@ (8006264 <MX_USB_DEVICE_Init+0x58>)
 8006226:	480e      	ldr	r0, [pc, #56]	@ (8006260 <MX_USB_DEVICE_Init+0x54>)
 8006228:	f7fe fd00 	bl	8004c2c <USBD_RegisterClass>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006232:	f7fa fa1b 	bl	800066c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006236:	490c      	ldr	r1, [pc, #48]	@ (8006268 <MX_USB_DEVICE_Init+0x5c>)
 8006238:	4809      	ldr	r0, [pc, #36]	@ (8006260 <MX_USB_DEVICE_Init+0x54>)
 800623a:	f7fe fbf7 	bl	8004a2c <USBD_CDC_RegisterInterface>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006244:	f7fa fa12 	bl	800066c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006248:	4805      	ldr	r0, [pc, #20]	@ (8006260 <MX_USB_DEVICE_Init+0x54>)
 800624a:	f7fe fd25 	bl	8004c98 <USBD_Start>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006254:	f7fa fa0a 	bl	800066c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006258:	bf00      	nop
 800625a:	bd80      	pop	{r7, pc}
 800625c:	200000e0 	.word	0x200000e0
 8006260:	20000154 	.word	0x20000154
 8006264:	2000004c 	.word	0x2000004c
 8006268:	200000cc 	.word	0x200000cc

0800626c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006270:	2200      	movs	r2, #0
 8006272:	4905      	ldr	r1, [pc, #20]	@ (8006288 <CDC_Init_FS+0x1c>)
 8006274:	4805      	ldr	r0, [pc, #20]	@ (800628c <CDC_Init_FS+0x20>)
 8006276:	f7fe fbf3 	bl	8004a60 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800627a:	4905      	ldr	r1, [pc, #20]	@ (8006290 <CDC_Init_FS+0x24>)
 800627c:	4803      	ldr	r0, [pc, #12]	@ (800628c <CDC_Init_FS+0x20>)
 800627e:	f7fe fc11 	bl	8004aa4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006282:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006284:	4618      	mov	r0, r3
 8006286:	bd80      	pop	{r7, pc}
 8006288:	20000c30 	.word	0x20000c30
 800628c:	20000154 	.word	0x20000154
 8006290:	20000430 	.word	0x20000430

08006294 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006294:	b480      	push	{r7}
 8006296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006298:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800629a:	4618      	mov	r0, r3
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	4603      	mov	r3, r0
 80062ac:	6039      	str	r1, [r7, #0]
 80062ae:	71fb      	strb	r3, [r7, #7]
 80062b0:	4613      	mov	r3, r2
 80062b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80062b4:	79fb      	ldrb	r3, [r7, #7]
 80062b6:	2b23      	cmp	r3, #35	@ 0x23
 80062b8:	d84a      	bhi.n	8006350 <CDC_Control_FS+0xac>
 80062ba:	a201      	add	r2, pc, #4	@ (adr r2, 80062c0 <CDC_Control_FS+0x1c>)
 80062bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c0:	08006351 	.word	0x08006351
 80062c4:	08006351 	.word	0x08006351
 80062c8:	08006351 	.word	0x08006351
 80062cc:	08006351 	.word	0x08006351
 80062d0:	08006351 	.word	0x08006351
 80062d4:	08006351 	.word	0x08006351
 80062d8:	08006351 	.word	0x08006351
 80062dc:	08006351 	.word	0x08006351
 80062e0:	08006351 	.word	0x08006351
 80062e4:	08006351 	.word	0x08006351
 80062e8:	08006351 	.word	0x08006351
 80062ec:	08006351 	.word	0x08006351
 80062f0:	08006351 	.word	0x08006351
 80062f4:	08006351 	.word	0x08006351
 80062f8:	08006351 	.word	0x08006351
 80062fc:	08006351 	.word	0x08006351
 8006300:	08006351 	.word	0x08006351
 8006304:	08006351 	.word	0x08006351
 8006308:	08006351 	.word	0x08006351
 800630c:	08006351 	.word	0x08006351
 8006310:	08006351 	.word	0x08006351
 8006314:	08006351 	.word	0x08006351
 8006318:	08006351 	.word	0x08006351
 800631c:	08006351 	.word	0x08006351
 8006320:	08006351 	.word	0x08006351
 8006324:	08006351 	.word	0x08006351
 8006328:	08006351 	.word	0x08006351
 800632c:	08006351 	.word	0x08006351
 8006330:	08006351 	.word	0x08006351
 8006334:	08006351 	.word	0x08006351
 8006338:	08006351 	.word	0x08006351
 800633c:	08006351 	.word	0x08006351
 8006340:	08006351 	.word	0x08006351
 8006344:	08006351 	.word	0x08006351
 8006348:	08006351 	.word	0x08006351
 800634c:	08006351 	.word	0x08006351
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006350:	bf00      	nop
  }

  return (USBD_OK);
 8006352:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006354:	4618      	mov	r0, r3
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800636a:	6879      	ldr	r1, [r7, #4]
 800636c:	4805      	ldr	r0, [pc, #20]	@ (8006384 <CDC_Receive_FS+0x24>)
 800636e:	f7fe fb99 	bl	8004aa4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006372:	4804      	ldr	r0, [pc, #16]	@ (8006384 <CDC_Receive_FS+0x24>)
 8006374:	f7fe fbf4 	bl	8004b60 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006378:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800637a:	4618      	mov	r0, r3
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20000154 	.word	0x20000154

08006388 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	460b      	mov	r3, r1
 8006392:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006394:	2300      	movs	r3, #0
 8006396:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006398:	4b0d      	ldr	r3, [pc, #52]	@ (80063d0 <CDC_Transmit_FS+0x48>)
 800639a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800639e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d001      	beq.n	80063ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e00b      	b.n	80063c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80063ae:	887b      	ldrh	r3, [r7, #2]
 80063b0:	461a      	mov	r2, r3
 80063b2:	6879      	ldr	r1, [r7, #4]
 80063b4:	4806      	ldr	r0, [pc, #24]	@ (80063d0 <CDC_Transmit_FS+0x48>)
 80063b6:	f7fe fb53 	bl	8004a60 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80063ba:	4805      	ldr	r0, [pc, #20]	@ (80063d0 <CDC_Transmit_FS+0x48>)
 80063bc:	f7fe fb90 	bl	8004ae0 <USBD_CDC_TransmitPacket>
 80063c0:	4603      	mov	r3, r0
 80063c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20000154 	.word	0x20000154

080063d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	4613      	mov	r3, r2
 80063e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80063e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	371c      	adds	r7, #28
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
	...

080063f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	4603      	mov	r3, r0
 8006400:	6039      	str	r1, [r7, #0]
 8006402:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	2212      	movs	r2, #18
 8006408:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800640a:	4b03      	ldr	r3, [pc, #12]	@ (8006418 <USBD_FS_DeviceDescriptor+0x20>)
}
 800640c:	4618      	mov	r0, r3
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	200000fc 	.word	0x200000fc

0800641c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	4603      	mov	r3, r0
 8006424:	6039      	str	r1, [r7, #0]
 8006426:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2204      	movs	r2, #4
 800642c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800642e:	4b03      	ldr	r3, [pc, #12]	@ (800643c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006430:	4618      	mov	r0, r3
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	20000110 	.word	0x20000110

08006440 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	4603      	mov	r3, r0
 8006448:	6039      	str	r1, [r7, #0]
 800644a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800644c:	79fb      	ldrb	r3, [r7, #7]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d105      	bne.n	800645e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	4907      	ldr	r1, [pc, #28]	@ (8006474 <USBD_FS_ProductStrDescriptor+0x34>)
 8006456:	4808      	ldr	r0, [pc, #32]	@ (8006478 <USBD_FS_ProductStrDescriptor+0x38>)
 8006458:	f7ff fde4 	bl	8006024 <USBD_GetString>
 800645c:	e004      	b.n	8006468 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	4904      	ldr	r1, [pc, #16]	@ (8006474 <USBD_FS_ProductStrDescriptor+0x34>)
 8006462:	4805      	ldr	r0, [pc, #20]	@ (8006478 <USBD_FS_ProductStrDescriptor+0x38>)
 8006464:	f7ff fdde 	bl	8006024 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006468:	4b02      	ldr	r3, [pc, #8]	@ (8006474 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800646a:	4618      	mov	r0, r3
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20001430 	.word	0x20001430
 8006478:	08006c9c 	.word	0x08006c9c

0800647c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	4603      	mov	r3, r0
 8006484:	6039      	str	r1, [r7, #0]
 8006486:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	4904      	ldr	r1, [pc, #16]	@ (800649c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800648c:	4804      	ldr	r0, [pc, #16]	@ (80064a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800648e:	f7ff fdc9 	bl	8006024 <USBD_GetString>
  return USBD_StrDesc;
 8006492:	4b02      	ldr	r3, [pc, #8]	@ (800649c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006494:	4618      	mov	r0, r3
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	20001430 	.word	0x20001430
 80064a0:	08006cb4 	.word	0x08006cb4

080064a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	4603      	mov	r3, r0
 80064ac:	6039      	str	r1, [r7, #0]
 80064ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	221a      	movs	r2, #26
 80064b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80064b6:	f000 f843 	bl	8006540 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80064ba:	4b02      	ldr	r3, [pc, #8]	@ (80064c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	20000114 	.word	0x20000114

080064c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	4603      	mov	r3, r0
 80064d0:	6039      	str	r1, [r7, #0]
 80064d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80064d4:	79fb      	ldrb	r3, [r7, #7]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d105      	bne.n	80064e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	4907      	ldr	r1, [pc, #28]	@ (80064fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80064de:	4808      	ldr	r0, [pc, #32]	@ (8006500 <USBD_FS_ConfigStrDescriptor+0x38>)
 80064e0:	f7ff fda0 	bl	8006024 <USBD_GetString>
 80064e4:	e004      	b.n	80064f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	4904      	ldr	r1, [pc, #16]	@ (80064fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80064ea:	4805      	ldr	r0, [pc, #20]	@ (8006500 <USBD_FS_ConfigStrDescriptor+0x38>)
 80064ec:	f7ff fd9a 	bl	8006024 <USBD_GetString>
  }
  return USBD_StrDesc;
 80064f0:	4b02      	ldr	r3, [pc, #8]	@ (80064fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20001430 	.word	0x20001430
 8006500:	08006cc8 	.word	0x08006cc8

08006504 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	4603      	mov	r3, r0
 800650c:	6039      	str	r1, [r7, #0]
 800650e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006510:	79fb      	ldrb	r3, [r7, #7]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d105      	bne.n	8006522 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	4907      	ldr	r1, [pc, #28]	@ (8006538 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800651a:	4808      	ldr	r0, [pc, #32]	@ (800653c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800651c:	f7ff fd82 	bl	8006024 <USBD_GetString>
 8006520:	e004      	b.n	800652c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	4904      	ldr	r1, [pc, #16]	@ (8006538 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006526:	4805      	ldr	r0, [pc, #20]	@ (800653c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006528:	f7ff fd7c 	bl	8006024 <USBD_GetString>
  }
  return USBD_StrDesc;
 800652c:	4b02      	ldr	r3, [pc, #8]	@ (8006538 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800652e:	4618      	mov	r0, r3
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	20001430 	.word	0x20001430
 800653c:	08006cd4 	.word	0x08006cd4

08006540 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006546:	4b0f      	ldr	r3, [pc, #60]	@ (8006584 <Get_SerialNum+0x44>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800654c:	4b0e      	ldr	r3, [pc, #56]	@ (8006588 <Get_SerialNum+0x48>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006552:	4b0e      	ldr	r3, [pc, #56]	@ (800658c <Get_SerialNum+0x4c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4413      	add	r3, r2
 800655e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d009      	beq.n	800657a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006566:	2208      	movs	r2, #8
 8006568:	4909      	ldr	r1, [pc, #36]	@ (8006590 <Get_SerialNum+0x50>)
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f000 f814 	bl	8006598 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006570:	2204      	movs	r2, #4
 8006572:	4908      	ldr	r1, [pc, #32]	@ (8006594 <Get_SerialNum+0x54>)
 8006574:	68b8      	ldr	r0, [r7, #8]
 8006576:	f000 f80f 	bl	8006598 <IntToUnicode>
  }
}
 800657a:	bf00      	nop
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	1fff7a10 	.word	0x1fff7a10
 8006588:	1fff7a14 	.word	0x1fff7a14
 800658c:	1fff7a18 	.word	0x1fff7a18
 8006590:	20000116 	.word	0x20000116
 8006594:	20000126 	.word	0x20000126

08006598 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	4613      	mov	r3, r2
 80065a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80065a6:	2300      	movs	r3, #0
 80065a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80065aa:	2300      	movs	r3, #0
 80065ac:	75fb      	strb	r3, [r7, #23]
 80065ae:	e027      	b.n	8006600 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	0f1b      	lsrs	r3, r3, #28
 80065b4:	2b09      	cmp	r3, #9
 80065b6:	d80b      	bhi.n	80065d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	0f1b      	lsrs	r3, r3, #28
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	7dfb      	ldrb	r3, [r7, #23]
 80065c0:	005b      	lsls	r3, r3, #1
 80065c2:	4619      	mov	r1, r3
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	440b      	add	r3, r1
 80065c8:	3230      	adds	r2, #48	@ 0x30
 80065ca:	b2d2      	uxtb	r2, r2
 80065cc:	701a      	strb	r2, [r3, #0]
 80065ce:	e00a      	b.n	80065e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	0f1b      	lsrs	r3, r3, #28
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	4619      	mov	r1, r3
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	440b      	add	r3, r1
 80065e0:	3237      	adds	r2, #55	@ 0x37
 80065e2:	b2d2      	uxtb	r2, r2
 80065e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	011b      	lsls	r3, r3, #4
 80065ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80065ec:	7dfb      	ldrb	r3, [r7, #23]
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	3301      	adds	r3, #1
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	4413      	add	r3, r2
 80065f6:	2200      	movs	r2, #0
 80065f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80065fa:	7dfb      	ldrb	r3, [r7, #23]
 80065fc:	3301      	adds	r3, #1
 80065fe:	75fb      	strb	r3, [r7, #23]
 8006600:	7dfa      	ldrb	r2, [r7, #23]
 8006602:	79fb      	ldrb	r3, [r7, #7]
 8006604:	429a      	cmp	r2, r3
 8006606:	d3d3      	bcc.n	80065b0 <IntToUnicode+0x18>
  }
}
 8006608:	bf00      	nop
 800660a:	bf00      	nop
 800660c:	371c      	adds	r7, #28
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
	...

08006618 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b08a      	sub	sp, #40	@ 0x28
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006620:	f107 0314 	add.w	r3, r7, #20
 8006624:	2200      	movs	r2, #0
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	605a      	str	r2, [r3, #4]
 800662a:	609a      	str	r2, [r3, #8]
 800662c:	60da      	str	r2, [r3, #12]
 800662e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006638:	d13a      	bne.n	80066b0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800663a:	2300      	movs	r3, #0
 800663c:	613b      	str	r3, [r7, #16]
 800663e:	4b1e      	ldr	r3, [pc, #120]	@ (80066b8 <HAL_PCD_MspInit+0xa0>)
 8006640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006642:	4a1d      	ldr	r2, [pc, #116]	@ (80066b8 <HAL_PCD_MspInit+0xa0>)
 8006644:	f043 0301 	orr.w	r3, r3, #1
 8006648:	6313      	str	r3, [r2, #48]	@ 0x30
 800664a:	4b1b      	ldr	r3, [pc, #108]	@ (80066b8 <HAL_PCD_MspInit+0xa0>)
 800664c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	613b      	str	r3, [r7, #16]
 8006654:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006656:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800665a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800665c:	2302      	movs	r3, #2
 800665e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006660:	2300      	movs	r3, #0
 8006662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006664:	2303      	movs	r3, #3
 8006666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006668:	230a      	movs	r3, #10
 800666a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800666c:	f107 0314 	add.w	r3, r7, #20
 8006670:	4619      	mov	r1, r3
 8006672:	4812      	ldr	r0, [pc, #72]	@ (80066bc <HAL_PCD_MspInit+0xa4>)
 8006674:	f7fa fa46 	bl	8000b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006678:	4b0f      	ldr	r3, [pc, #60]	@ (80066b8 <HAL_PCD_MspInit+0xa0>)
 800667a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800667c:	4a0e      	ldr	r2, [pc, #56]	@ (80066b8 <HAL_PCD_MspInit+0xa0>)
 800667e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006682:	6353      	str	r3, [r2, #52]	@ 0x34
 8006684:	2300      	movs	r3, #0
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	4b0b      	ldr	r3, [pc, #44]	@ (80066b8 <HAL_PCD_MspInit+0xa0>)
 800668a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800668c:	4a0a      	ldr	r2, [pc, #40]	@ (80066b8 <HAL_PCD_MspInit+0xa0>)
 800668e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006692:	6453      	str	r3, [r2, #68]	@ 0x44
 8006694:	4b08      	ldr	r3, [pc, #32]	@ (80066b8 <HAL_PCD_MspInit+0xa0>)
 8006696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006698:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800669c:	60fb      	str	r3, [r7, #12]
 800669e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80066a0:	2200      	movs	r2, #0
 80066a2:	2100      	movs	r1, #0
 80066a4:	2043      	movs	r0, #67	@ 0x43
 80066a6:	f7fa f9f6 	bl	8000a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80066aa:	2043      	movs	r0, #67	@ 0x43
 80066ac:	f7fa fa0f 	bl	8000ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80066b0:	bf00      	nop
 80066b2:	3728      	adds	r7, #40	@ 0x28
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	40023800 	.word	0x40023800
 80066bc:	40020000 	.word	0x40020000

080066c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80066d4:	4619      	mov	r1, r3
 80066d6:	4610      	mov	r0, r2
 80066d8:	f7fe fb2b 	bl	8004d32 <USBD_LL_SetupStage>
}
 80066dc:	bf00      	nop
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80066f6:	78fa      	ldrb	r2, [r7, #3]
 80066f8:	6879      	ldr	r1, [r7, #4]
 80066fa:	4613      	mov	r3, r2
 80066fc:	00db      	lsls	r3, r3, #3
 80066fe:	4413      	add	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	440b      	add	r3, r1
 8006704:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	78fb      	ldrb	r3, [r7, #3]
 800670c:	4619      	mov	r1, r3
 800670e:	f7fe fb65 	bl	8004ddc <USBD_LL_DataOutStage>
}
 8006712:	bf00      	nop
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b082      	sub	sp, #8
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	460b      	mov	r3, r1
 8006724:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800672c:	78fa      	ldrb	r2, [r7, #3]
 800672e:	6879      	ldr	r1, [r7, #4]
 8006730:	4613      	mov	r3, r2
 8006732:	00db      	lsls	r3, r3, #3
 8006734:	4413      	add	r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	440b      	add	r3, r1
 800673a:	3320      	adds	r3, #32
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	78fb      	ldrb	r3, [r7, #3]
 8006740:	4619      	mov	r1, r3
 8006742:	f7fe fc07 	bl	8004f54 <USBD_LL_DataInStage>
}
 8006746:	bf00      	nop
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b082      	sub	sp, #8
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800675c:	4618      	mov	r0, r3
 800675e:	f7fe fd4b 	bl	80051f8 <USBD_LL_SOF>
}
 8006762:	bf00      	nop
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b084      	sub	sp, #16
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006772:	2301      	movs	r3, #1
 8006774:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	79db      	ldrb	r3, [r3, #7]
 800677a:	2b02      	cmp	r3, #2
 800677c:	d001      	beq.n	8006782 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800677e:	f7f9 ff75 	bl	800066c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006788:	7bfa      	ldrb	r2, [r7, #15]
 800678a:	4611      	mov	r1, r2
 800678c:	4618      	mov	r0, r3
 800678e:	f7fe fcef 	bl	8005170 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006798:	4618      	mov	r0, r3
 800679a:	f7fe fc96 	bl	80050ca <USBD_LL_Reset>
}
 800679e:	bf00      	nop
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
	...

080067a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fe fcea 	bl	8005190 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	6812      	ldr	r2, [r2, #0]
 80067ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80067ce:	f043 0301 	orr.w	r3, r3, #1
 80067d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	7adb      	ldrb	r3, [r3, #11]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d005      	beq.n	80067e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80067dc:	4b04      	ldr	r3, [pc, #16]	@ (80067f0 <HAL_PCD_SuspendCallback+0x48>)
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	4a03      	ldr	r2, [pc, #12]	@ (80067f0 <HAL_PCD_SuspendCallback+0x48>)
 80067e2:	f043 0306 	orr.w	r3, r3, #6
 80067e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80067e8:	bf00      	nop
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	e000ed00 	.word	0xe000ed00

080067f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006802:	4618      	mov	r0, r3
 8006804:	f7fe fce0 	bl	80051c8 <USBD_LL_Resume>
}
 8006808:	bf00      	nop
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	460b      	mov	r3, r1
 800681a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006822:	78fa      	ldrb	r2, [r7, #3]
 8006824:	4611      	mov	r1, r2
 8006826:	4618      	mov	r0, r3
 8006828:	f7fe fd38 	bl	800529c <USBD_LL_IsoOUTIncomplete>
}
 800682c:	bf00      	nop
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006846:	78fa      	ldrb	r2, [r7, #3]
 8006848:	4611      	mov	r1, r2
 800684a:	4618      	mov	r0, r3
 800684c:	f7fe fcf4 	bl	8005238 <USBD_LL_IsoINIncomplete>
}
 8006850:	bf00      	nop
 8006852:	3708      	adds	r7, #8
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006866:	4618      	mov	r0, r3
 8006868:	f7fe fd4a 	bl	8005300 <USBD_LL_DevConnected>
}
 800686c:	bf00      	nop
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006882:	4618      	mov	r0, r3
 8006884:	f7fe fd47 	bl	8005316 <USBD_LL_DevDisconnected>
}
 8006888:	bf00      	nop
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d13c      	bne.n	800691a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80068a0:	4a20      	ldr	r2, [pc, #128]	@ (8006924 <USBD_LL_Init+0x94>)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006924 <USBD_LL_Init+0x94>)
 80068ac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80068b0:	4b1c      	ldr	r3, [pc, #112]	@ (8006924 <USBD_LL_Init+0x94>)
 80068b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80068b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80068b8:	4b1a      	ldr	r3, [pc, #104]	@ (8006924 <USBD_LL_Init+0x94>)
 80068ba:	2204      	movs	r2, #4
 80068bc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80068be:	4b19      	ldr	r3, [pc, #100]	@ (8006924 <USBD_LL_Init+0x94>)
 80068c0:	2202      	movs	r2, #2
 80068c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80068c4:	4b17      	ldr	r3, [pc, #92]	@ (8006924 <USBD_LL_Init+0x94>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80068ca:	4b16      	ldr	r3, [pc, #88]	@ (8006924 <USBD_LL_Init+0x94>)
 80068cc:	2202      	movs	r2, #2
 80068ce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80068d0:	4b14      	ldr	r3, [pc, #80]	@ (8006924 <USBD_LL_Init+0x94>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80068d6:	4b13      	ldr	r3, [pc, #76]	@ (8006924 <USBD_LL_Init+0x94>)
 80068d8:	2200      	movs	r2, #0
 80068da:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80068dc:	4b11      	ldr	r3, [pc, #68]	@ (8006924 <USBD_LL_Init+0x94>)
 80068de:	2200      	movs	r2, #0
 80068e0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80068e2:	4b10      	ldr	r3, [pc, #64]	@ (8006924 <USBD_LL_Init+0x94>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80068e8:	4b0e      	ldr	r3, [pc, #56]	@ (8006924 <USBD_LL_Init+0x94>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80068ee:	480d      	ldr	r0, [pc, #52]	@ (8006924 <USBD_LL_Init+0x94>)
 80068f0:	f7fa fa8c 	bl	8000e0c <HAL_PCD_Init>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80068fa:	f7f9 feb7 	bl	800066c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80068fe:	2180      	movs	r1, #128	@ 0x80
 8006900:	4808      	ldr	r0, [pc, #32]	@ (8006924 <USBD_LL_Init+0x94>)
 8006902:	f7fb fcb8 	bl	8002276 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006906:	2240      	movs	r2, #64	@ 0x40
 8006908:	2100      	movs	r1, #0
 800690a:	4806      	ldr	r0, [pc, #24]	@ (8006924 <USBD_LL_Init+0x94>)
 800690c:	f7fb fc6c 	bl	80021e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006910:	2280      	movs	r2, #128	@ 0x80
 8006912:	2101      	movs	r1, #1
 8006914:	4803      	ldr	r0, [pc, #12]	@ (8006924 <USBD_LL_Init+0x94>)
 8006916:	f7fb fc67 	bl	80021e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3708      	adds	r7, #8
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	20001630 	.word	0x20001630

08006928 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006930:	2300      	movs	r3, #0
 8006932:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006934:	2300      	movs	r3, #0
 8006936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800693e:	4618      	mov	r0, r3
 8006940:	f7fa fb73 	bl	800102a <HAL_PCD_Start>
 8006944:	4603      	mov	r3, r0
 8006946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006948:	7bfb      	ldrb	r3, [r7, #15]
 800694a:	4618      	mov	r0, r3
 800694c:	f000 f942 	bl	8006bd4 <USBD_Get_USB_Status>
 8006950:	4603      	mov	r3, r0
 8006952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006954:	7bbb      	ldrb	r3, [r7, #14]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b084      	sub	sp, #16
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	4608      	mov	r0, r1
 8006968:	4611      	mov	r1, r2
 800696a:	461a      	mov	r2, r3
 800696c:	4603      	mov	r3, r0
 800696e:	70fb      	strb	r3, [r7, #3]
 8006970:	460b      	mov	r3, r1
 8006972:	70bb      	strb	r3, [r7, #2]
 8006974:	4613      	mov	r3, r2
 8006976:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006978:	2300      	movs	r3, #0
 800697a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800697c:	2300      	movs	r3, #0
 800697e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006986:	78bb      	ldrb	r3, [r7, #2]
 8006988:	883a      	ldrh	r2, [r7, #0]
 800698a:	78f9      	ldrb	r1, [r7, #3]
 800698c:	f7fb f847 	bl	8001a1e <HAL_PCD_EP_Open>
 8006990:	4603      	mov	r3, r0
 8006992:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006994:	7bfb      	ldrb	r3, [r7, #15]
 8006996:	4618      	mov	r0, r3
 8006998:	f000 f91c 	bl	8006bd4 <USBD_Get_USB_Status>
 800699c:	4603      	mov	r3, r0
 800699e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b084      	sub	sp, #16
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	460b      	mov	r3, r1
 80069b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069b6:	2300      	movs	r3, #0
 80069b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80069c4:	78fa      	ldrb	r2, [r7, #3]
 80069c6:	4611      	mov	r1, r2
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7fb f892 	bl	8001af2 <HAL_PCD_EP_Close>
 80069ce:	4603      	mov	r3, r0
 80069d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069d2:	7bfb      	ldrb	r3, [r7, #15]
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 f8fd 	bl	8006bd4 <USBD_Get_USB_Status>
 80069da:	4603      	mov	r3, r0
 80069dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069de:	7bbb      	ldrb	r3, [r7, #14]
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006a02:	78fa      	ldrb	r2, [r7, #3]
 8006a04:	4611      	mov	r1, r2
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fb f94a 	bl	8001ca0 <HAL_PCD_EP_SetStall>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 f8de 	bl	8006bd4 <USBD_Get_USB_Status>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b084      	sub	sp, #16
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
 8006a2e:	460b      	mov	r3, r1
 8006a30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006a40:	78fa      	ldrb	r2, [r7, #3]
 8006a42:	4611      	mov	r1, r2
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fb f98e 	bl	8001d66 <HAL_PCD_EP_ClrStall>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a4e:	7bfb      	ldrb	r3, [r7, #15]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 f8bf 	bl	8006bd4 <USBD_Get_USB_Status>
 8006a56:	4603      	mov	r3, r0
 8006a58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006a76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006a78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	da0b      	bge.n	8006a98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006a80:	78fb      	ldrb	r3, [r7, #3]
 8006a82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a86:	68f9      	ldr	r1, [r7, #12]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	00db      	lsls	r3, r3, #3
 8006a8c:	4413      	add	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	440b      	add	r3, r1
 8006a92:	3316      	adds	r3, #22
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	e00b      	b.n	8006ab0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006a98:	78fb      	ldrb	r3, [r7, #3]
 8006a9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a9e:	68f9      	ldr	r1, [r7, #12]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	00db      	lsls	r3, r3, #3
 8006aa4:	4413      	add	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	440b      	add	r3, r1
 8006aaa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8006aae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006ad6:	78fa      	ldrb	r2, [r7, #3]
 8006ad8:	4611      	mov	r1, r2
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7fa ff7b 	bl	80019d6 <HAL_PCD_SetAddress>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ae4:	7bfb      	ldrb	r3, [r7, #15]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 f874 	bl	8006bd4 <USBD_Get_USB_Status>
 8006aec:	4603      	mov	r3, r0
 8006aee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006af0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b086      	sub	sp, #24
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	607a      	str	r2, [r7, #4]
 8006b04:	603b      	str	r3, [r7, #0]
 8006b06:	460b      	mov	r3, r1
 8006b08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006b18:	7af9      	ldrb	r1, [r7, #11]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	f7fb f885 	bl	8001c2c <HAL_PCD_EP_Transmit>
 8006b22:	4603      	mov	r3, r0
 8006b24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b26:	7dfb      	ldrb	r3, [r7, #23]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 f853 	bl	8006bd4 <USBD_Get_USB_Status>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006b32:	7dbb      	ldrb	r3, [r7, #22]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3718      	adds	r7, #24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	607a      	str	r2, [r7, #4]
 8006b46:	603b      	str	r3, [r7, #0]
 8006b48:	460b      	mov	r3, r1
 8006b4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006b5a:	7af9      	ldrb	r1, [r7, #11]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	f7fb f811 	bl	8001b86 <HAL_PCD_EP_Receive>
 8006b64:	4603      	mov	r3, r0
 8006b66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b68:	7dfb      	ldrb	r3, [r7, #23]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 f832 	bl	8006bd4 <USBD_Get_USB_Status>
 8006b70:	4603      	mov	r3, r0
 8006b72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006b74:	7dbb      	ldrb	r3, [r7, #22]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b082      	sub	sp, #8
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	460b      	mov	r3, r1
 8006b88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006b90:	78fa      	ldrb	r2, [r7, #3]
 8006b92:	4611      	mov	r1, r2
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7fb f831 	bl	8001bfc <HAL_PCD_EP_GetRxCount>
 8006b9a:	4603      	mov	r3, r0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006bac:	4b03      	ldr	r3, [pc, #12]	@ (8006bbc <USBD_static_malloc+0x18>)
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	20001b14 	.word	0x20001b14

08006bc0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]

}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	4603      	mov	r3, r0
 8006bdc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006be2:	79fb      	ldrb	r3, [r7, #7]
 8006be4:	2b03      	cmp	r3, #3
 8006be6:	d817      	bhi.n	8006c18 <USBD_Get_USB_Status+0x44>
 8006be8:	a201      	add	r2, pc, #4	@ (adr r2, 8006bf0 <USBD_Get_USB_Status+0x1c>)
 8006bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bee:	bf00      	nop
 8006bf0:	08006c01 	.word	0x08006c01
 8006bf4:	08006c07 	.word	0x08006c07
 8006bf8:	08006c0d 	.word	0x08006c0d
 8006bfc:	08006c13 	.word	0x08006c13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	73fb      	strb	r3, [r7, #15]
    break;
 8006c04:	e00b      	b.n	8006c1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006c06:	2303      	movs	r3, #3
 8006c08:	73fb      	strb	r3, [r7, #15]
    break;
 8006c0a:	e008      	b.n	8006c1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	73fb      	strb	r3, [r7, #15]
    break;
 8006c10:	e005      	b.n	8006c1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006c12:	2303      	movs	r3, #3
 8006c14:	73fb      	strb	r3, [r7, #15]
    break;
 8006c16:	e002      	b.n	8006c1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	73fb      	strb	r3, [r7, #15]
    break;
 8006c1c:	bf00      	nop
  }
  return usb_status;
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3714      	adds	r7, #20
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <memset>:
 8006c2c:	4402      	add	r2, r0
 8006c2e:	4603      	mov	r3, r0
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d100      	bne.n	8006c36 <memset+0xa>
 8006c34:	4770      	bx	lr
 8006c36:	f803 1b01 	strb.w	r1, [r3], #1
 8006c3a:	e7f9      	b.n	8006c30 <memset+0x4>

08006c3c <__libc_init_array>:
 8006c3c:	b570      	push	{r4, r5, r6, lr}
 8006c3e:	4d0d      	ldr	r5, [pc, #52]	@ (8006c74 <__libc_init_array+0x38>)
 8006c40:	4c0d      	ldr	r4, [pc, #52]	@ (8006c78 <__libc_init_array+0x3c>)
 8006c42:	1b64      	subs	r4, r4, r5
 8006c44:	10a4      	asrs	r4, r4, #2
 8006c46:	2600      	movs	r6, #0
 8006c48:	42a6      	cmp	r6, r4
 8006c4a:	d109      	bne.n	8006c60 <__libc_init_array+0x24>
 8006c4c:	4d0b      	ldr	r5, [pc, #44]	@ (8006c7c <__libc_init_array+0x40>)
 8006c4e:	4c0c      	ldr	r4, [pc, #48]	@ (8006c80 <__libc_init_array+0x44>)
 8006c50:	f000 f818 	bl	8006c84 <_init>
 8006c54:	1b64      	subs	r4, r4, r5
 8006c56:	10a4      	asrs	r4, r4, #2
 8006c58:	2600      	movs	r6, #0
 8006c5a:	42a6      	cmp	r6, r4
 8006c5c:	d105      	bne.n	8006c6a <__libc_init_array+0x2e>
 8006c5e:	bd70      	pop	{r4, r5, r6, pc}
 8006c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c64:	4798      	blx	r3
 8006c66:	3601      	adds	r6, #1
 8006c68:	e7ee      	b.n	8006c48 <__libc_init_array+0xc>
 8006c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c6e:	4798      	blx	r3
 8006c70:	3601      	adds	r6, #1
 8006c72:	e7f2      	b.n	8006c5a <__libc_init_array+0x1e>
 8006c74:	08006cfc 	.word	0x08006cfc
 8006c78:	08006cfc 	.word	0x08006cfc
 8006c7c:	08006cfc 	.word	0x08006cfc
 8006c80:	08006d00 	.word	0x08006d00

08006c84 <_init>:
 8006c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c86:	bf00      	nop
 8006c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c8a:	bc08      	pop	{r3}
 8006c8c:	469e      	mov	lr, r3
 8006c8e:	4770      	bx	lr

08006c90 <_fini>:
 8006c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c92:	bf00      	nop
 8006c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c96:	bc08      	pop	{r3}
 8006c98:	469e      	mov	lr, r3
 8006c9a:	4770      	bx	lr
